
Basic_driver_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000070  08006028  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08006028  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f36  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f06  00000000  00000000  00035fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  00038ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a661  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012997  00000000  00000000  00065889  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106eb3  00000000  00000000  00078220  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017f0d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  0017f150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005f24 	.word	0x08005f24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005f24 	.word	0x08005f24

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x78>)
 80005f6:	4a1d      	ldr	r2, [pc, #116]	; (800066c <MX_ETH_Init+0x7c>)
 80005f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_ETH_Init+0x78>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_ETH_Init+0x78>)
 8000602:	2200      	movs	r2, #0
 8000604:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_ETH_Init+0x78>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_ETH_Init+0x78>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_ETH_Init+0x78>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	3302      	adds	r3, #2
 800061e:	22e1      	movs	r2, #225	; 0xe1
 8000620:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x78>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	3303      	adds	r3, #3
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x78>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	3304      	adds	r3, #4
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_ETH_Init+0x78>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	3305      	adds	r3, #5
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_ETH_Init+0x78>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_ETH_Init+0x78>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_ETH_Init+0x78>)
 800064e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000652:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_ETH_Init+0x78>)
 8000656:	f001 f977 	bl	8001948 <HAL_ETH_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000660:	f000 fc8c 	bl	8000f7c <Error_Handler>
  }

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000b4 	.word	0x200000b4
 800066c:	40028000 	.word	0x40028000

08000670 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a4e      	ldr	r2, [pc, #312]	; (80007c8 <HAL_ETH_MspInit+0x158>)
 800068e:	4293      	cmp	r3, r2
 8000690:	f040 8096 	bne.w	80007c0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000694:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a4c      	ldr	r2, [pc, #304]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 800069a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a8:	623b      	str	r3, [r7, #32]
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	4b47      	ldr	r3, [pc, #284]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a46      	ldr	r2, [pc, #280]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006c0:	61fb      	str	r3, [r7, #28]
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	4b41      	ldr	r3, [pc, #260]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a40      	ldr	r2, [pc, #256]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006dc:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a3a      	ldr	r2, [pc, #232]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
 80006e8:	4b38      	ldr	r3, [pc, #224]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b35      	ldr	r3, [pc, #212]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4a34      	ldr	r2, [pc, #208]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a2e      	ldr	r2, [pc, #184]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	481e      	ldr	r0, [pc, #120]	; (80007d0 <HAL_ETH_MspInit+0x160>)
 8000758:	f001 fd62 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075c:	2386      	movs	r3, #134	; 0x86
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <HAL_ETH_MspInit+0x164>)
 8000778:	f001 fd52 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <HAL_ETH_MspInit+0x168>)
 800079a:	f001 fd41 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800079e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <HAL_ETH_MspInit+0x16c>)
 80007bc:	f001 fd30 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3738      	adds	r7, #56	; 0x38
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40028000 	.word	0x40028000
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40021800 	.word	0x40021800

080007e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b8d      	ldr	r3, [pc, #564]	; (8000a2c <MX_GPIO_Init+0x24c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a8c      	ldr	r2, [pc, #560]	; (8000a2c <MX_GPIO_Init+0x24c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b8a      	ldr	r3, [pc, #552]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b87      	ldr	r3, [pc, #540]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a86      	ldr	r2, [pc, #536]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b84      	ldr	r3, [pc, #528]	; (8000a2c <MX_GPIO_Init+0x24c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b81      	ldr	r3, [pc, #516]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a80      	ldr	r2, [pc, #512]	; (8000a2c <MX_GPIO_Init+0x24c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b7e      	ldr	r3, [pc, #504]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b7b      	ldr	r3, [pc, #492]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a7a      	ldr	r2, [pc, #488]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b78      	ldr	r3, [pc, #480]	; (8000a2c <MX_GPIO_Init+0x24c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000856:	4b75      	ldr	r3, [pc, #468]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a74      	ldr	r2, [pc, #464]	; (8000a2c <MX_GPIO_Init+0x24c>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b72      	ldr	r3, [pc, #456]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b6f      	ldr	r3, [pc, #444]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a6e      	ldr	r2, [pc, #440]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b6c      	ldr	r3, [pc, #432]	; (8000a2c <MX_GPIO_Init+0x24c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b69      	ldr	r3, [pc, #420]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a68      	ldr	r2, [pc, #416]	; (8000a2c <MX_GPIO_Init+0x24c>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b66      	ldr	r3, [pc, #408]	; (8000a2c <MX_GPIO_Init+0x24c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b63      	ldr	r3, [pc, #396]	; (8000a2c <MX_GPIO_Init+0x24c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <MX_GPIO_Init+0x24c>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <MX_GPIO_Init+0x24c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008bc:	485c      	ldr	r0, [pc, #368]	; (8000a30 <MX_GPIO_Init+0x250>)
 80008be:	f001 fe59 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008c8:	485a      	ldr	r0, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x254>)
 80008ca:	f001 fe53 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d4:	4858      	ldr	r0, [pc, #352]	; (8000a38 <MX_GPIO_Init+0x258>)
 80008d6:	f001 fe4d 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TRIG_HC_SR04_Pin|COL1_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80008e0:	4856      	ldr	r0, [pc, #344]	; (8000a3c <MX_GPIO_Init+0x25c>)
 80008e2:	f001 fe47 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	4855      	ldr	r0, [pc, #340]	; (8000a40 <MX_GPIO_Init+0x260>)
 80008ec:	f001 fe42 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_booton_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <MX_GPIO_Init+0x264>)
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_booton_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4850      	ldr	r0, [pc, #320]	; (8000a48 <MX_GPIO_Init+0x268>)
 8000906:	f001 fc8b 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800090a:	f244 0381 	movw	r3, #16513	; 0x4081
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4843      	ldr	r0, [pc, #268]	; (8000a30 <MX_GPIO_Init+0x250>)
 8000924:	f001 fc7c 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = COL2_Pin|COL3_Pin;
 8000928:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	483c      	ldr	r0, [pc, #240]	; (8000a34 <MX_GPIO_Init+0x254>)
 8000942:	f001 fc6d 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW2_Pin;
 8000946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x264>)
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000950:	2302      	movs	r3, #2
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ROW2_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4836      	ldr	r0, [pc, #216]	; (8000a34 <MX_GPIO_Init+0x254>)
 800095c:	f001 fc60 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	482f      	ldr	r0, [pc, #188]	; (8000a38 <MX_GPIO_Init+0x258>)
 800097a:	f001 fc51 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 800097e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_GPIO_Init+0x264>)
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000988:	2302      	movs	r3, #2
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x258>)
 8000994:	f001 fc44 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TRIG_HC_SR04_Pin|COL1_Pin;
 8000998:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4822      	ldr	r0, [pc, #136]	; (8000a3c <MX_GPIO_Init+0x25c>)
 80009b2:	f001 fc35 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x260>)
 80009ce:	f001 fc27 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_GPIO_Init+0x260>)
 80009e6:	f001 fc1b 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin;
 80009ea:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_GPIO_Init+0x264>)
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <MX_GPIO_Init+0x260>)
 8000a00:	f001 fc0e 	bl	8002220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2017      	movs	r0, #23
 8000a0a:	f000 ff66 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a0e:	2017      	movs	r0, #23
 8000a10:	f000 ff7f 	bl	8001912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2028      	movs	r0, #40	; 0x28
 8000a1a:	f000 ff5e 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a1e:	2028      	movs	r0, #40	; 0x28
 8000a20:	f000 ff77 	bl	8001912 <HAL_NVIC_EnableIRQ>

}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	; 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021400 	.word	0x40021400
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021800 	.word	0x40021800
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40020800 	.word	0x40020800

08000a4c <next_col>:
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
	HAL_TIM_Base_Start_IT(&htim6);
}

void next_col(TipoTeclado *p_keypad){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	if (p_keypad->columna_actual == COL_1) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d110      	bne.n	8000a7e <next_col+0x32>
		HAL_GPIO_TogglePin(COL1_GPIO_Port, COL1_Pin);
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	4828      	ldr	r0, [pc, #160]	; (8000b04 <next_col+0xb8>)
 8000a62:	f001 fda0 	bl	80025a6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL2_GPIO_Port, COL2_Pin);
 8000a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6a:	4827      	ldr	r0, [pc, #156]	; (8000b08 <next_col+0xbc>)
 8000a6c:	f001 fd9b 	bl	80025a6 <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_2;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_2;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
		HAL_GPIO_TogglePin(COL4_GPIO_Port, COL4_Pin);
		HAL_GPIO_TogglePin(COL1_GPIO_Port, COL1_Pin);
		p_keypad->columna_actual = COL_1;
		p_keypad->teclaPulsada.col = COL_1;
	}
}
 8000a7c:	e03d      	b.n	8000afa <next_col+0xae>
	} else if (p_keypad->columna_actual == COL_2){
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d110      	bne.n	8000aa8 <next_col+0x5c>
		HAL_GPIO_TogglePin(COL2_GPIO_Port, COL2_Pin);
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	481f      	ldr	r0, [pc, #124]	; (8000b08 <next_col+0xbc>)
 8000a8c:	f001 fd8b 	bl	80025a6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL3_GPIO_Port, COL3_Pin);
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	481c      	ldr	r0, [pc, #112]	; (8000b08 <next_col+0xbc>)
 8000a96:	f001 fd86 	bl	80025a6 <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_3;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_3;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	605a      	str	r2, [r3, #4]
}
 8000aa6:	e028      	b.n	8000afa <next_col+0xae>
	}else if (p_keypad->columna_actual == COL_3){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d110      	bne.n	8000ad2 <next_col+0x86>
		HAL_GPIO_TogglePin(COL3_GPIO_Port, COL3_Pin);
 8000ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <next_col+0xbc>)
 8000ab6:	f001 fd76 	bl	80025a6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL4_GPIO_Port, COL4_Pin);
 8000aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abe:	4813      	ldr	r0, [pc, #76]	; (8000b0c <next_col+0xc0>)
 8000ac0:	f001 fd71 	bl	80025a6 <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_4;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_4;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2203      	movs	r2, #3
 8000ace:	605a      	str	r2, [r3, #4]
}
 8000ad0:	e013      	b.n	8000afa <next_col+0xae>
	}else if (p_keypad->columna_actual == COL_4){
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d10f      	bne.n	8000afa <next_col+0xae>
		HAL_GPIO_TogglePin(COL4_GPIO_Port, COL4_Pin);
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <next_col+0xc0>)
 8000ae0:	f001 fd61 	bl	80025a6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL1_GPIO_Port, COL1_Pin);
 8000ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <next_col+0xb8>)
 8000aea:	f001 fd5c 	bl	80025a6 <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_1;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021400 	.word	0x40021400
 8000b0c:	40021000 	.word	0x40021000

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f000 fd86 	bl	8001626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f87b 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f7ff fe5f 	bl	80007e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b22:	f7ff fd65 	bl	80005f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b26:	f000 fc57 	bl	80013d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b2a:	f000 fcc9 	bl	80014c0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000b2e:	f000 fb59 	bl	80011e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000b32:	f000 fb8d 	bl	8001250 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000b36:	f000 fb01 	bl	800113c <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captureDone != 0) {
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <main+0xe0>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d03f      	beq.n	8000bc4 <main+0xb4>
		  captureDone = 0;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <main+0xe0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
		  frequency = 108* pow(10,6)/ (htim3.Instance->PSC + 1);
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <main+0xe4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	3301      	adds	r3, #1
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000b5a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000bd8 <main+0xc8>
 8000b5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <main+0xe8>)
 8000b64:	ed83 7b00 	vstr	d7, [r3]
		  frequency = (float) frequency / diffCapture;
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <main+0xe8>)
 8000b6a:	ed93 7b00 	vldr	d7, [r3]
 8000b6e:	eef7 6bc7 	vcvt.f32.f64	s13, d7
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <main+0xec>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	ee07 3a90 	vmov	s15, r3
 8000b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <main+0xe8>)
 8000b88:	ed83 7b00 	vstr	d7, [r3]
		  distanciacm = ((1/frequency) * pow(10,6))/58;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <main+0xe8>)
 8000b8e:	ed93 6b00 	vldr	d6, [r3]
 8000b92:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000b96:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b9a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000be0 <main+0xd0>
 8000b9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ba2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8000be8 <main+0xd8>
 8000ba6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <main+0xf0>)
 8000bac:	ed83 7b00 	vstr	d7, [r3]
		  sprintf(str_name, "%s\t%f","Distancia en cm =",distanciacm);
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <main+0xf0>)
 8000bb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bb6:	e9cd 3400 	strd	r3, r4, [sp]
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <main+0xf4>)
 8000bbc:	4912      	ldr	r1, [pc, #72]	; (8000c08 <main+0xf8>)
 8000bbe:	4813      	ldr	r0, [pc, #76]	; (8000c0c <main+0xfc>)
 8000bc0:	f004 fe62 	bl	8005888 <siprintf>
//			  HAL_TIM_Base_Start_IT(&htim7);
//			  HAL_GPIO_WritePin(TRIG_HC_SR04_GPIO_Port, TRIG_HC_SR04_Pin, GPIO_PIN_SET);
//		  }
//		  reset_key_press(&teclado);
//	  }
	  if (FLAG_ENVIO == true){
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <main+0x100>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0b6      	beq.n	8000b3a <main+0x2a>
		  enviar();
 8000bcc:	f000 f8b8 	bl	8000d40 <enviar>
		  FLAG_ENVIO = false;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <main+0x100>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	  if (captureDone != 0) {
 8000bd6:	e7b0      	b.n	8000b3a <main+0x2a>
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	4199bfcc 	.word	0x4199bfcc
 8000be0:	00000000 	.word	0x00000000
 8000be4:	412e8480 	.word	0x412e8480
 8000be8:	00000000 	.word	0x00000000
 8000bec:	404d0000 	.word	0x404d0000
 8000bf0:	20000094 	.word	0x20000094
 8000bf4:	20000174 	.word	0x20000174
 8000bf8:	20000098 	.word	0x20000098
 8000bfc:	20000092 	.word	0x20000092
 8000c00:	200000a0 	.word	0x200000a0
 8000c04:	08005f3c 	.word	0x08005f3c
 8000c08:	08005f50 	.word	0x08005f50
 8000c0c:	20000110 	.word	0x20000110
 8000c10:	20000090 	.word	0x20000090

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0b8      	sub	sp, #224	; 0xe0
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c1e:	2234      	movs	r2, #52	; 0x34
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fd70 	bl	8005708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2290      	movs	r2, #144	; 0x90
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 fd61 	bl	8005708 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c46:	f001 fe29 	bl	800289c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <SystemClock_Config+0x120>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a39      	ldr	r2, [pc, #228]	; (8000d34 <SystemClock_Config+0x120>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <SystemClock_Config+0x120>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <SystemClock_Config+0x124>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <SystemClock_Config+0x124>)
 8000c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <SystemClock_Config+0x124>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c96:	2304      	movs	r3, #4
 8000c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c9c:	23d8      	movs	r3, #216	; 0xd8
 8000c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ca8:	2309      	movs	r3, #9
 8000caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fe52 	bl	800295c <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cbe:	f000 f95d 	bl	8000f7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cc2:	f001 fdfb 	bl	80028bc <HAL_PWREx_EnableOverDrive>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ccc:	f000 f956 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cf2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cf6:	2107      	movs	r1, #7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f8dd 	bl	8002eb8 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d04:	f000 f93a 	bl	8000f7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SystemClock_Config+0x128>)
 8000d0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fac4 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000d26:	f000 f929 	bl	8000f7c <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	37e0      	adds	r7, #224	; 0xe0
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000
 8000d3c:	00200100 	.word	0x00200100

08000d40 <enviar>:

/* USER CODE BEGIN 4 */
void enviar(){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0


	sprintf(str_name, "%s#", str_name);
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <enviar+0x28>)
 8000d46:	4909      	ldr	r1, [pc, #36]	; (8000d6c <enviar+0x2c>)
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <enviar+0x28>)
 8000d4a:	f004 fd9d 	bl	8005888 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) str_name, strlen(str_name),
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <enviar+0x28>)
 8000d50:	f7ff fa76 	bl	8000240 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	4902      	ldr	r1, [pc, #8]	; (8000d68 <enviar+0x28>)
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <enviar+0x30>)
 8000d60:	f003 fd5a 	bl	8004818 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000110 	.word	0x20000110
 8000d6c:	08005f58 	.word	0x08005f58
 8000d70:	20000234 	.word	0x20000234

08000d74 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == User_booton_Pin){
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d84:	d109      	bne.n	8000d9a <HAL_GPIO_EXTI_Callback+0x26>
		 HAL_TIM_Base_Start_IT(&htim7);
 8000d86:	4816      	ldr	r0, [pc, #88]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d88:	f002 fee0 	bl	8003b4c <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(TRIG_HC_SR04_GPIO_Port, TRIG_HC_SR04_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d92:	4814      	ldr	r0, [pc, #80]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d94:	f001 fbee 	bl	8002574 <HAL_GPIO_WritePin>

	}else if(GPIO_Pin == ROW4_Pin){
		teclado.teclaPulsada.row = ROW_4;

	}
}
 8000d98:	e01e      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x64>
	}else if(GPIO_Pin == ROW1_Pin){
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da0:	d103      	bne.n	8000daa <HAL_GPIO_EXTI_Callback+0x36>
		teclado.teclaPulsada.row = ROW_1;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
}
 8000da8:	e016      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x64>
	}else if(GPIO_Pin == ROW2_Pin){
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db0:	d103      	bne.n	8000dba <HAL_GPIO_EXTI_Callback+0x46>
		teclado.teclaPulsada.row = ROW_2;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	609a      	str	r2, [r3, #8]
}
 8000db8:	e00e      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x64>
	}else if(GPIO_Pin == ROW3_Pin){
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dc0:	d103      	bne.n	8000dca <HAL_GPIO_EXTI_Callback+0x56>
		teclado.teclaPulsada.row = ROW_3;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	609a      	str	r2, [r3, #8]
}
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x64>
	}else if(GPIO_Pin == ROW4_Pin){
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dd0:	d102      	bne.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x64>
		teclado.teclaPulsada.row = ROW_4;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	609a      	str	r2, [r3, #8]
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001f4 	.word	0x200001f4
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	200000fc 	.word	0x200000fc

08000dec <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7f1b      	ldrb	r3, [r3, #28]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d14b      	bne.n	8000e94 <HAL_TIM_IC_CaptureCallback+0xa8>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10a      	bne.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			captures[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e04:	2100      	movs	r1, #0
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f003 f9ba 	bl	8004180 <HAL_TIM_ReadCapturedValue>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e10:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge, only if don't have both capture
			//__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);

		}
	}
}
 8000e18:	e03c      	b.n	8000e94 <HAL_TIM_IC_CaptureCallback+0xa8>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d138      	bne.n	8000e94 <HAL_TIM_IC_CaptureCallback+0xa8>
			captures[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e22:	2100      	movs	r1, #0
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f003 f9ab 	bl	8004180 <HAL_TIM_ReadCapturedValue>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e2e:	605a      	str	r2, [r3, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
			if (captures[1] > captures[0])
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d90a      	bls.n	8000e5a <HAL_TIM_IC_CaptureCallback+0x6e>
				diffCapture = captures[1]-captures[0];
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	e00f      	b.n	8000e7a <HAL_TIM_IC_CaptureCallback+0x8e>
				diffCapture = (htim3.Instance->ARR - captures[0]) + captures[1];
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4413      	add	r3, r2
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000e78:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e80:	2100      	movs	r1, #0
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000e84:	f002 ff50 	bl	8003d28 <HAL_TIM_IC_Stop_IT>
			captureDone = 1;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
			FLAG_ENVIO = true;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000091 	.word	0x20000091
 8000ea0:	20000108 	.word	0x20000108
 8000ea4:	20000092 	.word	0x20000092
 8000ea8:	20000174 	.word	0x20000174
 8000eac:	20000094 	.word	0x20000094
 8000eb0:	20000090 	.word	0x20000090

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

	if (htim->Instance==TIM6) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d133      	bne.n	8000f2e <HAL_TIM_PeriodElapsedCallback+0x7a>
		cuenta++;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ece:	6013      	str	r3, [r2, #0]
		if (cuenta == 40) {
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b28      	cmp	r3, #40	; 0x28
 8000ed6:	d109      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x38>
			 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ed8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ede:	f001 fb62 	bl	80025a6 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	481f      	ldr	r0, [pc, #124]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ee6:	f001 fb5e 	bl	80025a6 <HAL_GPIO_TogglePin>
 8000eea:	e01c      	b.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x72>
		} else if (cuenta == 80) {
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b50      	cmp	r3, #80	; 0x50
 8000ef2:	d108      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x52>
			 HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	481b      	ldr	r0, [pc, #108]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ef8:	f001 fb55 	bl	80025a6 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4819      	ldr	r0, [pc, #100]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f00:	f001 fb51 	bl	80025a6 <HAL_GPIO_TogglePin>
 8000f04:	e00f      	b.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x72>

		} else if(cuenta == 120){
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b78      	cmp	r3, #120	; 0x78
 8000f0c:	d10b      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x72>
			 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f12:	f001 fb48 	bl	80025a6 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f1c:	f001 fb43 	bl	80025a6 <HAL_GPIO_TogglePin>
			cuenta = 0;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]

		}
		next_col(&teclado);
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f28:	f7ff fd90 	bl	8000a4c <next_col>
		  HAL_GPIO_WritePin(TRIG_HC_SR04_GPIO_Port, TRIG_HC_SR04_Pin, GPIO_PIN_RESET);
		  HAL_TIM_Base_Stop_IT(&htim7);
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
	}

}
 8000f2c:	e011      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x9e>
	}else if (htim->Instance==TIM7){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d10c      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  HAL_GPIO_WritePin(TRIG_HC_SR04_GPIO_Port, TRIG_HC_SR04_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f40:	f001 fb18 	bl	8002574 <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Stop_IT(&htim7);
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f46:	f002 fe2b 	bl	8003ba0 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480a      	ldr	r0, [pc, #40]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f4e:	f002 fe7d 	bl	8003c4c <HAL_TIM_IC_Start_IT>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40001000 	.word	0x40001000
 8000f60:	2000008c 	.word	0x2000008c
 8000f64:	40020400 	.word	0x40020400
 8000f68:	200000fc 	.word	0x200000fc
 8000f6c:	40001400 	.word	0x40001400
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	200001f4 	.word	0x200001f4
 8000f78:	20000174 	.word	0x20000174

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 fb3a 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001034:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001038:	f001 fad0 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM3_IRQHandler+0x10>)
 8001046:	f002 fedf 	bl	8003e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000174 	.word	0x20000174

08001054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001058:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800105c:	f001 fabe 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001060:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001064:	f001 faba 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800106c:	f001 fab6 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001070:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001074:	f001 fab2 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM6_DAC_IRQHandler+0x10>)
 8001082:	f002 fec1 	bl	8003e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001b4 	.word	0x200001b4

08001090 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM7_IRQHandler+0x10>)
 8001096:	f002 feb7 	bl	8003e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001f4 	.word	0x200001f4

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f004 faee 	bl	80056b4 <__errno>
 80010d8:	4602      	mov	r2, r0
 80010da:	230c      	movs	r3, #12
 80010dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20080000 	.word	0x20080000
 8001104:	00000400 	.word	0x00000400
 8001108:	200000a8 	.word	0x200000a8
 800110c:	200006c0 	.word	0x200006c0

08001110 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <SystemInit+0x28>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <SystemInit+0x28>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SystemInit+0x28>)
 8001126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800112a:	609a      	str	r2, [r3, #8]
#endif
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_TIM3_Init+0xa0>)
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <MX_TIM3_Init+0xa4>)
 800115e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 58;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_TIM3_Init+0xa0>)
 8001162:	223a      	movs	r2, #58	; 0x3a
 8001164:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM3_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM3_Init+0xa0>)
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_TIM3_Init+0xa0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM3_Init+0xa0>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001180:	4816      	ldr	r0, [pc, #88]	; (80011dc <MX_TIM3_Init+0xa0>)
 8001182:	f002 fd38 	bl	8003bf6 <HAL_TIM_IC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800118c:	f7ff fef6 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <MX_TIM3_Init+0xa0>)
 80011a0:	f003 fa40 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80011aa:	f7ff fee7 	bl	8000f7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011ae:	230a      	movs	r3, #10
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_TIM3_Init+0xa0>)
 80011c6:	f002 ff3e 	bl	8004046 <HAL_TIM_IC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80011d0:	f7ff fed4 	bl	8000f7c <Error_Handler>
  }

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000174 	.word	0x20000174
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_TIM6_Init+0x64>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <MX_TIM6_Init+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_TIM6_Init+0x64>)
 80011fc:	2228      	movs	r2, #40	; 0x28
 80011fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_TIM6_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_TIM6_Init+0x64>)
 8001208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_TIM6_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_TIM6_Init+0x64>)
 8001216:	f002 fc6d 	bl	8003af4 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001220:	f7ff feac 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_TIM6_Init+0x64>)
 8001232:	f003 f9f7 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800123c:	f7ff fe9e 	bl	8000f7c <Error_Handler>
  }

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001b4 	.word	0x200001b4
 800124c:	40001000 	.word	0x40001000

08001250 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <MX_TIM7_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 539;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001268:	f240 221b 	movw	r2, #539	; 0x21b
 800126c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001276:	2201      	movs	r2, #1
 8001278:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_TIM7_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001282:	f002 fc37 	bl	8003af4 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800128c:	f7ff fe76 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM7_Init+0x64>)
 800129e:	f003 f9c1 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012a8:	f7ff fe68 	bl	8000f7c <Error_Handler>
  }

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001f4 	.word	0x200001f4
 80012b8:	40001400 	.word	0x40001400

080012bc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_TIM_IC_MspInit+0x8c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12f      	bne.n	800133e <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_TIM_IC_MspInit+0x90>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <HAL_TIM_IC_MspInit+0x90>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_TIM_IC_MspInit+0x90>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_TIM_IC_MspInit+0x90>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <HAL_TIM_IC_MspInit+0x90>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_TIM_IC_MspInit+0x90>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800130e:	2340      	movs	r3, #64	; 0x40
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800131e:	2302      	movs	r3, #2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <HAL_TIM_IC_MspInit+0x94>)
 800132a:	f000 ff79 	bl	8002220 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	201d      	movs	r0, #29
 8001334:	f000 fad1 	bl	80018da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001338:	201d      	movs	r0, #29
 800133a:	f000 faea 	bl	8001912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40000400 	.word	0x40000400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_TIM_Base_MspInit+0x78>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d114      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_TIM_Base_MspInit+0x7c>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2036      	movs	r0, #54	; 0x36
 8001384:	f000 faa9 	bl	80018da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001388:	2036      	movs	r0, #54	; 0x36
 800138a:	f000 fac2 	bl	8001912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800138e:	e018      	b.n	80013c2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_TIM_Base_MspInit+0x80>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d113      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_TIM_Base_MspInit+0x7c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_TIM_Base_MspInit+0x7c>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_TIM_Base_MspInit+0x7c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2037      	movs	r0, #55	; 0x37
 80013b8:	f000 fa8f 	bl	80018da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013bc:	2037      	movs	r0, #55	; 0x37
 80013be:	f000 faa8 	bl	8001912 <HAL_NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40001000 	.word	0x40001000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40001400 	.word	0x40001400

080013d8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_USART3_UART_Init+0x5c>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART3_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART3_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART3_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART3_UART_Init+0x58>)
 800141c:	f003 f9ae 	bl	800477c <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001426:	f7ff fda9 	bl	8000f7c <Error_Handler>
  }

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000234 	.word	0x20000234
 8001434:	40004800 	.word	0x40004800

08001438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_UART_MspInit+0x7c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d128      	bne.n	80014ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0x80>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_UART_MspInit+0x80>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_UART_MspInit+0x80>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_UART_MspInit+0x80>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_UART_MspInit+0x80>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_UART_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800148a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149c:	2307      	movs	r3, #7
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_UART_MspInit+0x84>)
 80014a8:	f000 feba 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004800 	.word	0x40004800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2206      	movs	r2, #6
 80014d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001504:	f001 f882 	bl	800260c <HAL_PCD_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800150e:	f7ff fd35 	bl	8000f7c <Error_Handler>
  }

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002b4 	.word	0x200002b4

0800151c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153c:	d141      	bne.n	80015c2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001556:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001568:	230a      	movs	r3, #10
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4817      	ldr	r0, [pc, #92]	; (80015d0 <HAL_PCD_MspInit+0xb4>)
 8001574:	f000 fe54 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4810      	ldr	r0, [pc, #64]	; (80015d0 <HAL_PCD_MspInit+0xb4>)
 800158e:	f000 fe47 	bl	8002220 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	6353      	str	r3, [r2, #52]	; 0x34
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_PCD_MspInit+0xb0>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015da:	e003      	b.n	80015e4 <LoopCopyDataInit>

080015dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015e2:	3104      	adds	r1, #4

080015e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015ec:	d3f6      	bcc.n	80015dc <CopyDataInit>
  ldr  r2, =_sbss
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015f0:	e002      	b.n	80015f8 <LoopFillZerobss>

080015f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015f4:	f842 3b04 	str.w	r3, [r2], #4

080015f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015fc:	d3f9      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fe:	f7ff fd87 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001602:	f004 f85d 	bl	80056c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001606:	f7ff fa83 	bl	8000b10 <main>
  bx  lr    
 800160a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001610:	08005fb8 	.word	0x08005fb8
  ldr  r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001618:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800161c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001620:	200006c0 	.word	0x200006c0

08001624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC_IRQHandler>

08001626 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162a:	2003      	movs	r0, #3
 800162c:	f000 f94a 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f805 	bl	8001640 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001636:	f7ff fca9 	bl	8000f8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f965 	bl	800192e <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f92d 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000
 8001698:	20000008 	.word	0x20000008
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008
 80016c4:	200006b8 	.word	0x200006b8

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200006b8 	.word	0x200006b8

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_Delay+0x40>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000008 	.word	0x20000008

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	05fa0000 	.word	0x05fa0000

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff29 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff3e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa2 	bl	8001880 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001958:	4ba9      	ldr	r3, [pc, #676]	; (8001c00 <HAL_ETH_Init+0x2b8>)
 800195a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e183      	b.n	8001c76 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fe74 	bl	8000670 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <HAL_ETH_Init+0x2bc>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	4a9d      	ldr	r2, [pc, #628]	; (8001c04 <HAL_ETH_Init+0x2bc>)
 800198e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001992:	6453      	str	r3, [r2, #68]	; 0x44
 8001994:	4b9b      	ldr	r3, [pc, #620]	; (8001c04 <HAL_ETH_Init+0x2bc>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019a0:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <HAL_ETH_Init+0x2c0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a98      	ldr	r2, [pc, #608]	; (8001c08 <HAL_ETH_Init+0x2c0>)
 80019a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019aa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019ac:	4b96      	ldr	r3, [pc, #600]	; (8001c08 <HAL_ETH_Init+0x2c0>)
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4994      	ldr	r1, [pc, #592]	; (8001c08 <HAL_ETH_Init+0x2c0>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019d2:	f7ff fe79 	bl	80016c8 <HAL_GetTick>
 80019d6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019d8:	e011      	b.n	80019fe <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80019da:	f7ff fe75 	bl	80016c8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019e8:	d909      	bls.n	80019fe <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e13b      	b.n	8001c76 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e4      	bne.n	80019da <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f023 031c 	bic.w	r3, r3, #28
 8001a1e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a20:	f001 fc0e 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8001a24:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4a78      	ldr	r2, [pc, #480]	; (8001c0c <HAL_ETH_Init+0x2c4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d908      	bls.n	8001a40 <HAL_ETH_Init+0xf8>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_ETH_Init+0x2c8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d804      	bhi.n	8001a40 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e027      	b.n	8001a90 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	4a73      	ldr	r2, [pc, #460]	; (8001c10 <HAL_ETH_Init+0x2c8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d908      	bls.n	8001a5a <HAL_ETH_Init+0x112>
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	4a72      	ldr	r2, [pc, #456]	; (8001c14 <HAL_ETH_Init+0x2cc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d804      	bhi.n	8001a5a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f043 030c 	orr.w	r3, r3, #12
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e01a      	b.n	8001a90 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <HAL_ETH_Init+0x2cc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d903      	bls.n	8001a6a <HAL_ETH_Init+0x122>
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4a6c      	ldr	r2, [pc, #432]	; (8001c18 <HAL_ETH_Init+0x2d0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d911      	bls.n	8001a8e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_ETH_Init+0x2d0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d908      	bls.n	8001a84 <HAL_ETH_Init+0x13c>
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4a69      	ldr	r2, [pc, #420]	; (8001c1c <HAL_ETH_Init+0x2d4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d804      	bhi.n	8001a84 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e005      	b.n	8001a90 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	e000      	b.n	8001a90 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a8e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f956 	bl	8001d50 <HAL_ETH_WritePHYRegister>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001aae:	6939      	ldr	r1, [r7, #16]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f9b3 	bl	8001e1c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0d9      	b.n	8001c76 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ac2:	20ff      	movs	r0, #255	; 0xff
 8001ac4:	f7ff fe0c 	bl	80016e0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a7 	beq.w	8001c20 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fdf9 	bl	80016c8 <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	461a      	mov	r2, r3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8cd 	bl	8001c80 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001ae6:	f7ff fdef 	bl	80016c8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d90f      	bls.n	8001b18 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001afc:	6939      	ldr	r1, [r7, #16]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f98c 	bl	8001e1c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0ae      	b.n	8001c76 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0da      	beq.n	8001ad8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b26:	2100      	movs	r1, #0
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f911 	bl	8001d50 <HAL_ETH_WritePHYRegister>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b38:	6939      	ldr	r1, [r7, #16]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f96e 	bl	8001e1c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e094      	b.n	8001c76 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff fdbc 	bl	80016c8 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	461a      	mov	r2, r3
 8001b58:	2101      	movs	r1, #1
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f890 	bl	8001c80 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b60:	f7ff fdb2 	bl	80016c8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d90f      	bls.n	8001b92 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b76:	6939      	ldr	r1, [r7, #16]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f94f 	bl	8001e1c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e071      	b.n	8001c76 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0da      	beq.n	8001b52 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	211f      	movs	r1, #31
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f86b 	bl	8001c80 <HAL_ETH_ReadPHYRegister>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f930 	bl	8001e1c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e056      	b.n	8001c76 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	e002      	b.n	8001be2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	e037      	b.n	8001c64 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e032      	b.n	8001c64 <HAL_ETH_Init+0x31c>
 8001bfe:	bf00      	nop
 8001c00:	03938700 	.word	0x03938700
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	01312cff 	.word	0x01312cff
 8001c10:	02160ebf 	.word	0x02160ebf
 8001c14:	039386ff 	.word	0x039386ff
 8001c18:	05f5e0ff 	.word	0x05f5e0ff
 8001c1c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f889 	bl	8001d50 <HAL_ETH_WritePHYRegister>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00b      	beq.n	8001c5c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c48:	6939      	ldr	r1, [r7, #16]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8e6 	bl	8001e1c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00c      	b.n	8001c76 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c5c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c60:	f7ff fd3e 	bl	80016e0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c64:	6939      	ldr	r1, [r7, #16]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8d8 	bl	8001e1c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop

08001c80 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b82      	cmp	r3, #130	; 0x82
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e050      	b.n	8001d48 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2282      	movs	r2, #130	; 0x82
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 031c 	and.w	r3, r3, #28
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8a1b      	ldrh	r3, [r3, #16]
 8001cc2:	02db      	lsls	r3, r3, #11
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	019b      	lsls	r3, r3, #6
 8001cd0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f023 0302 	bic.w	r3, r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf2:	f7ff fce9 	bl	80016c8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cf8:	e015      	b.n	8001d26 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cfa:	f7ff fce5 	bl	80016c8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d309      	bcc.n	8001d1e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e014      	b.n	8001d48 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e4      	bne.n	8001cfa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b42      	cmp	r3, #66	; 0x42
 8001d70:	d101      	bne.n	8001d76 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	e04e      	b.n	8001e14 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2242      	movs	r2, #66	; 0x42
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 031c 	and.w	r3, r3, #28
 8001d8c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8a1b      	ldrh	r3, [r3, #16]
 8001d92:	02db      	lsls	r3, r3, #11
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d9c:	897b      	ldrh	r3, [r7, #10]
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dcc:	f7ff fc7c 	bl	80016c8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd2:	e015      	b.n	8001e00 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001dd4:	f7ff fc78 	bl	80016c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de2:	d309      	bcc.n	8001df8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e00d      	b.n	8001e14 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1e4      	bne.n	8001dd4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0b0      	sub	sp, #192	; 0xc0
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e40:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e66:	663b      	str	r3, [r7, #96]	; 0x60
 8001e68:	e001      	b.n	8001e6e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e72:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ef0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef4:	4bab      	ldr	r3, [pc, #684]	; (80021a4 <ETH_MACDMAConfig+0x388>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f00:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f04:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f08:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f0e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f12:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f16:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f1c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f20:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f24:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f28:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f2c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f30:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff fbc5 	bl	80016e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f5e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f64:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f68:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f6e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f74:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f7a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f80:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f8c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f8e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff fba0 	bl	80016e0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fb2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fbc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fcc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fda:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fe0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001fe6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001fec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ff2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ff8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ffa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fb61 	bl	80016e0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002026:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002028:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800202c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff fb4c 	bl	80016e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002050:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002076:	2304      	movs	r3, #4
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800208c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002096:	2300      	movs	r3, #0
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800209a:	2300      	movs	r3, #0
 800209c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80020a6:	4413      	add	r3, r2
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80020ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <ETH_MACDMAConfig+0x38c>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020ba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020bc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020be:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020c0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020c2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020c4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020c6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020c8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020ca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020cc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020ce:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020d0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020d2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020d6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020da:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80020ee:	4413      	add	r3, r2
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80020fe:	4413      	add	r3, r2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002106:	2001      	movs	r0, #1
 8002108:	f7ff faea 	bl	80016e0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f241 0318 	movw	r3, #4120	; 0x1018
 8002114:	4413      	add	r3, r2
 8002116:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800211a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002120:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002124:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002128:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800212c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800212e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002130:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002132:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002136:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff fac3 	bl	80016e0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002166:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10d      	bne.n	800218c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	f241 031c 	movw	r3, #4124	; 0x101c
 8002178:	4413      	add	r3, r2
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6811      	ldr	r1, [r2, #0]
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <ETH_MACDMAConfig+0x390>)
 8002182:	431a      	orrs	r2, r3
 8002184:	f241 031c 	movw	r3, #4124	; 0x101c
 8002188:	440b      	add	r3, r1
 800218a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	461a      	mov	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f80b 	bl	80021b0 <ETH_MACAddressConfig>
}
 800219a:	bf00      	nop
 800219c:	37c0      	adds	r7, #192	; 0xc0
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	ff20810f 	.word	0xff20810f
 80021a8:	f8de3f23 	.word	0xf8de3f23
 80021ac:	00010040 	.word	0x00010040

080021b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3305      	adds	r3, #5
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	3204      	adds	r2, #4
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <ETH_MACAddressConfig+0x68>)
 80021d2:	4413      	add	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3303      	adds	r3, #3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	061a      	lsls	r2, r3, #24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3302      	adds	r3, #2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <ETH_MACAddressConfig+0x6c>)
 8002202:	4413      	add	r3, r2
 8002204:	461a      	mov	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40028040 	.word	0x40028040
 800221c:	40028044 	.word	0x40028044

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e175      	b.n	800252c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8164 	bne.w	8002526 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00b      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002272:	2b11      	cmp	r3, #17
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b12      	cmp	r3, #18
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x100>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b12      	cmp	r3, #18
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80be 	beq.w	8002526 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_GPIO_Init+0x320>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a64      	ldr	r2, [pc, #400]	; (8002540 <HAL_GPIO_Init+0x320>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_GPIO_Init+0x320>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023c2:	4a60      	ldr	r2, [pc, #384]	; (8002544 <HAL_GPIO_Init+0x324>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d037      	beq.n	800245e <HAL_GPIO_Init+0x23e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d031      	beq.n	800245a <HAL_GPIO_Init+0x23a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a55      	ldr	r2, [pc, #340]	; (8002550 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d02b      	beq.n	8002456 <HAL_GPIO_Init+0x236>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a54      	ldr	r2, [pc, #336]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d025      	beq.n	8002452 <HAL_GPIO_Init+0x232>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_GPIO_Init+0x338>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_GPIO_Init+0x22e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_GPIO_Init+0x33c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x22a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_GPIO_Init+0x340>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x226>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a50      	ldr	r2, [pc, #320]	; (8002564 <HAL_GPIO_Init+0x344>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x222>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4f      	ldr	r2, [pc, #316]	; (8002568 <HAL_GPIO_Init+0x348>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x21e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4e      	ldr	r2, [pc, #312]	; (800256c <HAL_GPIO_Init+0x34c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x21a>
 8002436:	2309      	movs	r3, #9
 8002438:	e012      	b.n	8002460 <HAL_GPIO_Init+0x240>
 800243a:	230a      	movs	r3, #10
 800243c:	e010      	b.n	8002460 <HAL_GPIO_Init+0x240>
 800243e:	2308      	movs	r3, #8
 8002440:	e00e      	b.n	8002460 <HAL_GPIO_Init+0x240>
 8002442:	2307      	movs	r3, #7
 8002444:	e00c      	b.n	8002460 <HAL_GPIO_Init+0x240>
 8002446:	2306      	movs	r3, #6
 8002448:	e00a      	b.n	8002460 <HAL_GPIO_Init+0x240>
 800244a:	2305      	movs	r3, #5
 800244c:	e008      	b.n	8002460 <HAL_GPIO_Init+0x240>
 800244e:	2304      	movs	r3, #4
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x240>
 8002452:	2303      	movs	r3, #3
 8002454:	e004      	b.n	8002460 <HAL_GPIO_Init+0x240>
 8002456:	2302      	movs	r3, #2
 8002458:	e002      	b.n	8002460 <HAL_GPIO_Init+0x240>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x240>
 800245e:	2300      	movs	r3, #0
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f002 0203 	and.w	r2, r2, #3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4093      	lsls	r3, r2
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002470:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_GPIO_Init+0x324>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_GPIO_Init+0x350>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a2:	4a33      	ldr	r2, [pc, #204]	; (8002570 <HAL_GPIO_Init+0x350>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_GPIO_Init+0x350>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_GPIO_Init+0x350>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_GPIO_Init+0x350>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_GPIO_Init+0x350>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_GPIO_Init+0x350>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_GPIO_Init+0x350>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3301      	adds	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	f67f ae86 	bls.w	8002240 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002534:	bf00      	nop
 8002536:	3724      	adds	r7, #36	; 0x24
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40021400 	.word	0x40021400
 8002560:	40021800 	.word	0x40021800
 8002564:	40021c00 	.word	0x40021c00
 8002568:	40022000 	.word	0x40022000
 800256c:	40022400 	.word	0x40022400
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025c6:	e002      	b.n	80025ce <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fbba 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800260c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260e:	b08f      	sub	sp, #60	; 0x3c
 8002610:	af0a      	add	r7, sp, #40	; 0x28
 8002612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e116      	b.n	800284c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fe ff6f 	bl	800151c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2203      	movs	r2, #3
 8002642:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fdd1 	bl	8005204 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	687e      	ldr	r6, [r7, #4]
 800266a:	466d      	mov	r5, sp
 800266c:	f106 0410 	add.w	r4, r6, #16
 8002670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800267c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002680:	1d33      	adds	r3, r6, #4
 8002682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002684:	6838      	ldr	r0, [r7, #0]
 8002686:	f002 fd65 	bl	8005154 <USB_CoreInit>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d7      	b.n	800284c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fdbf 	bl	8005226 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e04a      	b.n	8002744 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	333d      	adds	r3, #61	; 0x3d
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	333c      	adds	r3, #60	; 0x3c
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	b298      	uxth	r0, r3
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3342      	adds	r3, #66	; 0x42
 80026ea:	4602      	mov	r2, r0
 80026ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	333f      	adds	r3, #63	; 0x3f
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3344      	adds	r3, #68	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3348      	adds	r3, #72	; 0x48
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3350      	adds	r3, #80	; 0x50
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3af      	bcc.n	80026ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e044      	b.n	80027de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	3301      	adds	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d3b5      	bcc.n	8002754 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	687e      	ldr	r6, [r7, #4]
 80027f0:	466d      	mov	r5, sp
 80027f2:	f106 0410 	add.w	r4, r6, #16
 80027f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002802:	e885 0003 	stmia.w	r5, {r0, r1}
 8002806:	1d33      	adds	r3, r6, #4
 8002808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280a:	6838      	ldr	r0, [r7, #0]
 800280c:	f002 fd36 	bl	800527c <USB_DevInit>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e014      	b.n	800284c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f80a 	bl	8002854 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fee8 	bl	800561a <USB_DevDisconnect>

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002854 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_PCDEx_ActivateLPM+0x44>)
 8002884:	4313      	orrs	r3, r2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	10000003 	.word	0x10000003

0800289c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40007000 	.word	0x40007000

080028bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_PWREx_EnableOverDrive+0x98>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a22      	ldr	r2, [pc, #136]	; (8002954 <HAL_PWREx_EnableOverDrive+0x98>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_PWREx_EnableOverDrive+0x98>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ea:	f7fe feed 	bl	80016c8 <HAL_GetTick>
 80028ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028f0:	e009      	b.n	8002906 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028f2:	f7fe fee9 	bl	80016c8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002900:	d901      	bls.n	8002906 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e022      	b.n	800294c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002912:	d1ee      	bne.n	80028f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <HAL_PWREx_EnableOverDrive+0x9c>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002920:	f7fe fed2 	bl	80016c8 <HAL_GetTick>
 8002924:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002926:	e009      	b.n	800293c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002928:	f7fe fece 	bl	80016c8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002936:	d901      	bls.n	800293c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e007      	b.n	800294c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_PWREx_EnableOverDrive+0x9c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002948:	d1ee      	bne.n	8002928 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e29b      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	4b96      	ldr	r3, [pc, #600]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298c:	4b93      	ldr	r3, [pc, #588]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x62>
 8002998:	4b90      	ldr	r3, [pc, #576]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a4:	d10b      	bne.n	80029be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a6:	4b8d      	ldr	r3, [pc, #564]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d06c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x130>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e275      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x7a>
 80029c8:	4b84      	ldr	r3, [pc, #528]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a83      	ldr	r2, [pc, #524]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e02e      	b.n	8002a34 <HAL_RCC_OscConfig+0xd8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x9c>
 80029de:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7e      	ldr	r2, [pc, #504]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xd8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xc0>
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a72      	ldr	r2, [pc, #456]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd8>
 8002a1c:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b6c      	ldr	r3, [pc, #432]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6b      	ldr	r2, [pc, #428]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe44 	bl	80016c8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fe40 	bl	80016c8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e229      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe8>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fe30 	bl	80016c8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fe2c 	bl	80016c8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e215      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x110>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d069      	beq.n	8002b6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9a:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x190>
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x17a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1e9      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	493d      	ldr	r1, [pc, #244]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e040      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d023      	beq.n	8002b3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fde2 	bl	80016c8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fdde 	bl	80016c8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1c7      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4929      	ldr	r1, [pc, #164]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
 8002b3a:	e018      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fdbe 	bl	80016c8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fdba 	bl	80016c8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1a3      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d038      	beq.n	8002bec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d019      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fd9b 	bl	80016c8 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fe fd97 	bl	80016c8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e180      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x23a>
 8002bb4:	e01a      	b.n	8002bec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fd81 	bl	80016c8 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe fd7d 	bl	80016c8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d903      	bls.n	8002be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e166      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
 8002bdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a4 	beq.w	8002d42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b8c      	ldr	r3, [pc, #560]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b89      	ldr	r3, [pc, #548]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a88      	ldr	r2, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b86      	ldr	r3, [pc, #536]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c22:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x4d4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c2e:	4b80      	ldr	r3, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0x4d4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7f      	ldr	r2, [pc, #508]	; (8002e30 <HAL_RCC_OscConfig+0x4d4>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fd45 	bl	80016c8 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c42:	f7fe fd41 	bl	80016c8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	; 0x64
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e12a      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c54:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCC_OscConfig+0x4d4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x31a>
 8002c68:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	e02d      	b.n	8002cd2 <HAL_RCC_OscConfig+0x376>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x33c>
 8002c7e:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a6a      	ldr	r2, [pc, #424]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a67      	ldr	r2, [pc, #412]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	e01c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x376>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x35e>
 8002ca0:	4b62      	ldr	r3, [pc, #392]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a61      	ldr	r2, [pc, #388]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a5e      	ldr	r2, [pc, #376]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x376>
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe fcf5 	bl	80016c8 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe fcf1 	bl	80016c8 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0d8      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ee      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x386>
 8002d04:	e014      	b.n	8002d30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fcdf 	bl	80016c8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fcdb 	bl	80016c8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0c2      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80ae 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4c:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d06d      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d14b      	bne.n	8002df8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fcac 	bl	80016c8 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fca8 	bl	80016c8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e091      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	491b      	ldr	r1, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fc7a 	bl	80016c8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fc76 	bl	80016c8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e05f      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
 8002df6:	e057      	b.n	8002ea8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fc60 	bl	80016c8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fc5c 	bl	80016c8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e045      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4b0>
 8002e2a:	e03d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x54c>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <HAL_RCC_OscConfig+0x558>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d030      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d129      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d122      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d119      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d10f      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0d0      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d910      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 020f 	bic.w	r2, r3, #15
 8002ee6:	4965      	ldr	r1, [pc, #404]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0b8      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a58      	ldr	r2, [pc, #352]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	494d      	ldr	r1, [pc, #308]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d040      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d115      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e07f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e073      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06b      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4936      	ldr	r1, [pc, #216]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fac:	f7fe fb8c 	bl	80016c8 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe fb88 	bl	80016c8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e053      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d210      	bcs.n	800300c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 020f 	bic.w	r2, r3, #15
 8002ff2:	4922      	ldr	r1, [pc, #136]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e032      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4916      	ldr	r1, [pc, #88]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490e      	ldr	r1, [pc, #56]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800304a:	f000 f821 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800304e:	4601      	mov	r1, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_RCC_ClockConfig+0x1cc>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	fa21 f303 	lsr.w	r3, r1, r3
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1d0>)
 8003064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_ClockConfig+0x1d4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fae8 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023c00 	.word	0x40023c00
 8003080:	40023800 	.word	0x40023800
 8003084:	08005f5c 	.word	0x08005f5c
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d007      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x32>
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d008      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x38>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 80b4 	bne.w	8003224 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b5e      	ldr	r3, [pc, #376]	; (8003238 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030be:	60bb      	str	r3, [r7, #8]
      break;
 80030c0:	e0b3      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c2:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80030c4:	60bb      	str	r3, [r7, #8]
      break;
 80030c6:	e0b0      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c8:	4b5a      	ldr	r3, [pc, #360]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030d2:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d04a      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b55      	ldr	r3, [pc, #340]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	f04f 0400 	mov.w	r4, #0
 80030e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	ea03 0501 	and.w	r5, r3, r1
 80030f4:	ea04 0602 	and.w	r6, r4, r2
 80030f8:	4629      	mov	r1, r5
 80030fa:	4632      	mov	r2, r6
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	f04f 0400 	mov.w	r4, #0
 8003104:	0154      	lsls	r4, r2, #5
 8003106:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800310a:	014b      	lsls	r3, r1, #5
 800310c:	4619      	mov	r1, r3
 800310e:	4622      	mov	r2, r4
 8003110:	1b49      	subs	r1, r1, r5
 8003112:	eb62 0206 	sbc.w	r2, r2, r6
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	0194      	lsls	r4, r2, #6
 8003120:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003124:	018b      	lsls	r3, r1, #6
 8003126:	1a5b      	subs	r3, r3, r1
 8003128:	eb64 0402 	sbc.w	r4, r4, r2
 800312c:	f04f 0100 	mov.w	r1, #0
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	00e2      	lsls	r2, r4, #3
 8003136:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800313a:	00d9      	lsls	r1, r3, #3
 800313c:	460b      	mov	r3, r1
 800313e:	4614      	mov	r4, r2
 8003140:	195b      	adds	r3, r3, r5
 8003142:	eb44 0406 	adc.w	r4, r4, r6
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	0262      	lsls	r2, r4, #9
 8003150:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003154:	0259      	lsls	r1, r3, #9
 8003156:	460b      	mov	r3, r1
 8003158:	4614      	mov	r4, r2
 800315a:	4618      	mov	r0, r3
 800315c:	4621      	mov	r1, r4
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	461a      	mov	r2, r3
 8003166:	4623      	mov	r3, r4
 8003168:	f7fd f8c2 	bl	80002f0 <__aeabi_uldivmod>
 800316c:	4603      	mov	r3, r0
 800316e:	460c      	mov	r4, r1
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e049      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003174:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	f04f 0400 	mov.w	r4, #0
 800317e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	ea03 0501 	and.w	r5, r3, r1
 800318a:	ea04 0602 	and.w	r6, r4, r2
 800318e:	4629      	mov	r1, r5
 8003190:	4632      	mov	r2, r6
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	f04f 0400 	mov.w	r4, #0
 800319a:	0154      	lsls	r4, r2, #5
 800319c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031a0:	014b      	lsls	r3, r1, #5
 80031a2:	4619      	mov	r1, r3
 80031a4:	4622      	mov	r2, r4
 80031a6:	1b49      	subs	r1, r1, r5
 80031a8:	eb62 0206 	sbc.w	r2, r2, r6
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	0194      	lsls	r4, r2, #6
 80031b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031ba:	018b      	lsls	r3, r1, #6
 80031bc:	1a5b      	subs	r3, r3, r1
 80031be:	eb64 0402 	sbc.w	r4, r4, r2
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	00e2      	lsls	r2, r4, #3
 80031cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031d0:	00d9      	lsls	r1, r3, #3
 80031d2:	460b      	mov	r3, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	195b      	adds	r3, r3, r5
 80031d8:	eb44 0406 	adc.w	r4, r4, r6
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	02a2      	lsls	r2, r4, #10
 80031e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031ea:	0299      	lsls	r1, r3, #10
 80031ec:	460b      	mov	r3, r1
 80031ee:	4614      	mov	r4, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	4621      	mov	r1, r4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f04f 0400 	mov.w	r4, #0
 80031fa:	461a      	mov	r2, r3
 80031fc:	4623      	mov	r3, r4
 80031fe:	f7fd f877 	bl	80002f0 <__aeabi_uldivmod>
 8003202:	4603      	mov	r3, r0
 8003204:	460c      	mov	r4, r1
 8003206:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	60bb      	str	r3, [r7, #8]
      break;
 8003222:	e002      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003226:	60bb      	str	r3, [r7, #8]
      break;
 8003228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322a:	68bb      	ldr	r3, [r7, #8]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200

08003240 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4601      	mov	r1, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a9b      	lsrs	r3, r3, #10
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	08005f6c 	.word	0x08005f6c

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffdc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003288:	4601      	mov	r1, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08005f6c 	.word	0x08005f6c

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032d0:	4b69      	ldr	r3, [pc, #420]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a68      	ldr	r2, [pc, #416]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	4b66      	ldr	r3, [pc, #408]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	4964      	ldr	r1, [pc, #400]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d017      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003302:	4b5d      	ldr	r3, [pc, #372]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	4959      	ldr	r1, [pc, #356]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d017      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800333e:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	494a      	ldr	r1, [pc, #296]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335c:	d101      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 808b 	beq.w	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	4a39      	ldr	r2, [pc, #228]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	6413      	str	r3, [r2, #64]	; 0x40
 8003398:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033a4:	4b35      	ldr	r3, [pc, #212]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a34      	ldr	r2, [pc, #208]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b0:	f7fe f98a 	bl	80016c8 <HAL_GetTick>
 80033b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b8:	f7fe f986 	bl	80016c8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e38d      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ca:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033d6:	4b28      	ldr	r3, [pc, #160]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d035      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d02e      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d114      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe f94e 	bl	80016c8 <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fe f94a 	bl	80016c8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e34f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ee      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345e:	d111      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800346e:	400b      	ands	r3, r1
 8003470:	4901      	ldr	r1, [pc, #4]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
 8003476:	e00b      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	0ffffcff 	.word	0x0ffffcff
 8003484:	4bb3      	ldr	r3, [pc, #716]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4ab2      	ldr	r2, [pc, #712]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	4bb0      	ldr	r3, [pc, #704]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	49ad      	ldr	r1, [pc, #692]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ae:	4ba9      	ldr	r3, [pc, #676]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b4:	4aa7      	ldr	r2, [pc, #668]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034be:	4ba5      	ldr	r3, [pc, #660]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	49a2      	ldr	r1, [pc, #648]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034dc:	4b9d      	ldr	r3, [pc, #628]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ea:	499a      	ldr	r1, [pc, #616]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034fe:	4b95      	ldr	r3, [pc, #596]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350c:	4991      	ldr	r1, [pc, #580]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003520:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	4989      	ldr	r1, [pc, #548]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003542:	4b84      	ldr	r3, [pc, #528]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4980      	ldr	r1, [pc, #512]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003564:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	4978      	ldr	r1, [pc, #480]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f023 020c 	bic.w	r2, r3, #12
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	496f      	ldr	r1, [pc, #444]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	4967      	ldr	r1, [pc, #412]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ca:	4b62      	ldr	r3, [pc, #392]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	495e      	ldr	r1, [pc, #376]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ec:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	4956      	ldr	r1, [pc, #344]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	494d      	ldr	r1, [pc, #308]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003630:	4b48      	ldr	r3, [pc, #288]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	4945      	ldr	r1, [pc, #276]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	493c      	ldr	r1, [pc, #240]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003682:	4934      	ldr	r1, [pc, #208]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d011      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a4:	492b      	ldr	r1, [pc, #172]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b4:	d101      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	491b      	ldr	r1, [pc, #108]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372c:	4909      	ldr	r1, [pc, #36]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00f      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003746:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	4985      	ldr	r1, [pc, #532]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800376c:	4b80      	ldr	r3, [pc, #512]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800376e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003772:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377c:	497c      	ldr	r1, [pc, #496]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d005      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003792:	f040 80d6 	bne.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a75      	ldr	r2, [pc, #468]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a2:	f7fd ff91 	bl	80016c8 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037aa:	f7fd ff8d 	bl	80016c8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b64      	cmp	r3, #100	; 0x64
 80037b6:	d901      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e194      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e2:	0c1b      	lsrs	r3, r3, #16
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037ea:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	0e1b      	lsrs	r3, r3, #24
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	019a      	lsls	r2, r3, #6
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	071b      	lsls	r3, r3, #28
 8003810:	4957      	ldr	r1, [pc, #348]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02e      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003842:	d129      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003844:	4b4a      	ldr	r3, [pc, #296]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384a:	0c1b      	lsrs	r3, r3, #16
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003858:	0f1b      	lsrs	r3, r3, #28
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	019a      	lsls	r2, r3, #6
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	071b      	lsls	r3, r3, #28
 8003878:	493d      	ldr	r1, [pc, #244]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003886:	f023 021f 	bic.w	r2, r3, #31
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	3b01      	subs	r3, #1
 8003890:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01d      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038aa:	0e1b      	lsrs	r3, r3, #24
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b8:	0f1b      	lsrs	r3, r3, #28
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	019a      	lsls	r2, r3, #6
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	041b      	lsls	r3, r3, #16
 80038cc:	431a      	orrs	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	071b      	lsls	r3, r3, #28
 80038d8:	4925      	ldr	r1, [pc, #148]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d011      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	019a      	lsls	r2, r3, #6
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	071b      	lsls	r3, r3, #28
 8003908:	4919      	ldr	r1, [pc, #100]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fd fed4 	bl	80016c8 <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003924:	f7fd fed0 	bl	80016c8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0d7      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 80cd 	bne.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003956:	f7fd feb7 	bl	80016c8 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800395e:	f7fd feb3 	bl	80016c8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b64      	cmp	r3, #100	; 0x64
 800396a:	d903      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0ba      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003970:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800397c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003980:	d0ed      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039aa:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039b8:	4b4d      	ldr	r3, [pc, #308]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	0f1b      	lsrs	r3, r3, #28
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4944      	ldr	r1, [pc, #272]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039e6:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	493d      	ldr	r1, [pc, #244]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d022      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d11d      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	0e1b      	lsrs	r3, r3, #24
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a24:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	0f1b      	lsrs	r3, r3, #28
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	4929      	ldr	r1, [pc, #164]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	0e1b      	lsrs	r3, r3, #24
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	019a      	lsls	r2, r3, #6
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4911      	ldr	r1, [pc, #68]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fe04 	bl	80016c8 <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ac4:	f7fd fe00 	bl	80016c8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e007      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d1ef      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01d      	b.n	8003b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fc1a 	bl	8001354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fb86 	bl	8004244 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_TIM_Base_Start_IT+0x50>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d00b      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x42>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d007      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	00010007 	.word	0x00010007

08003ba0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a1a      	ldr	r2, [r3, #32]
 8003bbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10f      	bne.n	8003be8 <HAL_TIM_Base_Stop_IT+0x48>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	f240 4344 	movw	r3, #1092	; 0x444
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_Base_Stop_IT+0x48>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e01d      	b.n	8003c44 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fd fb4d 	bl	80012bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f000 fb05 	bl	8004244 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d841      	bhi.n	8003ce0 <HAL_TIM_IC_Start_IT+0x94>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_TIM_IC_Start_IT+0x18>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c99 	.word	0x08003c99
 8003c68:	08003ce1 	.word	0x08003ce1
 8003c6c:	08003ce1 	.word	0x08003ce1
 8003c70:	08003ce1 	.word	0x08003ce1
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003ce1 	.word	0x08003ce1
 8003c7c:	08003ce1 	.word	0x08003ce1
 8003c80:	08003ce1 	.word	0x08003ce1
 8003c84:	08003cbd 	.word	0x08003cbd
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003ce1 	.word	0x08003ce1
 8003c94:	08003ccf 	.word	0x08003ccf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0202 	orr.w	r2, r2, #2
 8003ca6:	60da      	str	r2, [r3, #12]
      break;
 8003ca8:	e01b      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0204 	orr.w	r2, r2, #4
 8003cb8:	60da      	str	r2, [r3, #12]
      break;
 8003cba:	e012      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0208 	orr.w	r2, r2, #8
 8003cca:	60da      	str	r2, [r3, #12]
      break;
 8003ccc:	e009      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0210 	orr.w	r2, r2, #16
 8003cdc:	60da      	str	r2, [r3, #12]
      break;
 8003cde:	e000      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003ce0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc74 	bl	80045d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_TIM_IC_Start_IT+0xd8>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d00b      	beq.n	8003d1a <HAL_TIM_IC_Start_IT+0xce>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d007      	beq.n	8003d1a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	00010007 	.word	0x00010007

08003d28 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d841      	bhi.n	8003dbc <HAL_TIM_IC_Stop_IT+0x94>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_TIM_IC_Stop_IT+0x18>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003dbd 	.word	0x08003dbd
 8003d48:	08003dbd 	.word	0x08003dbd
 8003d4c:	08003dbd 	.word	0x08003dbd
 8003d50:	08003d87 	.word	0x08003d87
 8003d54:	08003dbd 	.word	0x08003dbd
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003dbd 	.word	0x08003dbd
 8003d60:	08003d99 	.word	0x08003d99
 8003d64:	08003dbd 	.word	0x08003dbd
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dab 	.word	0x08003dab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0202 	bic.w	r2, r2, #2
 8003d82:	60da      	str	r2, [r3, #12]
      break;
 8003d84:	e01b      	b.n	8003dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0204 	bic.w	r2, r2, #4
 8003d94:	60da      	str	r2, [r3, #12]
      break;
 8003d96:	e012      	b.n	8003dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0208 	bic.w	r2, r2, #8
 8003da6:	60da      	str	r2, [r3, #12]
      break;
 8003da8:	e009      	b.n	8003dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0210 	bic.w	r2, r2, #16
 8003db8:	60da      	str	r2, [r3, #12]
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8003dbc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fc06 	bl	80045d8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <HAL_TIM_IC_Stop_IT+0xd4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	f240 4344 	movw	r3, #1092	; 0x444
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_IC_Stop_IT+0xd4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop

08003e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0202 	mvn.w	r2, #2
 8003e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fc ffce 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9d8 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9df 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0204 	mvn.w	r2, #4
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc ffa4 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9ae 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f9b5 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc ff7a 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f984 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f98b 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0210 	mvn.w	r2, #16
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2208      	movs	r2, #8
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fc ff50 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f95a 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f961 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0201 	mvn.w	r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc ff94 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fbce 	bl	8004754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b80      	cmp	r3, #128	; 0x80
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fbc1 	bl	8004768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d10e      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d107      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800400a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f90f 	bl	8004230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d10e      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b20      	cmp	r3, #32
 800402c:	d107      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f06f 0220 	mvn.w	r2, #32
 8004036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb81 	bl	8004740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIM_IC_ConfigChannel+0x1a>
 800405c:	2302      	movs	r3, #2
 800405e:	e08a      	b.n	8004176 <HAL_TIM_IC_ConfigChannel+0x130>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11b      	bne.n	80040ae <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f000 f97d 	bl	8004384 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 020c 	bic.w	r2, r2, #12
 8004098:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6999      	ldr	r1, [r3, #24]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	619a      	str	r2, [r3, #24]
 80040ac:	e05a      	b.n	8004164 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d11c      	bne.n	80040ee <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f000 f9d2 	bl	800446c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
 80040ec:	e03a      	b.n	8004164 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f000 f9ef 	bl	80044e6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 020c 	bic.w	r2, r2, #12
 8004116:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69d9      	ldr	r1, [r3, #28]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	61da      	str	r2, [r3, #28]
 800412a:	e01b      	b.n	8004164 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f000 fa0f 	bl	800455e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800414e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69d9      	ldr	r1, [r3, #28]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d831      	bhi.n	80041f8 <HAL_TIM_ReadCapturedValue+0x78>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041db 	.word	0x080041db
 80041b0:	080041f9 	.word	0x080041f9
 80041b4:	080041f9 	.word	0x080041f9
 80041b8:	080041f9 	.word	0x080041f9
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041f9 	.word	0x080041f9
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	080041ef 	.word	0x080041ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	60fb      	str	r3, [r7, #12]

      break;
 80041d8:	e00f      	b.n	80041fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	60fb      	str	r3, [r7, #12]

      break;
 80041e2:	e00a      	b.n	80041fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	60fb      	str	r3, [r7, #12]

      break;
 80041ec:	e005      	b.n	80041fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	60fb      	str	r3, [r7, #12]

      break;
 80041f6:	e000      	b.n	80041fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80041f8:	bf00      	nop
  }

  return tmpreg;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a40      	ldr	r2, [pc, #256]	; (8004358 <TIM_Base_SetConfig+0x114>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3d      	ldr	r2, [pc, #244]	; (800435c <TIM_Base_SetConfig+0x118>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3c      	ldr	r2, [pc, #240]	; (8004360 <TIM_Base_SetConfig+0x11c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3b      	ldr	r2, [pc, #236]	; (8004364 <TIM_Base_SetConfig+0x120>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <TIM_Base_SetConfig+0x124>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2f      	ldr	r2, [pc, #188]	; (8004358 <TIM_Base_SetConfig+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02b      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d027      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2c      	ldr	r2, [pc, #176]	; (800435c <TIM_Base_SetConfig+0x118>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d023      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2b      	ldr	r2, [pc, #172]	; (8004360 <TIM_Base_SetConfig+0x11c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <TIM_Base_SetConfig+0x120>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <TIM_Base_SetConfig+0x124>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a28      	ldr	r2, [pc, #160]	; (800436c <TIM_Base_SetConfig+0x128>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a27      	ldr	r2, [pc, #156]	; (8004370 <TIM_Base_SetConfig+0x12c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <TIM_Base_SetConfig+0x130>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <TIM_Base_SetConfig+0x134>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a24      	ldr	r2, [pc, #144]	; (800437c <TIM_Base_SetConfig+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a23      	ldr	r2, [pc, #140]	; (8004380 <TIM_Base_SetConfig+0x13c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <TIM_Base_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_Base_SetConfig+0xf8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <TIM_Base_SetConfig+0x124>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d103      	bne.n	8004344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	615a      	str	r2, [r3, #20]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40010400 	.word	0x40010400
 800436c:	40014000 	.word	0x40014000
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800
 8004378:	40001800 	.word	0x40001800
 800437c:	40001c00 	.word	0x40001c00
 8004380:	40002000 	.word	0x40002000

08004384 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a28      	ldr	r2, [pc, #160]	; (8004450 <TIM_TI1_SetConfig+0xcc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01b      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d017      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a25      	ldr	r2, [pc, #148]	; (8004454 <TIM_TI1_SetConfig+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a24      	ldr	r2, [pc, #144]	; (8004458 <TIM_TI1_SetConfig+0xd4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00f      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <TIM_TI1_SetConfig+0xd8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00b      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <TIM_TI1_SetConfig+0xdc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <TIM_TI1_SetConfig+0xe0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_TI1_SetConfig+0x66>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <TIM_TI1_SetConfig+0xe4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <TIM_TI1_SetConfig+0x6a>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <TIM_TI1_SetConfig+0x6c>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e003      	b.n	800440e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	b2db      	uxtb	r3, r3
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f023 030a 	bic.w	r3, r3, #10
 8004428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 030a 	and.w	r3, r3, #10
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0210 	bic.w	r2, r3, #16
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	031b      	lsls	r3, r3, #12
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b087      	sub	sp, #28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	b2db      	uxtb	r3, r3
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	031b      	lsls	r3, r3, #12
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e06d      	b.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a30      	ldr	r2, [pc, #192]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2f      	ldr	r2, [pc, #188]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d108      	bne.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a20      	ldr	r2, [pc, #128]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d022      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d01d      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1d      	ldr	r2, [pc, #116]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d018      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d10c      	bne.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800

08004740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e040      	b.n	8004810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc fe4a 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2224      	movs	r2, #36	; 0x24
 80047a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8be 	bl	800493c <UART_SetConfig>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e022      	b.n	8004810 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fb5c 	bl	8004e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fbe3 	bl	8004fd4 <UART_CheckIdleState>
 800480e:	4603      	mov	r3, r0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	2b20      	cmp	r3, #32
 800482e:	d17f      	bne.n	8004930 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_UART_Transmit+0x24>
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e078      	b.n	8004932 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_UART_Transmit+0x36>
 800484a:	2302      	movs	r3, #2
 800484c:	e071      	b.n	8004932 <HAL_UART_Transmit+0x11a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2221      	movs	r2, #33	; 0x21
 8004860:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004862:	f7fc ff31 	bl	80016c8 <HAL_GetTick>
 8004866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	d108      	bne.n	8004894 <HAL_UART_Transmit+0x7c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e003      	b.n	800489c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80048a4:	e02c      	b.n	8004900 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fbd4 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e038      	b.n	8004932 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3302      	adds	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e007      	b.n	80048ee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1cc      	bne.n	80048a6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	2140      	movs	r1, #64	; 0x40
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fba1 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e005      	b.n	8004932 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4bb1      	ldr	r3, [pc, #708]	; (8004c30 <UART_SetConfig+0x2f4>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6939      	ldr	r1, [r7, #16]
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a9f      	ldr	r2, [pc, #636]	; (8004c34 <UART_SetConfig+0x2f8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d121      	bne.n	8004a00 <UART_SetConfig+0xc4>
 80049bc:	4b9e      	ldr	r3, [pc, #632]	; (8004c38 <UART_SetConfig+0x2fc>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d816      	bhi.n	80049f8 <UART_SetConfig+0xbc>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x94>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049e7 	.word	0x080049e7
 80049dc:	080049f3 	.word	0x080049f3
 80049e0:	2301      	movs	r3, #1
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e151      	b.n	8004c8a <UART_SetConfig+0x34e>
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e14e      	b.n	8004c8a <UART_SetConfig+0x34e>
 80049ec:	2304      	movs	r3, #4
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e14b      	b.n	8004c8a <UART_SetConfig+0x34e>
 80049f2:	2308      	movs	r3, #8
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e148      	b.n	8004c8a <UART_SetConfig+0x34e>
 80049f8:	2310      	movs	r3, #16
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	bf00      	nop
 80049fe:	e144      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a8d      	ldr	r2, [pc, #564]	; (8004c3c <UART_SetConfig+0x300>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d134      	bne.n	8004a74 <UART_SetConfig+0x138>
 8004a0a:	4b8b      	ldr	r3, [pc, #556]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d829      	bhi.n	8004a6c <UART_SetConfig+0x130>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UART_SetConfig+0xe4>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a6d 	.word	0x08004a6d
 8004a2c:	08004a6d 	.word	0x08004a6d
 8004a30:	08004a61 	.word	0x08004a61
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004a6d 	.word	0x08004a6d
 8004a40:	08004a5b 	.word	0x08004a5b
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004a67 	.word	0x08004a67
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e117      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e114      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004a60:	2304      	movs	r3, #4
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e111      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004a66:	2308      	movs	r3, #8
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e10e      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	bf00      	nop
 8004a72:	e10a      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a71      	ldr	r2, [pc, #452]	; (8004c40 <UART_SetConfig+0x304>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d120      	bne.n	8004ac0 <UART_SetConfig+0x184>
 8004a7e:	4b6e      	ldr	r3, [pc, #440]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d00f      	beq.n	8004aac <UART_SetConfig+0x170>
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d802      	bhi.n	8004a96 <UART_SetConfig+0x15a>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <UART_SetConfig+0x164>
 8004a94:	e010      	b.n	8004ab8 <UART_SetConfig+0x17c>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d005      	beq.n	8004aa6 <UART_SetConfig+0x16a>
 8004a9a:	2b30      	cmp	r3, #48	; 0x30
 8004a9c:	d009      	beq.n	8004ab2 <UART_SetConfig+0x176>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x17c>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e0f1      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e0ee      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e0eb      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e0e8      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	bf00      	nop
 8004abe:	e0e4      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a5f      	ldr	r2, [pc, #380]	; (8004c44 <UART_SetConfig+0x308>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d120      	bne.n	8004b0c <UART_SetConfig+0x1d0>
 8004aca:	4b5b      	ldr	r3, [pc, #364]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d00f      	beq.n	8004af8 <UART_SetConfig+0x1bc>
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d802      	bhi.n	8004ae2 <UART_SetConfig+0x1a6>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <UART_SetConfig+0x1b0>
 8004ae0:	e010      	b.n	8004b04 <UART_SetConfig+0x1c8>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d005      	beq.n	8004af2 <UART_SetConfig+0x1b6>
 8004ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae8:	d009      	beq.n	8004afe <UART_SetConfig+0x1c2>
 8004aea:	e00b      	b.n	8004b04 <UART_SetConfig+0x1c8>
 8004aec:	2300      	movs	r3, #0
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e0cb      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004af2:	2302      	movs	r3, #2
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e0c8      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004af8:	2304      	movs	r3, #4
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e0c5      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004afe:	2308      	movs	r3, #8
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e0c2      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b04:	2310      	movs	r3, #16
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	bf00      	nop
 8004b0a:	e0be      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a4d      	ldr	r2, [pc, #308]	; (8004c48 <UART_SetConfig+0x30c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d124      	bne.n	8004b60 <UART_SetConfig+0x224>
 8004b16:	4b48      	ldr	r3, [pc, #288]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b24:	d012      	beq.n	8004b4c <UART_SetConfig+0x210>
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2a:	d802      	bhi.n	8004b32 <UART_SetConfig+0x1f6>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <UART_SetConfig+0x204>
 8004b30:	e012      	b.n	8004b58 <UART_SetConfig+0x21c>
 8004b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b36:	d006      	beq.n	8004b46 <UART_SetConfig+0x20a>
 8004b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b3c:	d009      	beq.n	8004b52 <UART_SetConfig+0x216>
 8004b3e:	e00b      	b.n	8004b58 <UART_SetConfig+0x21c>
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e0a1      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e09e      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e09b      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e098      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	bf00      	nop
 8004b5e:	e094      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a39      	ldr	r2, [pc, #228]	; (8004c4c <UART_SetConfig+0x310>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d124      	bne.n	8004bb4 <UART_SetConfig+0x278>
 8004b6a:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b78:	d012      	beq.n	8004ba0 <UART_SetConfig+0x264>
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d802      	bhi.n	8004b86 <UART_SetConfig+0x24a>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <UART_SetConfig+0x258>
 8004b84:	e012      	b.n	8004bac <UART_SetConfig+0x270>
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8a:	d006      	beq.n	8004b9a <UART_SetConfig+0x25e>
 8004b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b90:	d009      	beq.n	8004ba6 <UART_SetConfig+0x26a>
 8004b92:	e00b      	b.n	8004bac <UART_SetConfig+0x270>
 8004b94:	2301      	movs	r3, #1
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e077      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e074      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e071      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e06e      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	bf00      	nop
 8004bb2:	e06a      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <UART_SetConfig+0x314>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d124      	bne.n	8004c08 <UART_SetConfig+0x2cc>
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d012      	beq.n	8004bf4 <UART_SetConfig+0x2b8>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d802      	bhi.n	8004bda <UART_SetConfig+0x29e>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_SetConfig+0x2ac>
 8004bd8:	e012      	b.n	8004c00 <UART_SetConfig+0x2c4>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d006      	beq.n	8004bee <UART_SetConfig+0x2b2>
 8004be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be4:	d009      	beq.n	8004bfa <UART_SetConfig+0x2be>
 8004be6:	e00b      	b.n	8004c00 <UART_SetConfig+0x2c4>
 8004be8:	2300      	movs	r3, #0
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e04d      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e04a      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e047      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e044      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c00:	2310      	movs	r3, #16
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	bf00      	nop
 8004c06:	e040      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <UART_SetConfig+0x318>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d139      	bne.n	8004c86 <UART_SetConfig+0x34a>
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c20:	d027      	beq.n	8004c72 <UART_SetConfig+0x336>
 8004c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c26:	d817      	bhi.n	8004c58 <UART_SetConfig+0x31c>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01c      	beq.n	8004c66 <UART_SetConfig+0x32a>
 8004c2c:	e027      	b.n	8004c7e <UART_SetConfig+0x342>
 8004c2e:	bf00      	nop
 8004c30:	efff69f3 	.word	0xefff69f3
 8004c34:	40011000 	.word	0x40011000
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40004400 	.word	0x40004400
 8004c40:	40004800 	.word	0x40004800
 8004c44:	40004c00 	.word	0x40004c00
 8004c48:	40005000 	.word	0x40005000
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	40007800 	.word	0x40007800
 8004c54:	40007c00 	.word	0x40007c00
 8004c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5c:	d006      	beq.n	8004c6c <UART_SetConfig+0x330>
 8004c5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c62:	d009      	beq.n	8004c78 <UART_SetConfig+0x33c>
 8004c64:	e00b      	b.n	8004c7e <UART_SetConfig+0x342>
 8004c66:	2300      	movs	r3, #0
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e00e      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e00b      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c72:	2304      	movs	r3, #4
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e008      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c7e:	2310      	movs	r3, #16
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	bf00      	nop
 8004c84:	e001      	b.n	8004c8a <UART_SetConfig+0x34e>
 8004c86:	2310      	movs	r3, #16
 8004c88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c92:	d17f      	bne.n	8004d94 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d85c      	bhi.n	8004d54 <UART_SetConfig+0x418>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <UART_SetConfig+0x364>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004d05 	.word	0x08004d05
 8004cac:	08004d55 	.word	0x08004d55
 8004cb0:	08004d1d 	.word	0x08004d1d
 8004cb4:	08004d55 	.word	0x08004d55
 8004cb8:	08004d55 	.word	0x08004d55
 8004cbc:	08004d55 	.word	0x08004d55
 8004cc0:	08004d3d 	.word	0x08004d3d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe fac8 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	005a      	lsls	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	61bb      	str	r3, [r7, #24]
        break;
 8004ce2:	e03a      	b.n	8004d5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fe facc 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	005a      	lsls	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	61bb      	str	r3, [r7, #24]
        break;
 8004d02:	e02a      	b.n	8004d5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	085a      	lsrs	r2, r3, #1
 8004d0a:	4b5f      	ldr	r3, [pc, #380]	; (8004e88 <UART_SetConfig+0x54c>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6852      	ldr	r2, [r2, #4]
 8004d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	61bb      	str	r3, [r7, #24]
        break;
 8004d1a:	e01e      	b.n	8004d5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1c:	f7fe f9b8 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004d20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	005a      	lsls	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	441a      	add	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e00e      	b.n	8004d5a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	61bb      	str	r3, [r7, #24]
        break;
 8004d52:	e002      	b.n	8004d5a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
        break;
 8004d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b0f      	cmp	r3, #15
 8004d5e:	d916      	bls.n	8004d8e <UART_SetConfig+0x452>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d66:	d212      	bcs.n	8004d8e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f023 030f 	bic.w	r3, r3, #15
 8004d70:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	897b      	ldrh	r3, [r7, #10]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	897a      	ldrh	r2, [r7, #10]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e070      	b.n	8004e70 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
 8004d92:	e06d      	b.n	8004e70 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d859      	bhi.n	8004e4e <UART_SetConfig+0x512>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0x464>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004de3 	.word	0x08004de3
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e4f 	.word	0x08004e4f
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004e4f 	.word	0x08004e4f
 8004db8:	08004e4f 	.word	0x08004e4f
 8004dbc:	08004e4f 	.word	0x08004e4f
 8004dc0:	08004e37 	.word	0x08004e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc4:	f7fe fa48 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085a      	lsrs	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	441a      	add	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	61bb      	str	r3, [r7, #24]
        break;
 8004de0:	e038      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de2:	f7fe fa4d 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8004de6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	085a      	lsrs	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	61bb      	str	r3, [r7, #24]
        break;
 8004dfe:	e029      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	085a      	lsrs	r2, r3, #1
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <UART_SetConfig+0x550>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6852      	ldr	r2, [r2, #4]
 8004e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	61bb      	str	r3, [r7, #24]
        break;
 8004e16:	e01d      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e18:	f7fe f93a 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004e1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085a      	lsrs	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	441a      	add	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	61bb      	str	r3, [r7, #24]
        break;
 8004e34:	e00e      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e002      	b.n	8004e54 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
        break;
 8004e52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	d908      	bls.n	8004e6c <UART_SetConfig+0x530>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d204      	bcs.n	8004e6c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	e001      	b.n	8004e70 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	01e84800 	.word	0x01e84800
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8e:	d10a      	bne.n	8004fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fe2:	f7fc fb71 	bl	80016c8 <HAL_GetTick>
 8004fe6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d10e      	bne.n	8005014 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f82a 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e020      	b.n	8005056 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d10e      	bne.n	8005040 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005022:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f814 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e00a      	b.n	8005056 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	e05d      	b.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d059      	beq.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005078:	f7fc fb26 	bl	80016c8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <UART_WaitOnFlagUntilTimeout+0x30>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d11b      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800509c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e042      	b.n	800514c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02b      	beq.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e2:	d123      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e00f      	b.n	800514c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4013      	ands	r3, r2
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	429a      	cmp	r2, r3
 8005148:	d092      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005154:	b084      	sub	sp, #16
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	f107 001c 	add.w	r0, r7, #28
 8005162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	d120      	bne.n	80051ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4b20      	ldr	r3, [pc, #128]	; (8005200 <USB_CoreInit+0xac>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d105      	bne.n	80051a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa52 	bl	800564c <USB_CoreReset>
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	e010      	b.n	80051d0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa46 	bl	800564c <USB_CoreReset>
 80051c0:	4603      	mov	r3, r0
 80051c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d10b      	bne.n	80051ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f043 0206 	orr.w	r2, r3, #6
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051fa:	b004      	add	sp, #16
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	ffbdffbf 	.word	0xffbdffbf

08005204 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 0201 	bic.w	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d106      	bne.n	8005252 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60da      	str	r2, [r3, #12]
 8005250:	e00b      	b.n	800526a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e001      	b.n	800526a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e003      	b.n	8005272 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800526a:	2032      	movs	r0, #50	; 0x32
 800526c:	f7fc fa38 	bl	80016e0 <HAL_Delay>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800527c:	b084      	sub	sp, #16
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800528a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e009      	b.n	80052b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3301      	adds	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0e      	cmp	r3, #14
 80052b4:	d9f2      	bls.n	800529c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11c      	bne.n	80052f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ca:	f043 0302 	orr.w	r3, r3, #2
 80052ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e005      	b.n	8005302 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005308:	461a      	mov	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	4619      	mov	r1, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	680b      	ldr	r3, [r1, #0]
 8005320:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	2b01      	cmp	r3, #1
 8005326:	d10c      	bne.n	8005342 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d104      	bne.n	8005338 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800532e:	2100      	movs	r1, #0
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f959 	bl	80055e8 <USB_SetDevSpeed>
 8005336:	e018      	b.n	800536a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005338:	2101      	movs	r1, #1
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f954 	bl	80055e8 <USB_SetDevSpeed>
 8005340:	e013      	b.n	800536a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	2b03      	cmp	r3, #3
 8005346:	d10c      	bne.n	8005362 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800534e:	2100      	movs	r1, #0
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f949 	bl	80055e8 <USB_SetDevSpeed>
 8005356:	e008      	b.n	800536a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005358:	2101      	movs	r1, #1
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f944 	bl	80055e8 <USB_SetDevSpeed>
 8005360:	e003      	b.n	800536a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005362:	2103      	movs	r1, #3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f93f 	bl	80055e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800536a:	2110      	movs	r1, #16
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8f3 	bl	8005558 <USB_FlushTxFifo>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f911 	bl	80055a4 <USB_FlushRxFifo>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	461a      	mov	r2, r3
 8005394:	2300      	movs	r3, #0
 8005396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	e043      	b.n	800543e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053cc:	d118      	bne.n	8005400 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	e013      	b.n	8005412 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	461a      	mov	r2, r3
 80053f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e008      	b.n	8005412 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	461a      	mov	r2, r3
 8005432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	3301      	adds	r3, #1
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d3b7      	bcc.n	80053b6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e043      	b.n	80054d4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800545e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005462:	d118      	bne.n	8005496 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e013      	b.n	80054a8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e008      	b.n	80054a8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	461a      	mov	r2, r3
 80054c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3301      	adds	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d3b7      	bcc.n	800544c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f043 0210 	orr.w	r2, r3, #16
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <USB_DevInit+0x2d4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f043 0208 	orr.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800552e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d105      	bne.n	8005540 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <USB_DevInit+0x2d8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800554c:	b004      	add	sp, #16
 800554e:	4770      	bx	lr
 8005550:	803c3800 	.word	0x803c3800
 8005554:	40000004 	.word	0x40000004

08005558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	019b      	lsls	r3, r3, #6
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3301      	adds	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <USB_FlushTxFifo+0x48>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d901      	bls.n	8005584 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e006      	b.n	8005592 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d0f0      	beq.n	8005572 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	00030d40 	.word	0x00030d40

080055a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2210      	movs	r2, #16
 80055b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <USB_FlushRxFifo+0x40>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d0f0      	beq.n	80055b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	00030d40 	.word	0x00030d40

080055e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005634:	f043 0302 	orr.w	r3, r3, #2
 8005638:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800563a:	2003      	movs	r0, #3
 800563c:	f7fc f850 	bl	80016e0 <HAL_Delay>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <USB_CoreReset+0x64>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e01b      	b.n	80056a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	daf2      	bge.n	8005658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <USB_CoreReset+0x64>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d901      	bls.n	8005694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e006      	b.n	80056a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d0f0      	beq.n	8005682 <USB_CoreReset+0x36>

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	00030d40 	.word	0x00030d40

080056b4 <__errno>:
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <__errno+0x8>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <__libc_init_array>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	4e0d      	ldr	r6, [pc, #52]	; (80056f8 <__libc_init_array+0x38>)
 80056c4:	4c0d      	ldr	r4, [pc, #52]	; (80056fc <__libc_init_array+0x3c>)
 80056c6:	1ba4      	subs	r4, r4, r6
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	2500      	movs	r5, #0
 80056cc:	42a5      	cmp	r5, r4
 80056ce:	d109      	bne.n	80056e4 <__libc_init_array+0x24>
 80056d0:	4e0b      	ldr	r6, [pc, #44]	; (8005700 <__libc_init_array+0x40>)
 80056d2:	4c0c      	ldr	r4, [pc, #48]	; (8005704 <__libc_init_array+0x44>)
 80056d4:	f000 fc26 	bl	8005f24 <_init>
 80056d8:	1ba4      	subs	r4, r4, r6
 80056da:	10a4      	asrs	r4, r4, #2
 80056dc:	2500      	movs	r5, #0
 80056de:	42a5      	cmp	r5, r4
 80056e0:	d105      	bne.n	80056ee <__libc_init_array+0x2e>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056e8:	4798      	blx	r3
 80056ea:	3501      	adds	r5, #1
 80056ec:	e7ee      	b.n	80056cc <__libc_init_array+0xc>
 80056ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056f2:	4798      	blx	r3
 80056f4:	3501      	adds	r5, #1
 80056f6:	e7f2      	b.n	80056de <__libc_init_array+0x1e>
 80056f8:	08005fb0 	.word	0x08005fb0
 80056fc:	08005fb0 	.word	0x08005fb0
 8005700:	08005fb0 	.word	0x08005fb0
 8005704:	08005fb4 	.word	0x08005fb4

08005708 <memset>:
 8005708:	4402      	add	r2, r0
 800570a:	4603      	mov	r3, r0
 800570c:	4293      	cmp	r3, r2
 800570e:	d100      	bne.n	8005712 <memset+0xa>
 8005710:	4770      	bx	lr
 8005712:	f803 1b01 	strb.w	r1, [r3], #1
 8005716:	e7f9      	b.n	800570c <memset+0x4>

08005718 <_free_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4605      	mov	r5, r0
 800571c:	2900      	cmp	r1, #0
 800571e:	d045      	beq.n	80057ac <_free_r+0x94>
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f0c      	subs	r4, r1, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	18e4      	addlt	r4, r4, r3
 800572c:	f000 f8cc 	bl	80058c8 <__malloc_lock>
 8005730:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <_free_r+0x98>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	4610      	mov	r0, r2
 8005736:	b933      	cbnz	r3, 8005746 <_free_r+0x2e>
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	6014      	str	r4, [r2, #0]
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005742:	f000 b8c2 	b.w	80058ca <__malloc_unlock>
 8005746:	42a3      	cmp	r3, r4
 8005748:	d90c      	bls.n	8005764 <_free_r+0x4c>
 800574a:	6821      	ldr	r1, [r4, #0]
 800574c:	1862      	adds	r2, r4, r1
 800574e:	4293      	cmp	r3, r2
 8005750:	bf04      	itt	eq
 8005752:	681a      	ldreq	r2, [r3, #0]
 8005754:	685b      	ldreq	r3, [r3, #4]
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	bf04      	itt	eq
 800575a:	1852      	addeq	r2, r2, r1
 800575c:	6022      	streq	r2, [r4, #0]
 800575e:	6004      	str	r4, [r0, #0]
 8005760:	e7ec      	b.n	800573c <_free_r+0x24>
 8005762:	4613      	mov	r3, r2
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	b10a      	cbz	r2, 800576c <_free_r+0x54>
 8005768:	42a2      	cmp	r2, r4
 800576a:	d9fa      	bls.n	8005762 <_free_r+0x4a>
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	1858      	adds	r0, r3, r1
 8005770:	42a0      	cmp	r0, r4
 8005772:	d10b      	bne.n	800578c <_free_r+0x74>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	4401      	add	r1, r0
 8005778:	1858      	adds	r0, r3, r1
 800577a:	4282      	cmp	r2, r0
 800577c:	6019      	str	r1, [r3, #0]
 800577e:	d1dd      	bne.n	800573c <_free_r+0x24>
 8005780:	6810      	ldr	r0, [r2, #0]
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	4401      	add	r1, r0
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	e7d7      	b.n	800573c <_free_r+0x24>
 800578c:	d902      	bls.n	8005794 <_free_r+0x7c>
 800578e:	230c      	movs	r3, #12
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	e7d3      	b.n	800573c <_free_r+0x24>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	1821      	adds	r1, r4, r0
 8005798:	428a      	cmp	r2, r1
 800579a:	bf04      	itt	eq
 800579c:	6811      	ldreq	r1, [r2, #0]
 800579e:	6852      	ldreq	r2, [r2, #4]
 80057a0:	6062      	str	r2, [r4, #4]
 80057a2:	bf04      	itt	eq
 80057a4:	1809      	addeq	r1, r1, r0
 80057a6:	6021      	streq	r1, [r4, #0]
 80057a8:	605c      	str	r4, [r3, #4]
 80057aa:	e7c7      	b.n	800573c <_free_r+0x24>
 80057ac:	bd38      	pop	{r3, r4, r5, pc}
 80057ae:	bf00      	nop
 80057b0:	200000ac 	.word	0x200000ac

080057b4 <_malloc_r>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	1ccd      	adds	r5, r1, #3
 80057b8:	f025 0503 	bic.w	r5, r5, #3
 80057bc:	3508      	adds	r5, #8
 80057be:	2d0c      	cmp	r5, #12
 80057c0:	bf38      	it	cc
 80057c2:	250c      	movcc	r5, #12
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	4606      	mov	r6, r0
 80057c8:	db01      	blt.n	80057ce <_malloc_r+0x1a>
 80057ca:	42a9      	cmp	r1, r5
 80057cc:	d903      	bls.n	80057d6 <_malloc_r+0x22>
 80057ce:	230c      	movs	r3, #12
 80057d0:	6033      	str	r3, [r6, #0]
 80057d2:	2000      	movs	r0, #0
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	f000 f877 	bl	80058c8 <__malloc_lock>
 80057da:	4a21      	ldr	r2, [pc, #132]	; (8005860 <_malloc_r+0xac>)
 80057dc:	6814      	ldr	r4, [r2, #0]
 80057de:	4621      	mov	r1, r4
 80057e0:	b991      	cbnz	r1, 8005808 <_malloc_r+0x54>
 80057e2:	4c20      	ldr	r4, [pc, #128]	; (8005864 <_malloc_r+0xb0>)
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	b91b      	cbnz	r3, 80057f0 <_malloc_r+0x3c>
 80057e8:	4630      	mov	r0, r6
 80057ea:	f000 f83d 	bl	8005868 <_sbrk_r>
 80057ee:	6020      	str	r0, [r4, #0]
 80057f0:	4629      	mov	r1, r5
 80057f2:	4630      	mov	r0, r6
 80057f4:	f000 f838 	bl	8005868 <_sbrk_r>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d124      	bne.n	8005846 <_malloc_r+0x92>
 80057fc:	230c      	movs	r3, #12
 80057fe:	6033      	str	r3, [r6, #0]
 8005800:	4630      	mov	r0, r6
 8005802:	f000 f862 	bl	80058ca <__malloc_unlock>
 8005806:	e7e4      	b.n	80057d2 <_malloc_r+0x1e>
 8005808:	680b      	ldr	r3, [r1, #0]
 800580a:	1b5b      	subs	r3, r3, r5
 800580c:	d418      	bmi.n	8005840 <_malloc_r+0x8c>
 800580e:	2b0b      	cmp	r3, #11
 8005810:	d90f      	bls.n	8005832 <_malloc_r+0x7e>
 8005812:	600b      	str	r3, [r1, #0]
 8005814:	50cd      	str	r5, [r1, r3]
 8005816:	18cc      	adds	r4, r1, r3
 8005818:	4630      	mov	r0, r6
 800581a:	f000 f856 	bl	80058ca <__malloc_unlock>
 800581e:	f104 000b 	add.w	r0, r4, #11
 8005822:	1d23      	adds	r3, r4, #4
 8005824:	f020 0007 	bic.w	r0, r0, #7
 8005828:	1ac3      	subs	r3, r0, r3
 800582a:	d0d3      	beq.n	80057d4 <_malloc_r+0x20>
 800582c:	425a      	negs	r2, r3
 800582e:	50e2      	str	r2, [r4, r3]
 8005830:	e7d0      	b.n	80057d4 <_malloc_r+0x20>
 8005832:	428c      	cmp	r4, r1
 8005834:	684b      	ldr	r3, [r1, #4]
 8005836:	bf16      	itet	ne
 8005838:	6063      	strne	r3, [r4, #4]
 800583a:	6013      	streq	r3, [r2, #0]
 800583c:	460c      	movne	r4, r1
 800583e:	e7eb      	b.n	8005818 <_malloc_r+0x64>
 8005840:	460c      	mov	r4, r1
 8005842:	6849      	ldr	r1, [r1, #4]
 8005844:	e7cc      	b.n	80057e0 <_malloc_r+0x2c>
 8005846:	1cc4      	adds	r4, r0, #3
 8005848:	f024 0403 	bic.w	r4, r4, #3
 800584c:	42a0      	cmp	r0, r4
 800584e:	d005      	beq.n	800585c <_malloc_r+0xa8>
 8005850:	1a21      	subs	r1, r4, r0
 8005852:	4630      	mov	r0, r6
 8005854:	f000 f808 	bl	8005868 <_sbrk_r>
 8005858:	3001      	adds	r0, #1
 800585a:	d0cf      	beq.n	80057fc <_malloc_r+0x48>
 800585c:	6025      	str	r5, [r4, #0]
 800585e:	e7db      	b.n	8005818 <_malloc_r+0x64>
 8005860:	200000ac 	.word	0x200000ac
 8005864:	200000b0 	.word	0x200000b0

08005868 <_sbrk_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4c06      	ldr	r4, [pc, #24]	; (8005884 <_sbrk_r+0x1c>)
 800586c:	2300      	movs	r3, #0
 800586e:	4605      	mov	r5, r0
 8005870:	4608      	mov	r0, r1
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	f7fb fc16 	bl	80010a4 <_sbrk>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_sbrk_r+0x1a>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	b103      	cbz	r3, 8005882 <_sbrk_r+0x1a>
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	200006bc 	.word	0x200006bc

08005888 <siprintf>:
 8005888:	b40e      	push	{r1, r2, r3}
 800588a:	b500      	push	{lr}
 800588c:	b09c      	sub	sp, #112	; 0x70
 800588e:	ab1d      	add	r3, sp, #116	; 0x74
 8005890:	9002      	str	r0, [sp, #8]
 8005892:	9006      	str	r0, [sp, #24]
 8005894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005898:	4809      	ldr	r0, [pc, #36]	; (80058c0 <siprintf+0x38>)
 800589a:	9107      	str	r1, [sp, #28]
 800589c:	9104      	str	r1, [sp, #16]
 800589e:	4909      	ldr	r1, [pc, #36]	; (80058c4 <siprintf+0x3c>)
 80058a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a4:	9105      	str	r1, [sp, #20]
 80058a6:	6800      	ldr	r0, [r0, #0]
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	a902      	add	r1, sp, #8
 80058ac:	f000 f868 	bl	8005980 <_svfiprintf_r>
 80058b0:	9b02      	ldr	r3, [sp, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	b01c      	add	sp, #112	; 0x70
 80058b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058bc:	b003      	add	sp, #12
 80058be:	4770      	bx	lr
 80058c0:	2000000c 	.word	0x2000000c
 80058c4:	ffff0208 	.word	0xffff0208

080058c8 <__malloc_lock>:
 80058c8:	4770      	bx	lr

080058ca <__malloc_unlock>:
 80058ca:	4770      	bx	lr

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	429e      	cmp	r6, r3
 80058d4:	4682      	mov	sl, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	4690      	mov	r8, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	d837      	bhi.n	800594e <__ssputs_r+0x82>
 80058de:	898a      	ldrh	r2, [r1, #12]
 80058e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e4:	d031      	beq.n	800594a <__ssputs_r+0x7e>
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	6909      	ldr	r1, [r1, #16]
 80058ea:	1a6f      	subs	r7, r5, r1
 80058ec:	6965      	ldr	r5, [r4, #20]
 80058ee:	2302      	movs	r3, #2
 80058f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80058f8:	f109 0301 	add.w	r3, r9, #1
 80058fc:	443b      	add	r3, r7
 80058fe:	429d      	cmp	r5, r3
 8005900:	bf38      	it	cc
 8005902:	461d      	movcc	r5, r3
 8005904:	0553      	lsls	r3, r2, #21
 8005906:	d530      	bpl.n	800596a <__ssputs_r+0x9e>
 8005908:	4629      	mov	r1, r5
 800590a:	f7ff ff53 	bl	80057b4 <_malloc_r>
 800590e:	4606      	mov	r6, r0
 8005910:	b950      	cbnz	r0, 8005928 <__ssputs_r+0x5c>
 8005912:	230c      	movs	r3, #12
 8005914:	f8ca 3000 	str.w	r3, [sl]
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005928:	463a      	mov	r2, r7
 800592a:	6921      	ldr	r1, [r4, #16]
 800592c:	f000 faa8 	bl	8005e80 <memcpy>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	6126      	str	r6, [r4, #16]
 800593e:	6165      	str	r5, [r4, #20]
 8005940:	443e      	add	r6, r7
 8005942:	1bed      	subs	r5, r5, r7
 8005944:	6026      	str	r6, [r4, #0]
 8005946:	60a5      	str	r5, [r4, #8]
 8005948:	464e      	mov	r6, r9
 800594a:	454e      	cmp	r6, r9
 800594c:	d900      	bls.n	8005950 <__ssputs_r+0x84>
 800594e:	464e      	mov	r6, r9
 8005950:	4632      	mov	r2, r6
 8005952:	4641      	mov	r1, r8
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	f000 fa9e 	bl	8005e96 <memmove>
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	1b9b      	subs	r3, r3, r6
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	441e      	add	r6, r3
 8005964:	6026      	str	r6, [r4, #0]
 8005966:	2000      	movs	r0, #0
 8005968:	e7dc      	b.n	8005924 <__ssputs_r+0x58>
 800596a:	462a      	mov	r2, r5
 800596c:	f000 faac 	bl	8005ec8 <_realloc_r>
 8005970:	4606      	mov	r6, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d1e2      	bne.n	800593c <__ssputs_r+0x70>
 8005976:	6921      	ldr	r1, [r4, #16]
 8005978:	4650      	mov	r0, sl
 800597a:	f7ff fecd 	bl	8005718 <_free_r>
 800597e:	e7c8      	b.n	8005912 <__ssputs_r+0x46>

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	461d      	mov	r5, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061f      	lsls	r7, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4680      	mov	r8, r0
 800598e:	460c      	mov	r4, r1
 8005990:	4616      	mov	r6, r2
 8005992:	d50f      	bpl.n	80059b4 <_svfiprintf_r+0x34>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b96b      	cbnz	r3, 80059b4 <_svfiprintf_r+0x34>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f7ff ff0b 	bl	80057b4 <_malloc_r>
 800599e:	6020      	str	r0, [r4, #0]
 80059a0:	6120      	str	r0, [r4, #16]
 80059a2:	b928      	cbnz	r0, 80059b0 <_svfiprintf_r+0x30>
 80059a4:	230c      	movs	r3, #12
 80059a6:	f8c8 3000 	str.w	r3, [r8]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	e0c8      	b.n	8005b42 <_svfiprintf_r+0x1c2>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9309      	str	r3, [sp, #36]	; 0x24
 80059b8:	2320      	movs	r3, #32
 80059ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059be:	2330      	movs	r3, #48	; 0x30
 80059c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059c4:	9503      	str	r5, [sp, #12]
 80059c6:	f04f 0b01 	mov.w	fp, #1
 80059ca:	4637      	mov	r7, r6
 80059cc:	463d      	mov	r5, r7
 80059ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059d2:	b10b      	cbz	r3, 80059d8 <_svfiprintf_r+0x58>
 80059d4:	2b25      	cmp	r3, #37	; 0x25
 80059d6:	d13e      	bne.n	8005a56 <_svfiprintf_r+0xd6>
 80059d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80059dc:	d00b      	beq.n	80059f6 <_svfiprintf_r+0x76>
 80059de:	4653      	mov	r3, sl
 80059e0:	4632      	mov	r2, r6
 80059e2:	4621      	mov	r1, r4
 80059e4:	4640      	mov	r0, r8
 80059e6:	f7ff ff71 	bl	80058cc <__ssputs_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	f000 80a4 	beq.w	8005b38 <_svfiprintf_r+0x1b8>
 80059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f2:	4453      	add	r3, sl
 80059f4:	9309      	str	r3, [sp, #36]	; 0x24
 80059f6:	783b      	ldrb	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 809d 	beq.w	8005b38 <_svfiprintf_r+0x1b8>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a10:	931a      	str	r3, [sp, #104]	; 0x68
 8005a12:	462f      	mov	r7, r5
 8005a14:	2205      	movs	r2, #5
 8005a16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a1a:	4850      	ldr	r0, [pc, #320]	; (8005b5c <_svfiprintf_r+0x1dc>)
 8005a1c:	f7fa fc18 	bl	8000250 <memchr>
 8005a20:	9b04      	ldr	r3, [sp, #16]
 8005a22:	b9d0      	cbnz	r0, 8005a5a <_svfiprintf_r+0xda>
 8005a24:	06d9      	lsls	r1, r3, #27
 8005a26:	bf44      	itt	mi
 8005a28:	2220      	movmi	r2, #32
 8005a2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a2e:	071a      	lsls	r2, r3, #28
 8005a30:	bf44      	itt	mi
 8005a32:	222b      	movmi	r2, #43	; 0x2b
 8005a34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a38:	782a      	ldrb	r2, [r5, #0]
 8005a3a:	2a2a      	cmp	r2, #42	; 0x2a
 8005a3c:	d015      	beq.n	8005a6a <_svfiprintf_r+0xea>
 8005a3e:	9a07      	ldr	r2, [sp, #28]
 8005a40:	462f      	mov	r7, r5
 8005a42:	2000      	movs	r0, #0
 8005a44:	250a      	movs	r5, #10
 8005a46:	4639      	mov	r1, r7
 8005a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4c:	3b30      	subs	r3, #48	; 0x30
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d94d      	bls.n	8005aee <_svfiprintf_r+0x16e>
 8005a52:	b1b8      	cbz	r0, 8005a84 <_svfiprintf_r+0x104>
 8005a54:	e00f      	b.n	8005a76 <_svfiprintf_r+0xf6>
 8005a56:	462f      	mov	r7, r5
 8005a58:	e7b8      	b.n	80059cc <_svfiprintf_r+0x4c>
 8005a5a:	4a40      	ldr	r2, [pc, #256]	; (8005b5c <_svfiprintf_r+0x1dc>)
 8005a5c:	1a80      	subs	r0, r0, r2
 8005a5e:	fa0b f000 	lsl.w	r0, fp, r0
 8005a62:	4318      	orrs	r0, r3
 8005a64:	9004      	str	r0, [sp, #16]
 8005a66:	463d      	mov	r5, r7
 8005a68:	e7d3      	b.n	8005a12 <_svfiprintf_r+0x92>
 8005a6a:	9a03      	ldr	r2, [sp, #12]
 8005a6c:	1d11      	adds	r1, r2, #4
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	9103      	str	r1, [sp, #12]
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	db01      	blt.n	8005a7a <_svfiprintf_r+0xfa>
 8005a76:	9207      	str	r2, [sp, #28]
 8005a78:	e004      	b.n	8005a84 <_svfiprintf_r+0x104>
 8005a7a:	4252      	negs	r2, r2
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	783b      	ldrb	r3, [r7, #0]
 8005a86:	2b2e      	cmp	r3, #46	; 0x2e
 8005a88:	d10c      	bne.n	8005aa4 <_svfiprintf_r+0x124>
 8005a8a:	787b      	ldrb	r3, [r7, #1]
 8005a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8e:	d133      	bne.n	8005af8 <_svfiprintf_r+0x178>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9203      	str	r2, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aa0:	3702      	adds	r7, #2
 8005aa2:	9305      	str	r3, [sp, #20]
 8005aa4:	4d2e      	ldr	r5, [pc, #184]	; (8005b60 <_svfiprintf_r+0x1e0>)
 8005aa6:	7839      	ldrb	r1, [r7, #0]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fbd0 	bl	8000250 <memchr>
 8005ab0:	b138      	cbz	r0, 8005ac2 <_svfiprintf_r+0x142>
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	1b40      	subs	r0, r0, r5
 8005ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aba:	9b04      	ldr	r3, [sp, #16]
 8005abc:	4303      	orrs	r3, r0
 8005abe:	3701      	adds	r7, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	7839      	ldrb	r1, [r7, #0]
 8005ac4:	4827      	ldr	r0, [pc, #156]	; (8005b64 <_svfiprintf_r+0x1e4>)
 8005ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aca:	2206      	movs	r2, #6
 8005acc:	1c7e      	adds	r6, r7, #1
 8005ace:	f7fa fbbf 	bl	8000250 <memchr>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d038      	beq.n	8005b48 <_svfiprintf_r+0x1c8>
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <_svfiprintf_r+0x1e8>)
 8005ad8:	bb13      	cbnz	r3, 8005b20 <_svfiprintf_r+0x1a0>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	3307      	adds	r3, #7
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	444b      	add	r3, r9
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	e76d      	b.n	80059ca <_svfiprintf_r+0x4a>
 8005aee:	fb05 3202 	mla	r2, r5, r2, r3
 8005af2:	2001      	movs	r0, #1
 8005af4:	460f      	mov	r7, r1
 8005af6:	e7a6      	b.n	8005a46 <_svfiprintf_r+0xc6>
 8005af8:	2300      	movs	r3, #0
 8005afa:	3701      	adds	r7, #1
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	4619      	mov	r1, r3
 8005b00:	250a      	movs	r5, #10
 8005b02:	4638      	mov	r0, r7
 8005b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b08:	3a30      	subs	r2, #48	; 0x30
 8005b0a:	2a09      	cmp	r2, #9
 8005b0c:	d903      	bls.n	8005b16 <_svfiprintf_r+0x196>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c8      	beq.n	8005aa4 <_svfiprintf_r+0x124>
 8005b12:	9105      	str	r1, [sp, #20]
 8005b14:	e7c6      	b.n	8005aa4 <_svfiprintf_r+0x124>
 8005b16:	fb05 2101 	mla	r1, r5, r1, r2
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	e7f0      	b.n	8005b02 <_svfiprintf_r+0x182>
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4622      	mov	r2, r4
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005b28:	a904      	add	r1, sp, #16
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f3af 8000 	nop.w
 8005b30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b34:	4681      	mov	r9, r0
 8005b36:	d1d6      	bne.n	8005ae6 <_svfiprintf_r+0x166>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	065b      	lsls	r3, r3, #25
 8005b3c:	f53f af35 	bmi.w	80059aa <_svfiprintf_r+0x2a>
 8005b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b42:	b01d      	add	sp, #116	; 0x74
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005b50:	a904      	add	r1, sp, #16
 8005b52:	4640      	mov	r0, r8
 8005b54:	f000 f882 	bl	8005c5c <_printf_i>
 8005b58:	e7ea      	b.n	8005b30 <_svfiprintf_r+0x1b0>
 8005b5a:	bf00      	nop
 8005b5c:	08005f74 	.word	0x08005f74
 8005b60:	08005f7a 	.word	0x08005f7a
 8005b64:	08005f7e 	.word	0x08005f7e
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	080058cd 	.word	0x080058cd

08005b70 <_printf_common>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	4691      	mov	r9, r2
 8005b76:	461f      	mov	r7, r3
 8005b78:	688a      	ldr	r2, [r1, #8]
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bfb8      	it	lt
 8005b84:	4613      	movlt	r3, r2
 8005b86:	f8c9 3000 	str.w	r3, [r9]
 8005b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b8e:	4606      	mov	r6, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	b112      	cbz	r2, 8005b9a <_printf_common+0x2a>
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c9 3000 	str.w	r3, [r9]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	0699      	lsls	r1, r3, #26
 8005b9e:	bf42      	ittt	mi
 8005ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ba4:	3302      	addmi	r3, #2
 8005ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8005baa:	6825      	ldr	r5, [r4, #0]
 8005bac:	f015 0506 	ands.w	r5, r5, #6
 8005bb0:	d107      	bne.n	8005bc2 <_printf_common+0x52>
 8005bb2:	f104 0a19 	add.w	sl, r4, #25
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	42ab      	cmp	r3, r5
 8005bc0:	dc28      	bgt.n	8005c14 <_printf_common+0xa4>
 8005bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	3300      	adds	r3, #0
 8005bca:	bf18      	it	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	0692      	lsls	r2, r2, #26
 8005bd0:	d42d      	bmi.n	8005c2e <_printf_common+0xbe>
 8005bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	4630      	mov	r0, r6
 8005bda:	47c0      	blx	r8
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d020      	beq.n	8005c22 <_printf_common+0xb2>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	68e5      	ldr	r5, [r4, #12]
 8005be4:	f8d9 2000 	ldr.w	r2, [r9]
 8005be8:	f003 0306 	and.w	r3, r3, #6
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	bf08      	it	eq
 8005bf0:	1aad      	subeq	r5, r5, r2
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	6922      	ldr	r2, [r4, #16]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	f04f 0900 	mov.w	r9, #0
 8005c0a:	341a      	adds	r4, #26
 8005c0c:	454d      	cmp	r5, r9
 8005c0e:	d11a      	bne.n	8005c46 <_printf_common+0xd6>
 8005c10:	2000      	movs	r0, #0
 8005c12:	e008      	b.n	8005c26 <_printf_common+0xb6>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4652      	mov	r2, sl
 8005c18:	4639      	mov	r1, r7
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	47c0      	blx	r8
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d103      	bne.n	8005c2a <_printf_common+0xba>
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2a:	3501      	adds	r5, #1
 8005c2c:	e7c3      	b.n	8005bb6 <_printf_common+0x46>
 8005c2e:	18e1      	adds	r1, r4, r3
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	2030      	movs	r0, #48	; 0x30
 8005c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c38:	4422      	add	r2, r4
 8005c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c42:	3302      	adds	r3, #2
 8005c44:	e7c5      	b.n	8005bd2 <_printf_common+0x62>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	47c0      	blx	r8
 8005c50:	3001      	adds	r0, #1
 8005c52:	d0e6      	beq.n	8005c22 <_printf_common+0xb2>
 8005c54:	f109 0901 	add.w	r9, r9, #1
 8005c58:	e7d8      	b.n	8005c0c <_printf_common+0x9c>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c64:	460c      	mov	r4, r1
 8005c66:	7e09      	ldrb	r1, [r1, #24]
 8005c68:	b085      	sub	sp, #20
 8005c6a:	296e      	cmp	r1, #110	; 0x6e
 8005c6c:	4617      	mov	r7, r2
 8005c6e:	4606      	mov	r6, r0
 8005c70:	4698      	mov	r8, r3
 8005c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c74:	f000 80b3 	beq.w	8005dde <_printf_i+0x182>
 8005c78:	d822      	bhi.n	8005cc0 <_printf_i+0x64>
 8005c7a:	2963      	cmp	r1, #99	; 0x63
 8005c7c:	d036      	beq.n	8005cec <_printf_i+0x90>
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x3a>
 8005c80:	2900      	cmp	r1, #0
 8005c82:	f000 80b9 	beq.w	8005df8 <_printf_i+0x19c>
 8005c86:	2958      	cmp	r1, #88	; 0x58
 8005c88:	f000 8083 	beq.w	8005d92 <_printf_i+0x136>
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c94:	e032      	b.n	8005cfc <_printf_i+0xa0>
 8005c96:	2964      	cmp	r1, #100	; 0x64
 8005c98:	d001      	beq.n	8005c9e <_printf_i+0x42>
 8005c9a:	2969      	cmp	r1, #105	; 0x69
 8005c9c:	d1f6      	bne.n	8005c8c <_printf_i+0x30>
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	0605      	lsls	r5, r0, #24
 8005ca4:	f103 0104 	add.w	r1, r3, #4
 8005ca8:	d52a      	bpl.n	8005d00 <_printf_i+0xa4>
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da03      	bge.n	8005cba <_printf_i+0x5e>
 8005cb2:	222d      	movs	r2, #45	; 0x2d
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cba:	486f      	ldr	r0, [pc, #444]	; (8005e78 <_printf_i+0x21c>)
 8005cbc:	220a      	movs	r2, #10
 8005cbe:	e039      	b.n	8005d34 <_printf_i+0xd8>
 8005cc0:	2973      	cmp	r1, #115	; 0x73
 8005cc2:	f000 809d 	beq.w	8005e00 <_printf_i+0x1a4>
 8005cc6:	d808      	bhi.n	8005cda <_printf_i+0x7e>
 8005cc8:	296f      	cmp	r1, #111	; 0x6f
 8005cca:	d020      	beq.n	8005d0e <_printf_i+0xb2>
 8005ccc:	2970      	cmp	r1, #112	; 0x70
 8005cce:	d1dd      	bne.n	8005c8c <_printf_i+0x30>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	f043 0320 	orr.w	r3, r3, #32
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	e003      	b.n	8005ce2 <_printf_i+0x86>
 8005cda:	2975      	cmp	r1, #117	; 0x75
 8005cdc:	d017      	beq.n	8005d0e <_printf_i+0xb2>
 8005cde:	2978      	cmp	r1, #120	; 0x78
 8005ce0:	d1d4      	bne.n	8005c8c <_printf_i+0x30>
 8005ce2:	2378      	movs	r3, #120	; 0x78
 8005ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ce8:	4864      	ldr	r0, [pc, #400]	; (8005e7c <_printf_i+0x220>)
 8005cea:	e055      	b.n	8005d98 <_printf_i+0x13c>
 8005cec:	6813      	ldr	r3, [r2, #0]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6011      	str	r1, [r2, #0]
 8005cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e08c      	b.n	8005e1a <_printf_i+0x1be>
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6011      	str	r1, [r2, #0]
 8005d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d08:	bf18      	it	ne
 8005d0a:	b21b      	sxthne	r3, r3
 8005d0c:	e7cf      	b.n	8005cae <_printf_i+0x52>
 8005d0e:	6813      	ldr	r3, [r2, #0]
 8005d10:	6825      	ldr	r5, [r4, #0]
 8005d12:	1d18      	adds	r0, r3, #4
 8005d14:	6010      	str	r0, [r2, #0]
 8005d16:	0628      	lsls	r0, r5, #24
 8005d18:	d501      	bpl.n	8005d1e <_printf_i+0xc2>
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	e002      	b.n	8005d24 <_printf_i+0xc8>
 8005d1e:	0668      	lsls	r0, r5, #25
 8005d20:	d5fb      	bpl.n	8005d1a <_printf_i+0xbe>
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	4854      	ldr	r0, [pc, #336]	; (8005e78 <_printf_i+0x21c>)
 8005d26:	296f      	cmp	r1, #111	; 0x6f
 8005d28:	bf14      	ite	ne
 8005d2a:	220a      	movne	r2, #10
 8005d2c:	2208      	moveq	r2, #8
 8005d2e:	2100      	movs	r1, #0
 8005d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d34:	6865      	ldr	r5, [r4, #4]
 8005d36:	60a5      	str	r5, [r4, #8]
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	f2c0 8095 	blt.w	8005e68 <_printf_i+0x20c>
 8005d3e:	6821      	ldr	r1, [r4, #0]
 8005d40:	f021 0104 	bic.w	r1, r1, #4
 8005d44:	6021      	str	r1, [r4, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d13d      	bne.n	8005dc6 <_printf_i+0x16a>
 8005d4a:	2d00      	cmp	r5, #0
 8005d4c:	f040 808e 	bne.w	8005e6c <_printf_i+0x210>
 8005d50:	4665      	mov	r5, ip
 8005d52:	2a08      	cmp	r2, #8
 8005d54:	d10b      	bne.n	8005d6e <_printf_i+0x112>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	07db      	lsls	r3, r3, #31
 8005d5a:	d508      	bpl.n	8005d6e <_printf_i+0x112>
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	6862      	ldr	r2, [r4, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	bfde      	ittt	le
 8005d64:	2330      	movle	r3, #48	; 0x30
 8005d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d6e:	ebac 0305 	sub.w	r3, ip, r5
 8005d72:	6123      	str	r3, [r4, #16]
 8005d74:	f8cd 8000 	str.w	r8, [sp]
 8005d78:	463b      	mov	r3, r7
 8005d7a:	aa03      	add	r2, sp, #12
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff fef6 	bl	8005b70 <_printf_common>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d14d      	bne.n	8005e24 <_printf_i+0x1c8>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	b005      	add	sp, #20
 8005d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d92:	4839      	ldr	r0, [pc, #228]	; (8005e78 <_printf_i+0x21c>)
 8005d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	1d1d      	adds	r5, r3, #4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6015      	str	r5, [r2, #0]
 8005da2:	060a      	lsls	r2, r1, #24
 8005da4:	d50b      	bpl.n	8005dbe <_printf_i+0x162>
 8005da6:	07ca      	lsls	r2, r1, #31
 8005da8:	bf44      	itt	mi
 8005daa:	f041 0120 	orrmi.w	r1, r1, #32
 8005dae:	6021      	strmi	r1, [r4, #0]
 8005db0:	b91b      	cbnz	r3, 8005dba <_printf_i+0x15e>
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	f022 0220 	bic.w	r2, r2, #32
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	e7b7      	b.n	8005d2e <_printf_i+0xd2>
 8005dbe:	064d      	lsls	r5, r1, #25
 8005dc0:	bf48      	it	mi
 8005dc2:	b29b      	uxthmi	r3, r3
 8005dc4:	e7ef      	b.n	8005da6 <_printf_i+0x14a>
 8005dc6:	4665      	mov	r5, ip
 8005dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8005dd0:	5cc3      	ldrb	r3, [r0, r3]
 8005dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	d1f5      	bne.n	8005dc8 <_printf_i+0x16c>
 8005ddc:	e7b9      	b.n	8005d52 <_printf_i+0xf6>
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	6825      	ldr	r5, [r4, #0]
 8005de2:	6961      	ldr	r1, [r4, #20]
 8005de4:	1d18      	adds	r0, r3, #4
 8005de6:	6010      	str	r0, [r2, #0]
 8005de8:	0628      	lsls	r0, r5, #24
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	d501      	bpl.n	8005df2 <_printf_i+0x196>
 8005dee:	6019      	str	r1, [r3, #0]
 8005df0:	e002      	b.n	8005df8 <_printf_i+0x19c>
 8005df2:	066a      	lsls	r2, r5, #25
 8005df4:	d5fb      	bpl.n	8005dee <_printf_i+0x192>
 8005df6:	8019      	strh	r1, [r3, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	4665      	mov	r5, ip
 8005dfe:	e7b9      	b.n	8005d74 <_printf_i+0x118>
 8005e00:	6813      	ldr	r3, [r2, #0]
 8005e02:	1d19      	adds	r1, r3, #4
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	681d      	ldr	r5, [r3, #0]
 8005e08:	6862      	ldr	r2, [r4, #4]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f7fa fa1f 	bl	8000250 <memchr>
 8005e12:	b108      	cbz	r0, 8005e18 <_printf_i+0x1bc>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	6060      	str	r0, [r4, #4]
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e22:	e7a7      	b.n	8005d74 <_printf_i+0x118>
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	462a      	mov	r2, r5
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0aa      	beq.n	8005d88 <_printf_i+0x12c>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d413      	bmi.n	8005e60 <_printf_i+0x204>
 8005e38:	68e0      	ldr	r0, [r4, #12]
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	4298      	cmp	r0, r3
 8005e3e:	bfb8      	it	lt
 8005e40:	4618      	movlt	r0, r3
 8005e42:	e7a3      	b.n	8005d8c <_printf_i+0x130>
 8005e44:	2301      	movs	r3, #1
 8005e46:	464a      	mov	r2, r9
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	47c0      	blx	r8
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d09a      	beq.n	8005d88 <_printf_i+0x12c>
 8005e52:	3501      	adds	r5, #1
 8005e54:	68e3      	ldr	r3, [r4, #12]
 8005e56:	9a03      	ldr	r2, [sp, #12]
 8005e58:	1a9b      	subs	r3, r3, r2
 8005e5a:	42ab      	cmp	r3, r5
 8005e5c:	dcf2      	bgt.n	8005e44 <_printf_i+0x1e8>
 8005e5e:	e7eb      	b.n	8005e38 <_printf_i+0x1dc>
 8005e60:	2500      	movs	r5, #0
 8005e62:	f104 0919 	add.w	r9, r4, #25
 8005e66:	e7f5      	b.n	8005e54 <_printf_i+0x1f8>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ac      	bne.n	8005dc6 <_printf_i+0x16a>
 8005e6c:	7803      	ldrb	r3, [r0, #0]
 8005e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e76:	e76c      	b.n	8005d52 <_printf_i+0xf6>
 8005e78:	08005f85 	.word	0x08005f85
 8005e7c:	08005f96 	.word	0x08005f96

08005e80 <memcpy>:
 8005e80:	b510      	push	{r4, lr}
 8005e82:	1e43      	subs	r3, r0, #1
 8005e84:	440a      	add	r2, r1
 8005e86:	4291      	cmp	r1, r2
 8005e88:	d100      	bne.n	8005e8c <memcpy+0xc>
 8005e8a:	bd10      	pop	{r4, pc}
 8005e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e94:	e7f7      	b.n	8005e86 <memcpy+0x6>

08005e96 <memmove>:
 8005e96:	4288      	cmp	r0, r1
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	eb01 0302 	add.w	r3, r1, r2
 8005e9e:	d807      	bhi.n	8005eb0 <memmove+0x1a>
 8005ea0:	1e42      	subs	r2, r0, #1
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	d00a      	beq.n	8005ebc <memmove+0x26>
 8005ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eaa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005eae:	e7f8      	b.n	8005ea2 <memmove+0xc>
 8005eb0:	4283      	cmp	r3, r0
 8005eb2:	d9f5      	bls.n	8005ea0 <memmove+0xa>
 8005eb4:	1881      	adds	r1, r0, r2
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	42d3      	cmn	r3, r2
 8005eba:	d100      	bne.n	8005ebe <memmove+0x28>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ec2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ec6:	e7f7      	b.n	8005eb8 <memmove+0x22>

08005ec8 <_realloc_r>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	4607      	mov	r7, r0
 8005ecc:	4614      	mov	r4, r2
 8005ece:	460e      	mov	r6, r1
 8005ed0:	b921      	cbnz	r1, 8005edc <_realloc_r+0x14>
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ed8:	f7ff bc6c 	b.w	80057b4 <_malloc_r>
 8005edc:	b922      	cbnz	r2, 8005ee8 <_realloc_r+0x20>
 8005ede:	f7ff fc1b 	bl	8005718 <_free_r>
 8005ee2:	4625      	mov	r5, r4
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee8:	f000 f814 	bl	8005f14 <_malloc_usable_size_r>
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d20f      	bcs.n	8005f10 <_realloc_r+0x48>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7ff fc5e 	bl	80057b4 <_malloc_r>
 8005ef8:	4605      	mov	r5, r0
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0f2      	beq.n	8005ee4 <_realloc_r+0x1c>
 8005efe:	4631      	mov	r1, r6
 8005f00:	4622      	mov	r2, r4
 8005f02:	f7ff ffbd 	bl	8005e80 <memcpy>
 8005f06:	4631      	mov	r1, r6
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff fc05 	bl	8005718 <_free_r>
 8005f0e:	e7e9      	b.n	8005ee4 <_realloc_r+0x1c>
 8005f10:	4635      	mov	r5, r6
 8005f12:	e7e7      	b.n	8005ee4 <_realloc_r+0x1c>

08005f14 <_malloc_usable_size_r>:
 8005f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f18:	1f18      	subs	r0, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfbc      	itt	lt
 8005f1e:	580b      	ldrlt	r3, [r1, r0]
 8005f20:	18c0      	addlt	r0, r0, r3
 8005f22:	4770      	bx	lr

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr

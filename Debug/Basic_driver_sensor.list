
Basic_driver_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08008300  08008300  00018300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a8  080085a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b0  080085b0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080085b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200001e0  08008794  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  08008794  00020894  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5fe  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038d1  00000000  00000000  0003a808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  0003e0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  0003f558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002beb9  00000000  00000000  00040810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016633  00000000  00000000  0006c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c6f0  00000000  00000000  00082cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f3ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  0018f468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080082e8 	.word	0x080082e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080082e8 	.word	0x080082e8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2201      	movs	r2, #1
 8000620:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f001 f987 	bl	8001964 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 fda4 	bl	80011a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_ADC1_Init+0xa4>)
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000668:	2307      	movs	r3, #7
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f001 fc6b 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 fd94 	bl	80011a8 <Error_Handler>
  }

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000238 	.word	0x20000238
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001
 8000694:	10000012 	.word	0x10000012

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_ADC_MspInit+0x44>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d113      	bne.n	80006d2 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_ADC_MspInit+0x48>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <HAL_ADC_MspInit+0x48>)
 80006b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_ADC_MspInit+0x48>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2012      	movs	r0, #18
 80006c8:	f001 ff69 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006cc:	2012      	movs	r0, #18
 80006ce:	f001 ff82 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40012000 	.word	0x40012000
 80006e0:	40023800 	.word	0x40023800

080006e4 <HC_SR04_Stop_trigger>:
double distanciacm  = 0;
void HC_SR04_Start_trigger(){
	HAL_TIM_Base_Start_IT(&htim7);
	HAL_GPIO_WritePin(TRIG_HC_SR04_GPIO_Port, TRIG_HC_SR04_Pin, GPIO_PIN_SET);
}
void HC_SR04_Stop_trigger(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 80006e8:	4807      	ldr	r0, [pc, #28]	; (8000708 <HC_SR04_Stop_trigger+0x24>)
 80006ea:	f004 f890 	bl	800480e <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(TRIG_HC_SR04_GPIO_Port, TRIG_HC_SR04_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HC_SR04_Stop_trigger+0x28>)
 80006f6:	f002 fd9f 	bl	8003238 <HAL_GPIO_WritePin>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <HC_SR04_Stop_trigger+0x2c>)
 80006fe:	f004 f8dd 	bl	80048bc <HAL_TIM_IC_Start_IT>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200003c8 	.word	0x200003c8
 800070c:	40020c00 	.word	0x40020c00
 8000710:	20000348 	.word	0x20000348
 8000714:	00000000 	.word	0x00000000

08000718 <HC_SR04_get_distance>:
double HC_SR04_get_distance(uint16_t diffCapture){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	frequency = 108* pow(10,6)/ (htim3.Instance->PSC + 1);
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <HC_SR04_get_distance+0xb0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000728:	3301      	adds	r3, #1
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000732:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80007a8 <HC_SR04_get_distance+0x90>
 8000736:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <HC_SR04_get_distance+0xb4>)
 800073c:	ed83 7b00 	vstr	d7, [r3]
	frequency = (float) frequency / diffCapture;
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <HC_SR04_get_distance+0xb4>)
 8000742:	ed93 7b00 	vldr	d7, [r3]
 8000746:	eef7 6bc7 	vcvt.f32.f64	s13, d7
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HC_SR04_get_distance+0xb4>)
 800075e:	ed83 7b00 	vstr	d7, [r3]
	distanciacm = ((1/frequency) * pow(10,6))/58;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HC_SR04_get_distance+0xb4>)
 8000764:	ed93 6b00 	vldr	d6, [r3]
 8000768:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800076c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000770:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80007b0 <HC_SR04_get_distance+0x98>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 80007b8 <HC_SR04_get_distance+0xa0>
 800077c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HC_SR04_get_distance+0xb8>)
 8000782:	ed83 7b00 	vstr	d7, [r3]
	return distanciacm * pow(10,-2);
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HC_SR04_get_distance+0xb8>)
 8000788:	ed93 7b00 	vldr	d7, [r3]
 800078c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80007c0 <HC_SR04_get_distance+0xa8>
 8000790:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 8000794:	eeb0 0b47 	vmov.f64	d0, d7
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	4199bfcc 	.word	0x4199bfcc
 80007b0:	00000000 	.word	0x00000000
 80007b4:	412e8480 	.word	0x412e8480
 80007b8:	00000000 	.word	0x00000000
 80007bc:	404d0000 	.word	0x404d0000
 80007c0:	47ae147b 	.word	0x47ae147b
 80007c4:	3f847ae1 	.word	0x3f847ae1
 80007c8:	20000348 	.word	0x20000348
 80007cc:	20000200 	.word	0x20000200
 80007d0:	20000208 	.word	0x20000208
 80007d4:	00000000 	.word	0x00000000

080007d8 <get_temperature_value>:
#include "driver_HC_SR04.h"
#include "adc.h"
#include <math.h>
uint16_t rawValue;
float temp;
float get_temperature_value(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	 HAL_ADC_Start(&hadc1);
 80007dc:	4826      	ldr	r0, [pc, #152]	; (8000878 <get_temperature_value+0xa0>)
 80007de:	f001 f905 	bl	80019ec <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 10);
 80007e2:	210a      	movs	r1, #10
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <get_temperature_value+0xa0>)
 80007e6:	f001 f9c1 	bl	8001b6c <HAL_ADC_PollForConversion>
	 rawValue = HAL_ADC_GetValue(&hadc1);
 80007ea:	4823      	ldr	r0, [pc, #140]	; (8000878 <get_temperature_value+0xa0>)
 80007ec:	f001 fb83 	bl	8001ef6 <HAL_ADC_GetValue>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <get_temperature_value+0xa4>)
 80007f6:	801a      	strh	r2, [r3, #0]
	 //HAL_ADC_Stop(&hadc1);
	 temp = ((float)rawValue) / (pow(2,12)-1) * 3300;
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <get_temperature_value+0xa4>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000804:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000808:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000860 <get_temperature_value+0x88>
 800080c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000810:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000868 <get_temperature_value+0x90>
 8000814:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000818:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <get_temperature_value+0xa8>)
 800081e:	edc3 7a00 	vstr	s15, [r3]
	 temp = ((temp - 760.0) / 2.5) + 25;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <get_temperature_value+0xa8>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000870 <get_temperature_value+0x98>
 8000830:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000834:	eeb0 5b04 	vmov.f64	d5, #4	; 0x40200000  2.5
 8000838:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800083c:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000840:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <get_temperature_value+0xa8>)
 800084a:	edc3 7a00 	vstr	s15, [r3]
	 return temp;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <get_temperature_value+0xa8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	ee07 3a90 	vmov	s15, r3
}
 8000856:	eeb0 0a67 	vmov.f32	s0, s15
 800085a:	bd80      	pop	{r7, pc}
 800085c:	f3af 8000 	nop.w
 8000860:	00000000 	.word	0x00000000
 8000864:	40affe00 	.word	0x40affe00
 8000868:	00000000 	.word	0x00000000
 800086c:	40a9c800 	.word	0x40a9c800
 8000870:	00000000 	.word	0x00000000
 8000874:	4087c000 	.word	0x4087c000
 8000878:	20000238 	.word	0x20000238
 800087c:	20000280 	.word	0x20000280
 8000880:	20000284 	.word	0x20000284

08000884 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_ETH_Init+0x78>)
 800088a:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <MX_ETH_Init+0x7c>)
 800088c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_ETH_Init+0x78>)
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_ETH_Init+0x78>)
 8000896:	2200      	movs	r2, #0
 8000898:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_ETH_Init+0x78>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_ETH_Init+0x78>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_ETH_Init+0x78>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	3302      	adds	r3, #2
 80008b2:	22e1      	movs	r2, #225	; 0xe1
 80008b4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_ETH_Init+0x78>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	3303      	adds	r3, #3
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_ETH_Init+0x78>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_ETH_Init+0x78>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	3305      	adds	r3, #5
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_ETH_Init+0x78>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_ETH_Init+0x78>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_ETH_Init+0x78>)
 80008e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008e6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_ETH_Init+0x78>)
 80008ea:	f001 fe8f 	bl	800260c <HAL_ETH_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80008f4:	f000 fc58 	bl	80011a8 <Error_Handler>
  }

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000288 	.word	0x20000288
 8000900:	40028000 	.word	0x40028000

08000904 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a4e      	ldr	r2, [pc, #312]	; (8000a5c <HAL_ETH_MspInit+0x158>)
 8000922:	4293      	cmp	r3, r2
 8000924:	f040 8096 	bne.w	8000a54 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000928:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a4c      	ldr	r2, [pc, #304]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000954:	61fb      	str	r3, [r7, #28]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a40      	ldr	r2, [pc, #256]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800095e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <HAL_ETH_MspInit+0x15c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009d0:	2332      	movs	r3, #50	; 0x32
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	481e      	ldr	r0, [pc, #120]	; (8000a64 <HAL_ETH_MspInit+0x160>)
 80009ec:	f002 fa7a 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009f0:	2386      	movs	r3, #134	; 0x86
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a00:	230b      	movs	r3, #11
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <HAL_ETH_MspInit+0x164>)
 8000a0c:	f002 fa6a 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a22:	230b      	movs	r3, #11
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <HAL_ETH_MspInit+0x168>)
 8000a2e:	f002 fa59 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <HAL_ETH_MspInit+0x16c>)
 8000a50:	f002 fa48 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	; 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40028000 	.word	0x40028000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40021800 	.word	0x40021800

08000a74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b8d      	ldr	r3, [pc, #564]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a8c      	ldr	r2, [pc, #560]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b8a      	ldr	r3, [pc, #552]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b87      	ldr	r3, [pc, #540]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a86      	ldr	r2, [pc, #536]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b84      	ldr	r3, [pc, #528]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b81      	ldr	r3, [pc, #516]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a80      	ldr	r2, [pc, #512]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b7e      	ldr	r3, [pc, #504]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b7b      	ldr	r3, [pc, #492]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a7a      	ldr	r2, [pc, #488]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b78      	ldr	r3, [pc, #480]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	4b75      	ldr	r3, [pc, #468]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a74      	ldr	r2, [pc, #464]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000af0:	f043 0320 	orr.w	r3, r3, #32
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b72      	ldr	r3, [pc, #456]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	4b6f      	ldr	r3, [pc, #444]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a6e      	ldr	r2, [pc, #440]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a68      	ldr	r2, [pc, #416]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b66      	ldr	r3, [pc, #408]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a62      	ldr	r2, [pc, #392]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b50:	485c      	ldr	r0, [pc, #368]	; (8000cc4 <MX_GPIO_Init+0x250>)
 8000b52:	f002 fb71 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b5c:	485a      	ldr	r0, [pc, #360]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000b5e:	f002 fb6b 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	4858      	ldr	r0, [pc, #352]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b6a:	f002 fb65 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TRIG_HC_SR04_Pin|COL1_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b74:	4856      	ldr	r0, [pc, #344]	; (8000cd0 <MX_GPIO_Init+0x25c>)
 8000b76:	f002 fb5f 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000b80:	f002 fb5a 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_booton_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_booton_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4850      	ldr	r0, [pc, #320]	; (8000cdc <MX_GPIO_Init+0x268>)
 8000b9a:	f002 f9a3 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b9e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4843      	ldr	r0, [pc, #268]	; (8000cc4 <MX_GPIO_Init+0x250>)
 8000bb8:	f002 f994 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = COL2_Pin|COL3_Pin;
 8000bbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483c      	ldr	r0, [pc, #240]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000bd6:	f002 f985 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW2_Pin;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ROW2_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4836      	ldr	r0, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000bf0:	f002 f978 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	482f      	ldr	r0, [pc, #188]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000c0e:	f002 f969 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 8000c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4829      	ldr	r0, [pc, #164]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000c28:	f002 f95c 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TRIG_HC_SR04_Pin|COL1_Pin;
 8000c2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <MX_GPIO_Init+0x25c>)
 8000c46:	f002 f94d 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481c      	ldr	r0, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000c62:	f002 f93f 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000c7a:	f002 f933 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin;
 8000c7e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000c94:	f002 f926 	bl	8002ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2017      	movs	r0, #23
 8000c9e:	f001 fc7e 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca2:	2017      	movs	r0, #23
 8000ca4:	f001 fc97 	bl	80025d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f001 fc76 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb2:	2028      	movs	r0, #40	; 0x28
 8000cb4:	f001 fc8f 	bl	80025d6 <HAL_NVIC_EnableIRQ>

}
 8000cb8:	bf00      	nop
 8000cba:	3738      	adds	r7, #56	; 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	40021400 	.word	0x40021400
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40020c00 	.word	0x40020c00
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <next_col>:
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
	HAL_TIM_Base_Start_IT(&htim6);
}

void next_col(TipoTeclado *p_keypad){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	if (p_keypad->columna_actual == COL_1) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d110      	bne.n	8000d12 <next_col+0x32>
		HAL_GPIO_TogglePin(COL1_GPIO_Port, COL1_Pin);
 8000cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf4:	4828      	ldr	r0, [pc, #160]	; (8000d98 <next_col+0xb8>)
 8000cf6:	f002 fab8 	bl	800326a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL2_GPIO_Port, COL2_Pin);
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	4827      	ldr	r0, [pc, #156]	; (8000d9c <next_col+0xbc>)
 8000d00:	f002 fab3 	bl	800326a <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_2;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_2;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	605a      	str	r2, [r3, #4]
		HAL_GPIO_TogglePin(COL4_GPIO_Port, COL4_Pin);
		HAL_GPIO_TogglePin(COL1_GPIO_Port, COL1_Pin);
		p_keypad->columna_actual = COL_1;
		p_keypad->teclaPulsada.col = COL_1;
	}
}
 8000d10:	e03d      	b.n	8000d8e <next_col+0xae>
	} else if (p_keypad->columna_actual == COL_2){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d110      	bne.n	8000d3c <next_col+0x5c>
		HAL_GPIO_TogglePin(COL2_GPIO_Port, COL2_Pin);
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	481f      	ldr	r0, [pc, #124]	; (8000d9c <next_col+0xbc>)
 8000d20:	f002 faa3 	bl	800326a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL3_GPIO_Port, COL3_Pin);
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <next_col+0xbc>)
 8000d2a:	f002 fa9e 	bl	800326a <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_3;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2202      	movs	r2, #2
 8000d32:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_3;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2202      	movs	r2, #2
 8000d38:	605a      	str	r2, [r3, #4]
}
 8000d3a:	e028      	b.n	8000d8e <next_col+0xae>
	}else if (p_keypad->columna_actual == COL_3){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d110      	bne.n	8000d66 <next_col+0x86>
		HAL_GPIO_TogglePin(COL3_GPIO_Port, COL3_Pin);
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <next_col+0xbc>)
 8000d4a:	f002 fa8e 	bl	800326a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL4_GPIO_Port, COL4_Pin);
 8000d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d52:	4813      	ldr	r0, [pc, #76]	; (8000da0 <next_col+0xc0>)
 8000d54:	f002 fa89 	bl	800326a <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_4;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_4;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2203      	movs	r2, #3
 8000d62:	605a      	str	r2, [r3, #4]
}
 8000d64:	e013      	b.n	8000d8e <next_col+0xae>
	}else if (p_keypad->columna_actual == COL_4){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d10f      	bne.n	8000d8e <next_col+0xae>
		HAL_GPIO_TogglePin(COL4_GPIO_Port, COL4_Pin);
 8000d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <next_col+0xc0>)
 8000d74:	f002 fa79 	bl	800326a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(COL1_GPIO_Port, COL1_Pin);
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <next_col+0xb8>)
 8000d7e:	f002 fa74 	bl	800326a <HAL_GPIO_TogglePin>
		p_keypad->columna_actual = COL_1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
		p_keypad->teclaPulsada.col = COL_1;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40021400 	.word	0x40021400
 8000da0:	40021000 	.word	0x40021000

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f000 fd5c 	bl	8001866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f845 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f7ff fe5f 	bl	8000a74 <MX_GPIO_Init>
  MX_ETH_Init();
 8000db6:	f7ff fd65 	bl	8000884 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000dba:	f000 fc2d 	bl	8001618 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dbe:	f000 fc9f 	bl	8001700 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000dc2:	f000 fb2f 	bl	8001424 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000dc6:	f000 fb63 	bl	8001490 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000dca:	f000 fad7 	bl	800137c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000dce:	f7ff fc0f 	bl	80005f0 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captureDone != 0) {
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <main+0x7c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d016      	beq.n	8000e0a <main+0x66>
		  captureDone = 0;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <main+0x7c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		  distanciam = HC_SR04_get_distance(diffCapture);
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <main+0x80>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc96 	bl	8000718 <HC_SR04_get_distance>
 8000dec:	eeb0 7b40 	vmov.f64	d7, d0
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <main+0x84>)
 8000df2:	ed83 7b00 	vstr	d7, [r3]
		  sprintf(str_name, "%s\t%f","Distancia en m =",distanciam);
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <main+0x84>)
 8000df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dfc:	e9cd 3400 	strd	r3, r4, [sp]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <main+0x88>)
 8000e02:	490b      	ldr	r1, [pc, #44]	; (8000e30 <main+0x8c>)
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <main+0x90>)
 8000e06:	f005 ffbb 	bl	8006d80 <siprintf>
//	  if(key_press(&teclado)){
//		key_process(key_pad[teclado.teclaPulsada.row][teclado.teclaPulsada.col])
//		sprintf(str_name, "%s\t%d","letra =",key_pad[teclado.teclaPulsada.row][teclado.teclaPulsada.col]);
//		reset_key_press(&teclado);
//	  }
	  if (FLAG_ENVIO == true){
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <main+0x94>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0df      	beq.n	8000dd2 <main+0x2e>
		  enviar();
 8000e12:	f000 f8a9 	bl	8000f68 <enviar>
		  FLAG_ENVIO = false;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <main+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
	  if (captureDone != 0) {
 8000e1c:	e7d9      	b.n	8000dd2 <main+0x2e>
 8000e1e:	bf00      	nop
 8000e20:	20000218 	.word	0x20000218
 8000e24:	20000216 	.word	0x20000216
 8000e28:	20000220 	.word	0x20000220
 8000e2c:	08008300 	.word	0x08008300
 8000e30:	08008314 	.word	0x08008314
 8000e34:	200002e4 	.word	0x200002e4
 8000e38:	20000214 	.word	0x20000214

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0b8      	sub	sp, #224	; 0xe0
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e46:	2234      	movs	r2, #52	; 0x34
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f005 fa9c 	bl	8006388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2290      	movs	r2, #144	; 0x90
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fa8d 	bl	8006388 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e6e:	f002 fb77 	bl	8003560 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <SystemClock_Config+0x120>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a39      	ldr	r2, [pc, #228]	; (8000f5c <SystemClock_Config+0x120>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <SystemClock_Config+0x120>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8a:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <SystemClock_Config+0x124>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <SystemClock_Config+0x124>)
 8000e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <SystemClock_Config+0x124>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ec4:	23d8      	movs	r3, #216	; 0xd8
 8000ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ed0:	2309      	movs	r3, #9
 8000ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fba0 	bl	8003620 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ee6:	f000 f95f 	bl	80011a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eea:	f002 fb49 	bl	8003580 <HAL_PWREx_EnableOverDrive>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ef4:	f000 f958 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f1e:	2107      	movs	r1, #7
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fe2b 	bl	8003b7c <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f2c:	f000 f93c 	bl	80011a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <SystemClock_Config+0x128>)
 8000f32:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 f812 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000f4e:	f000 f92b 	bl	80011a8 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	37e0      	adds	r7, #224	; 0xe0
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000
 8000f64:	00200100 	.word	0x00200100

08000f68 <enviar>:

/* USER CODE BEGIN 4 */
void enviar(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0


	sprintf(str_name, "%s#", str_name);
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <enviar+0x28>)
 8000f6e:	4909      	ldr	r1, [pc, #36]	; (8000f94 <enviar+0x2c>)
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <enviar+0x28>)
 8000f72:	f005 ff05 	bl	8006d80 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) str_name, strlen(str_name),
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <enviar+0x28>)
 8000f78:	f7ff f962 	bl	8000240 <strlen>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	4902      	ldr	r1, [pc, #8]	; (8000f90 <enviar+0x28>)
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <enviar+0x30>)
 8000f88:	f004 fa7e 	bl	8005488 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200002e4 	.word	0x200002e4
 8000f94:	0800831c 	.word	0x0800831c
 8000f98:	20000408 	.word	0x20000408

08000f9c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == User_booton_Pin){
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fac:	d116      	bne.n	8000fdc <HAL_GPIO_EXTI_Callback+0x40>
		//HC_SR04_Start_trigger();
		temperatura = get_temperature_value();
 8000fae:	f7ff fc13 	bl	80007d8 <get_temperature_value>
 8000fb2:	eef0 7a40 	vmov.f32	s15, s0
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
		sprintf(str_name, "%s\t%f","Temperatura PCB =",temperatura);
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	ed8d 7b00 	vstr	d7, [sp]
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fcc:	4917      	ldr	r1, [pc, #92]	; (800102c <HAL_GPIO_EXTI_Callback+0x90>)
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fd0:	f005 fed6 	bl	8006d80 <siprintf>
		FLAG_ENVIO = true;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]

	}else if(GPIO_Pin == ROW4_Pin){
		teclado.teclaPulsada.row = ROW_4;

	}
}
 8000fda:	e01e      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x7e>
	}else if(GPIO_Pin == ROW1_Pin){
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fe2:	d103      	bne.n	8000fec <HAL_GPIO_EXTI_Callback+0x50>
		teclado.teclaPulsada.row = ROW_1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
}
 8000fea:	e016      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x7e>
	}else if(GPIO_Pin == ROW2_Pin){
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff2:	d103      	bne.n	8000ffc <HAL_GPIO_EXTI_Callback+0x60>
		teclado.teclaPulsada.row = ROW_2;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	609a      	str	r2, [r3, #8]
}
 8000ffa:	e00e      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x7e>
	}else if(GPIO_Pin == ROW3_Pin){
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001002:	d103      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x70>
		teclado.teclaPulsada.row = ROW_3;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001006:	2202      	movs	r2, #2
 8001008:	609a      	str	r2, [r3, #8]
}
 800100a:	e006      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x7e>
	}else if(GPIO_Pin == ROW4_Pin){
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001012:	d102      	bne.n	800101a <HAL_GPIO_EXTI_Callback+0x7e>
		teclado.teclaPulsada.row = ROW_4;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001016:	2203      	movs	r2, #3
 8001018:	609a      	str	r2, [r3, #8]
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000228 	.word	0x20000228
 8001028:	08008320 	.word	0x08008320
 800102c:	08008314 	.word	0x08008314
 8001030:	200002e4 	.word	0x200002e4
 8001034:	20000214 	.word	0x20000214
 8001038:	200002d0 	.word	0x200002d0

0800103c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7f1b      	ldrb	r3, [r3, #28]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d14b      	bne.n	80010e4 <HAL_TIM_IC_CaptureCallback+0xa8>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10a      	bne.n	800106a <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			captures[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f003 feca 	bl	8004df0 <HAL_TIM_ReadCapturedValue>
 800105c:	4602      	mov	r2, r0
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001060:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge, only if don't have both capture
			//__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);

		}
	}
}
 8001068:	e03c      	b.n	80010e4 <HAL_TIM_IC_CaptureCallback+0xa8>
		else if (Is_First_Captured==1)   // if the first is already captured
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d138      	bne.n	80010e4 <HAL_TIM_IC_CaptureCallback+0xa8>
			captures[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001072:	2100      	movs	r1, #0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f003 febb 	bl	8004df0 <HAL_TIM_ReadCapturedValue>
 800107a:	4602      	mov	r2, r0
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800107e:	605a      	str	r2, [r3, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
			if (captures[1] > captures[0])
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d90a      	bls.n	80010aa <HAL_TIM_IC_CaptureCallback+0x6e>
				diffCapture = captures[1]-captures[0];
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80010a6:	801a      	strh	r2, [r3, #0]
 80010a8:	e00f      	b.n	80010ca <HAL_TIM_IC_CaptureCallback+0x8e>
				diffCapture = (htim3.Instance->ARR - captures[0]) + captures[1];
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80010c8:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80010d4:	f003 fc60 	bl	8004998 <HAL_TIM_IC_Stop_IT>
			captureDone = 1;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
			FLAG_ENVIO = true;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000215 	.word	0x20000215
 80010f0:	200002dc 	.word	0x200002dc
 80010f4:	20000216 	.word	0x20000216
 80010f8:	20000348 	.word	0x20000348
 80010fc:	20000218 	.word	0x20000218
 8001100:	20000214 	.word	0x20000214

08001104 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Period elapsed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	if (htim->Instance==TIM6) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a20      	ldr	r2, [pc, #128]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d133      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0x7a>
		cuenta++;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800111e:	6013      	str	r3, [r2, #0]
		if (cuenta == 40) {
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b28      	cmp	r3, #40	; 0x28
 8001126:	d109      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x38>
			 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112c:	481b      	ldr	r0, [pc, #108]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800112e:	f002 f89c 	bl	800326a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001132:	2101      	movs	r1, #1
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001136:	f002 f898 	bl	800326a <HAL_GPIO_TogglePin>
 800113a:	e01c      	b.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x72>
		} else if (cuenta == 80) {
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b50      	cmp	r3, #80	; 0x50
 8001142:	d108      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x52>
			 HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001144:	2101      	movs	r1, #1
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001148:	f002 f88f 	bl	800326a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4813      	ldr	r0, [pc, #76]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001150:	f002 f88b 	bl	800326a <HAL_GPIO_TogglePin>
 8001154:	e00f      	b.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x72>

		} else if(cuenta == 120){
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b78      	cmp	r3, #120	; 0x78
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x72>
			 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001162:	f002 f882 	bl	800326a <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800116c:	f002 f87d 	bl	800326a <HAL_GPIO_TogglePin>
			cuenta = 0;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

		}
		next_col(&teclado);
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001178:	f7ff fdb2 	bl	8000ce0 <next_col>
	}else if (htim->Instance==TIM7){
		HC_SR04_Stop_trigger();

	}

}
 800117c:	e006      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x88>
	}else if (htim->Instance==TIM7){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_TIM_PeriodElapsedCallback+0x88>
		HC_SR04_Stop_trigger();
 8001188:	f7ff faac 	bl	80006e4 <HC_SR04_Stop_trigger>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40001000 	.word	0x40001000
 8001198:	20000210 	.word	0x20000210
 800119c:	40020400 	.word	0x40020400
 80011a0:	200002d0 	.word	0x200002d0
 80011a4:	40001400 	.word	0x40001400

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 fb44 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <ADC_IRQHandler+0x10>)
 8001262:	f000 fd07 	bl	8001c74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000238 	.word	0x20000238

08001270 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001274:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001278:	f002 f812 	bl	80032a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM3_IRQHandler+0x10>)
 8001286:	f003 fbf7 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000348 	.word	0x20000348

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001298:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800129c:	f002 f800 	bl	80032a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012a4:	f001 fffc 	bl	80032a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012ac:	f001 fff8 	bl	80032a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b4:	f001 fff4 	bl	80032a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM6_DAC_IRQHandler+0x10>)
 80012c2:	f003 fbd9 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000388 	.word	0x20000388

080012d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM7_IRQHandler+0x10>)
 80012d6:	f003 fbcf 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200003c8 	.word	0x200003c8

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f005 f806 	bl	8006324 <__errno>
 8001318:	4602      	mov	r2, r0
 800131a:	230c      	movs	r3, #12
 800131c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20080000 	.word	0x20080000
 8001344:	00000400 	.word	0x00000400
 8001348:	2000022c 	.word	0x2000022c
 800134c:	20000898 	.word	0x20000898

08001350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <SystemInit+0x28>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <SystemInit+0x28>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SystemInit+0x28>)
 8001366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136a:	609a      	str	r2, [r3, #8]
#endif
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_TIM3_Init+0xa0>)
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <MX_TIM3_Init+0xa4>)
 800139e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 58;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_TIM3_Init+0xa0>)
 80013a2:	223a      	movs	r2, #58	; 0x3a
 80013a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM3_Init+0xa0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_TIM3_Init+0xa0>)
 80013ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_TIM3_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM3_Init+0xa0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013c0:	4816      	ldr	r0, [pc, #88]	; (800141c <MX_TIM3_Init+0xa0>)
 80013c2:	f003 fa4f 	bl	8004864 <HAL_TIM_IC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013cc:	f7ff feec 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <MX_TIM3_Init+0xa0>)
 80013e0:	f003 ff58 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80013ea:	f7ff fedd 	bl	80011a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013ee:	230a      	movs	r3, #10
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM3_Init+0xa0>)
 8001406:	f003 fc56 	bl	8004cb6 <HAL_TIM_IC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001410:	f7ff feca 	bl	80011a8 <Error_Handler>
  }

}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000348 	.word	0x20000348
 8001420:	40000400 	.word	0x40000400

08001424 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_TIM6_Init+0x64>)
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_TIM6_Init+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_TIM6_Init+0x64>)
 800143c:	2228      	movs	r2, #40	; 0x28
 800143e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_TIM6_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_TIM6_Init+0x64>)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_TIM6_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_TIM6_Init+0x64>)
 8001456:	f003 f9af 	bl	80047b8 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001460:	f7ff fea2 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_TIM6_Init+0x64>)
 8001472:	f003 ff0f 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800147c:	f7ff fe94 	bl	80011a8 <Error_Handler>
  }

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000388 	.word	0x20000388
 800148c:	40001000 	.word	0x40001000

08001490 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <MX_TIM7_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 539;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014a8:	f240 221b 	movw	r2, #539	; 0x21b
 80014ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014c2:	f003 f979 	bl	80047b8 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014cc:	f7ff fe6c 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_TIM7_Init+0x64>)
 80014de:	f003 fed9 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f7ff fe5e 	bl	80011a8 <Error_Handler>
  }

}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200003c8 	.word	0x200003c8
 80014f8:	40001400 	.word	0x40001400

080014fc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_TIM_IC_MspInit+0x8c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12f      	bne.n	800157e <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_TIM_IC_MspInit+0x90>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_TIM_IC_MspInit+0x90>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_TIM_IC_MspInit+0x90>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_TIM_IC_MspInit+0x90>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_TIM_IC_MspInit+0x90>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_TIM_IC_MspInit+0x90>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154e:	2340      	movs	r3, #64	; 0x40
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155e:	2302      	movs	r3, #2
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_TIM_IC_MspInit+0x94>)
 800156a:	f001 fcbb 	bl	8002ee4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	201d      	movs	r0, #29
 8001574:	f001 f813 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001578:	201d      	movs	r0, #29
 800157a:	f001 f82c 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40000400 	.word	0x40000400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_TIM_Base_MspInit+0x78>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d114      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2036      	movs	r0, #54	; 0x36
 80015c4:	f000 ffeb 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c8:	2036      	movs	r0, #54	; 0x36
 80015ca:	f001 f804 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80015ce:	e018      	b.n	8001602 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_TIM_Base_MspInit+0x80>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_Base_MspInit+0x7c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2037      	movs	r0, #55	; 0x37
 80015f8:	f000 ffd1 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015fc:	2037      	movs	r0, #55	; 0x37
 80015fe:	f000 ffea 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40001000 	.word	0x40001000
 8001610:	40023800 	.word	0x40023800
 8001614:	40001400 	.word	0x40001400

08001618 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_USART3_UART_Init+0x58>)
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <MX_USART3_UART_Init+0x5c>)
 8001620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_USART3_UART_Init+0x58>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART3_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_USART3_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART3_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART3_UART_Init+0x58>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART3_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART3_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART3_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART3_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART3_UART_Init+0x58>)
 800165c:	f003 fec6 	bl	80053ec <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001666:	f7ff fd9f 	bl	80011a8 <Error_Handler>
  }

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000408 	.word	0x20000408
 8001674:	40004800 	.word	0x40004800

08001678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_UART_MspInit+0x7c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d128      	bne.n	80016ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0x80>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <HAL_UART_MspInit+0x80>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_UART_MspInit+0x80>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_MspInit+0x80>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x80>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_UART_MspInit+0x80>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0x84>)
 80016e8:	f001 fbfc 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020c00 	.word	0x40020c00

08001700 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800170a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170e:	2206      	movs	r2, #6
 8001710:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001714:	2202      	movs	r2, #2
 8001716:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001720:	2202      	movs	r2, #2
 8001722:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001726:	2201      	movs	r2, #1
 8001728:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001738:	2201      	movs	r2, #1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001744:	f001 fdc4 	bl	80032d0 <HAL_PCD_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800174e:	f7ff fd2b 	bl	80011a8 <Error_Handler>
  }

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000488 	.word	0x20000488

0800175c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800177c:	d141      	bne.n	8001802 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_PCD_MspInit+0xb0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_PCD_MspInit+0xb0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_PCD_MspInit+0xb0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001796:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017a8:	230a      	movs	r3, #10
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4817      	ldr	r0, [pc, #92]	; (8001810 <HAL_PCD_MspInit+0xb4>)
 80017b4:	f001 fb96 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4810      	ldr	r0, [pc, #64]	; (8001810 <HAL_PCD_MspInit+0xb4>)
 80017ce:	f001 fb89 	bl	8002ee4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_PCD_MspInit+0xb0>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_PCD_MspInit+0xb0>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6353      	str	r3, [r2, #52]	; 0x34
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_PCD_MspInit+0xb0>)
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_PCD_MspInit+0xb0>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_PCD_MspInit+0xb0>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_PCD_MspInit+0xb0>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800181a:	e003      	b.n	8001824 <LoopCopyDataInit>

0800181c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800181e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001822:	3104      	adds	r1, #4

08001824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800182a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800182c:	d3f6      	bcc.n	800181c <CopyDataInit>
  ldr  r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001830:	e002      	b.n	8001838 <LoopFillZerobss>

08001832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001834:	f842 3b04 	str.w	r3, [r2], #4

08001838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800183c:	d3f9      	bcc.n	8001832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183e:	f7ff fd87 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f004 fd75 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7ff faad 	bl	8000da4 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800184c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001850:	080085b8 	.word	0x080085b8
  ldr  r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001858:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800185c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001860:	20000894 	.word	0x20000894

08001864 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <CAN1_RX0_IRQHandler>

08001866 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186a:	2003      	movs	r0, #3
 800186c:	f000 fe8c 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001870:	2000      	movs	r0, #0
 8001872:	f000 f805 	bl	8001880 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001876:	f7ff fc9f 	bl	80011b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fea7 	bl	80025f2 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 fe6f 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	2000088c 	.word	0x2000088c

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000088c 	.word	0x2000088c

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_Delay+0x40>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000008 	.word	0x20000008

08001964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e031      	b.n	80019de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fe88 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_ADC_Init+0x84>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	f043 0202 	orr.w	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fc14 	bl	80021e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
 80019ce:	e001      	b.n	80019d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	ffffeefd 	.word	0xffffeefd

080019ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_Start+0x1a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e0a0      	b.n	8001b48 <HAL_ADC_Start+0x15c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d018      	beq.n	8001a4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a2c:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <HAL_ADC_Start+0x168>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a49      	ldr	r2, [pc, #292]	; (8001b58 <HAL_ADC_Start+0x16c>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9a      	lsrs	r2, r3, #18
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d174      	bne.n	8001b46 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <HAL_ADC_Start+0x170>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d106      	bne.n	8001aa6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f023 0206 	bic.w	r2, r3, #6
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001abc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_ADC_Start+0x174>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10f      	bne.n	8001aea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d136      	bne.n	8001b46 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	e02d      	b.n	8001b46 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_ADC_Start+0x178>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d10e      	bne.n	8001b12 <HAL_ADC_Start+0x126>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b10:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_ADC_Start+0x174>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d113      	bne.n	8001b46 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_ADC_Start+0x17c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10e      	bne.n	8001b46 <HAL_ADC_Start+0x15a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d107      	bne.n	8001b46 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b44:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	fffff8fe 	.word	0xfffff8fe
 8001b60:	40012300 	.word	0x40012300
 8001b64:	40012000 	.word	0x40012000
 8001b68:	40012200 	.word	0x40012200

08001b6c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d113      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b98:	d10b      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0220 	orr.w	r2, r3, #32
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e05c      	b.n	8001c6c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bb2:	f7ff fea9 	bl	8001908 <HAL_GetTick>
 8001bb6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bb8:	e01a      	b.n	8001bf0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d016      	beq.n	8001bf0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x6c>
 8001bc8:	f7ff fe9e 	bl	8001908 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d20b      	bcs.n	8001bf0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f043 0204 	orr.w	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e03d      	b.n	8001c6c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d1dd      	bne.n	8001bba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0212 	mvn.w	r2, #18
 8001c06:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d123      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11f      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d111      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	bf0c      	ite	eq
 8001c92:	2301      	moveq	r3, #1
 8001c94:	2300      	movne	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d049      	beq.n	8001d4a <HAL_ADC_IRQHandler+0xd6>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d046      	beq.n	8001d4a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d12b      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d127      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d119      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0220 	bic.w	r2, r2, #32
 8001d14:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8e8 	bl	8001f10 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0212 	mvn.w	r2, #18
 8001d48:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d057      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x1b8>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d054      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d139      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12b      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d124      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11d      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d119      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fad9 	bl	80023d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 020c 	mvn.w	r2, #12
 8001e2a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d017      	beq.n	8001e8e <HAL_ADC_IRQHandler+0x21a>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d014      	beq.n	8001e8e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10d      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f850 	bl	8001f24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0201 	mvn.w	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <HAL_ADC_IRQHandler+0x27a>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0202 	orr.w	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0220 	mvn.w	r2, #32
 8001edc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f82a 	bl	8001f38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0220 	mvn.w	r2, #32
 8001eec:	601a      	str	r2, [r3, #0]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1c>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e12a      	b.n	80021be <HAL_ADC_ConfigChannel+0x272>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d93a      	bls.n	8001fee <HAL_ADC_ConfigChannel+0xa2>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f80:	d035      	beq.n	8001fee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	3b1e      	subs	r3, #30
 8001f98:	2207      	movs	r2, #7
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a87      	ldr	r2, [pc, #540]	; (80021cc <HAL_ADC_ConfigChannel+0x280>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68d9      	ldr	r1, [r3, #12]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	061a      	lsls	r2, r3, #24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc6:	e035      	b.n	8002034 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4403      	add	r3, r0
 8001fe0:	3b1e      	subs	r3, #30
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fec:	e022      	b.n	8002034 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6919      	ldr	r1, [r3, #16]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43da      	mvns	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	400a      	ands	r2, r1
 8002010:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6919      	ldr	r1, [r3, #16]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	4603      	mov	r3, r0
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4403      	add	r3, r0
 800202a:	409a      	lsls	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b06      	cmp	r3, #6
 800203a:	d824      	bhi.n	8002086 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b05      	subs	r3, #5
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b05      	subs	r3, #5
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	; 0x34
 8002084:	e04c      	b.n	8002120 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d824      	bhi.n	80020d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b23      	subs	r3, #35	; 0x23
 80020a0:	221f      	movs	r2, #31
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	400a      	ands	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b23      	subs	r3, #35	; 0x23
 80020ca:	fa00 f203 	lsl.w	r2, r0, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
 80020d6:	e023      	b.n	8002120 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b41      	subs	r3, #65	; 0x41
 80020ea:	221f      	movs	r2, #31
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43da      	mvns	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	400a      	ands	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b41      	subs	r3, #65	; 0x41
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <HAL_ADC_ConfigChannel+0x284>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10a      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1f4>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_ADC_ConfigChannel+0x288>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <HAL_ADC_ConfigChannel+0x288>)
 800213a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800213e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_ADC_ConfigChannel+0x284>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d109      	bne.n	800215e <HAL_ADC_ConfigChannel+0x212>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b12      	cmp	r3, #18
 8002150:	d105      	bne.n	800215e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_ADC_ConfigChannel+0x288>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_ADC_ConfigChannel+0x288>)
 8002158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_ADC_ConfigChannel+0x284>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d125      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x268>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_ADC_ConfigChannel+0x280>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <HAL_ADC_ConfigChannel+0x22e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b11      	cmp	r3, #17
 8002178:	d11c      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_ADC_ConfigChannel+0x288>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_ADC_ConfigChannel+0x288>)
 8002180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002184:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_ADC_ConfigChannel+0x280>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d111      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_ADC_ConfigChannel+0x28c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_ADC_ConfigChannel+0x290>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0c9a      	lsrs	r2, r3, #18
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021a6:	e002      	b.n	80021ae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	10000012 	.word	0x10000012
 80021d0:	40012000 	.word	0x40012000
 80021d4:	40012300 	.word	0x40012300
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80021e8:	4b78      	ldr	r3, [pc, #480]	; (80023cc <ADC_Init+0x1ec>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a77      	ldr	r2, [pc, #476]	; (80023cc <ADC_Init+0x1ec>)
 80021ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021f4:	4b75      	ldr	r3, [pc, #468]	; (80023cc <ADC_Init+0x1ec>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4973      	ldr	r1, [pc, #460]	; (80023cc <ADC_Init+0x1ec>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	021a      	lsls	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <ADC_Init+0x1f0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d022      	beq.n	80022ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6899      	ldr	r1, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	e00f      	b.n	80022da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0202 	bic.w	r2, r2, #2
 80022e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	005a      	lsls	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	3b01      	subs	r3, #1
 8002334:	035a      	lsls	r2, r3, #13
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	e007      	b.n	8002350 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	3b01      	subs	r3, #1
 800236c:	051a      	lsls	r2, r3, #20
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002392:	025a      	lsls	r2, r3, #9
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	029a      	lsls	r2, r3, #10
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012300 	.word	0x40012300
 80023d0:	0f000001 	.word	0x0f000001

080023d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <__NVIC_SetPriorityGrouping+0x40>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	4313      	orrs	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <__NVIC_SetPriorityGrouping+0x40>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00
 800242c:	05fa0000 	.word	0x05fa0000

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800261c:	4ba9      	ldr	r3, [pc, #676]	; (80028c4 <HAL_ETH_Init+0x2b8>)
 800261e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e183      	b.n	800293a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe f95c 	bl	8000904 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_ETH_Init+0x2bc>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	4a9d      	ldr	r2, [pc, #628]	; (80028c8 <HAL_ETH_Init+0x2bc>)
 8002652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002656:	6453      	str	r3, [r2, #68]	; 0x44
 8002658:	4b9b      	ldr	r3, [pc, #620]	; (80028c8 <HAL_ETH_Init+0x2bc>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002664:	4b99      	ldr	r3, [pc, #612]	; (80028cc <HAL_ETH_Init+0x2c0>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a98      	ldr	r2, [pc, #608]	; (80028cc <HAL_ETH_Init+0x2c0>)
 800266a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800266e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002670:	4b96      	ldr	r3, [pc, #600]	; (80028cc <HAL_ETH_Init+0x2c0>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4994      	ldr	r1, [pc, #592]	; (80028cc <HAL_ETH_Init+0x2c0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002694:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002696:	f7ff f937 	bl	8001908 <HAL_GetTick>
 800269a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800269c:	e011      	b.n	80026c2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800269e:	f7ff f933 	bl	8001908 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ac:	d909      	bls.n	80026c2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e13b      	b.n	800293a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e4      	bne.n	800269e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f023 031c 	bic.w	r3, r3, #28
 80026e2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026e4:	f001 fc0e 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 80026e8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4a78      	ldr	r2, [pc, #480]	; (80028d0 <HAL_ETH_Init+0x2c4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d908      	bls.n	8002704 <HAL_ETH_Init+0xf8>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <HAL_ETH_Init+0x2c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d804      	bhi.n	8002704 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e027      	b.n	8002754 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_ETH_Init+0x2c8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d908      	bls.n	800271e <HAL_ETH_Init+0x112>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4a72      	ldr	r2, [pc, #456]	; (80028d8 <HAL_ETH_Init+0x2cc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d804      	bhi.n	800271e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f043 030c 	orr.w	r3, r3, #12
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e01a      	b.n	8002754 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4a6d      	ldr	r2, [pc, #436]	; (80028d8 <HAL_ETH_Init+0x2cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d903      	bls.n	800272e <HAL_ETH_Init+0x122>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4a6c      	ldr	r2, [pc, #432]	; (80028dc <HAL_ETH_Init+0x2d0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d911      	bls.n	8002752 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <HAL_ETH_Init+0x2d0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d908      	bls.n	8002748 <HAL_ETH_Init+0x13c>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_ETH_Init+0x2d4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d804      	bhi.n	8002748 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e005      	b.n	8002754 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	e000      	b.n	8002754 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002752:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800275c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002760:	2100      	movs	r1, #0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f956 	bl	8002a14 <HAL_ETH_WritePHYRegister>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002772:	6939      	ldr	r1, [r7, #16]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f9b3 	bl	8002ae0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0d9      	b.n	800293a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002786:	20ff      	movs	r0, #255	; 0xff
 8002788:	f7ff f8ca 	bl	8001920 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a7 	beq.w	80028e4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002796:	f7ff f8b7 	bl	8001908 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	461a      	mov	r2, r3
 80027a2:	2101      	movs	r1, #1
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8cd 	bl	8002944 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80027aa:	f7ff f8ad 	bl	8001908 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d90f      	bls.n	80027dc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027c0:	6939      	ldr	r1, [r7, #16]
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f98c 	bl	8002ae0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0ae      	b.n	800293a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0da      	beq.n	800279c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80027e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ea:	2100      	movs	r1, #0
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f911 	bl	8002a14 <HAL_ETH_WritePHYRegister>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027fc:	6939      	ldr	r1, [r7, #16]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f96e 	bl	8002ae0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800280c:	2301      	movs	r3, #1
 800280e:	e094      	b.n	800293a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002810:	f7ff f87a 	bl	8001908 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	461a      	mov	r2, r3
 800281c:	2101      	movs	r1, #1
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f890 	bl	8002944 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002824:	f7ff f870 	bl	8001908 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d90f      	bls.n	8002856 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f94f 	bl	8002ae0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e071      	b.n	800293a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0da      	beq.n	8002816 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	461a      	mov	r2, r3
 8002866:	211f      	movs	r1, #31
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f86b 	bl	8002944 <HAL_ETH_ReadPHYRegister>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f930 	bl	8002ae0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002888:	2301      	movs	r3, #1
 800288a:	e056      	b.n	800293a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	e002      	b.n	80028a6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	e037      	b.n	8002928 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e032      	b.n	8002928 <HAL_ETH_Init+0x31c>
 80028c2:	bf00      	nop
 80028c4:	03938700 	.word	0x03938700
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	01312cff 	.word	0x01312cff
 80028d4:	02160ebf 	.word	0x02160ebf
 80028d8:	039386ff 	.word	0x039386ff
 80028dc:	05f5e0ff 	.word	0x05f5e0ff
 80028e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f889 	bl	8002a14 <HAL_ETH_WritePHYRegister>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800290c:	6939      	ldr	r1, [r7, #16]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8e6 	bl	8002ae0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00c      	b.n	800293a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002920:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002924:	f7fe fffc 	bl	8001920 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002928:	6939      	ldr	r1, [r7, #16]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8d8 	bl	8002ae0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop

08002944 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	460b      	mov	r3, r1
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b82      	cmp	r3, #130	; 0x82
 8002964:	d101      	bne.n	800296a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
 8002968:	e050      	b.n	8002a0c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2282      	movs	r2, #130	; 0x82
 800296e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 031c 	and.w	r3, r3, #28
 8002980:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8a1b      	ldrh	r3, [r3, #16]
 8002986:	02db      	lsls	r3, r3, #11
 8002988:	b29b      	uxth	r3, r3
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	019b      	lsls	r3, r3, #6
 8002994:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f023 0302 	bic.w	r3, r3, #2
 80029a4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80029b6:	f7fe ffa7 	bl	8001908 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029bc:	e015      	b.n	80029ea <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80029be:	f7fe ffa3 	bl	8001908 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d309      	bcc.n	80029e2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e014      	b.n	8002a0c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e4      	bne.n	80029be <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b42      	cmp	r3, #66	; 0x42
 8002a34:	d101      	bne.n	8002a3a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	e04e      	b.n	8002ad8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2242      	movs	r2, #66	; 0x42
 8002a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 031c 	and.w	r3, r3, #28
 8002a50:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8a1b      	ldrh	r3, [r3, #16]
 8002a56:	02db      	lsls	r3, r3, #11
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	019b      	lsls	r3, r3, #6
 8002a64:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7fe ff3a 	bl	8001908 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a96:	e015      	b.n	8002ac4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002a98:	f7fe ff36 	bl	8001908 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d309      	bcc.n	8002abc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e00d      	b.n	8002ad8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e4      	bne.n	8002a98 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b0b0      	sub	sp, #192	; 0xc0
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002afc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b2c:	e001      	b.n	8002b32 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b36:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b4c:	2340      	movs	r3, #64	; 0x40
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb8:	4bab      	ldr	r3, [pc, #684]	; (8002e68 <ETH_MACDMAConfig+0x388>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bc4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002bc8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002bcc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002bd2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002bd6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002bda:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002be0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002be4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002be8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bec:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bf0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002bf4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7fe fe83 	bl	8001920 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c22:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c28:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002c2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002c2c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002c32:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c38:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c3e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c48:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c50:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c52:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7fe fe5e 	bl	8001920 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c6c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c76:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c80:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c90:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c94:	4013      	ands	r3, r2
 8002c96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c9e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ca4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002caa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002cb0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002cb6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002cb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002cbc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002cbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7fe fe1f 	bl	8001920 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cea:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002cf0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f7fe fe0a 	bl	8001920 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d14:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002d24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d28:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d6a:	4413      	add	r3, r2
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <ETH_MACDMAConfig+0x38c>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d7e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d80:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d82:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d84:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d86:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d88:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d8a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d8c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d8e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d90:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d92:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d94:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d96:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d9a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d9e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002da0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f241 0318 	movw	r3, #4120	; 0x1018
 8002db2:	4413      	add	r3, r2
 8002db4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002db8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dc2:	4413      	add	r3, r2
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fe fda8 	bl	8001920 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dd8:	4413      	add	r3, r2
 8002dda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dde:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002de4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002de8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dec:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002df0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002df6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002dfa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e08:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7fe fd81 	bl	8001920 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e2a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e3c:	4413      	add	r3, r2
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6811      	ldr	r1, [r2, #0]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <ETH_MACDMAConfig+0x390>)
 8002e46:	431a      	orrs	r2, r3
 8002e48:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e4c:	440b      	add	r3, r1
 8002e4e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	461a      	mov	r2, r3
 8002e56:	2100      	movs	r1, #0
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f80b 	bl	8002e74 <ETH_MACAddressConfig>
}
 8002e5e:	bf00      	nop
 8002e60:	37c0      	adds	r7, #192	; 0xc0
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	ff20810f 	.word	0xff20810f
 8002e6c:	f8de3f23 	.word	0xf8de3f23
 8002e70:	00010040 	.word	0x00010040

08002e74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3305      	adds	r3, #5
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	3204      	adds	r2, #4
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <ETH_MACAddressConfig+0x68>)
 8002e96:	4413      	add	r3, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3303      	adds	r3, #3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	061a      	lsls	r2, r3, #24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <ETH_MACAddressConfig+0x6c>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6013      	str	r3, [r2, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40028040 	.word	0x40028040
 8002ee0:	40028044 	.word	0x40028044

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e175      	b.n	80031f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8164 	bne.w	80031ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d00b      	beq.n	8002f42 <HAL_GPIO_Init+0x5e>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f36:	2b11      	cmp	r3, #17
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b12      	cmp	r3, #18
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x100>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b12      	cmp	r3, #18
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80be 	beq.w	80031ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_GPIO_Init+0x320>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4a64      	ldr	r2, [pc, #400]	; (8003204 <HAL_GPIO_Init+0x320>)
 8003074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_GPIO_Init+0x320>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003086:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_GPIO_Init+0x324>)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_GPIO_Init+0x328>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d037      	beq.n	8003122 <HAL_GPIO_Init+0x23e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a56      	ldr	r2, [pc, #344]	; (8003210 <HAL_GPIO_Init+0x32c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_GPIO_Init+0x23a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a55      	ldr	r2, [pc, #340]	; (8003214 <HAL_GPIO_Init+0x330>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x236>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x334>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x232>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a53      	ldr	r2, [pc, #332]	; (800321c <HAL_GPIO_Init+0x338>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x22e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_GPIO_Init+0x33c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x22a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a51      	ldr	r2, [pc, #324]	; (8003224 <HAL_GPIO_Init+0x340>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a50      	ldr	r2, [pc, #320]	; (8003228 <HAL_GPIO_Init+0x344>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_GPIO_Init+0x348>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <HAL_GPIO_Init+0x34c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x21a>
 80030fa:	2309      	movs	r3, #9
 80030fc:	e012      	b.n	8003124 <HAL_GPIO_Init+0x240>
 80030fe:	230a      	movs	r3, #10
 8003100:	e010      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003102:	2308      	movs	r3, #8
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003106:	2307      	movs	r3, #7
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003134:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_GPIO_Init+0x324>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003142:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <HAL_GPIO_Init+0x350>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003166:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_GPIO_Init+0x350>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800316c:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_GPIO_Init+0x350>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003190:	4a28      	ldr	r2, [pc, #160]	; (8003234 <HAL_GPIO_Init+0x350>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_GPIO_Init+0x350>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_GPIO_Init+0x350>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_GPIO_Init+0x350>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_GPIO_Init+0x350>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae86 	bls.w	8002f04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3724      	adds	r7, #36	; 0x24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40022000 	.word	0x40022000
 8003230:	40022400 	.word	0x40022400
 8003234:	40013c00 	.word	0x40013c00

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003254:	e003      	b.n	800325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800328a:	e002      	b.n	8003292 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328c:	887a      	ldrh	r2, [r7, #2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fe6c 	bl	8000f9c <HAL_GPIO_EXTI_Callback>
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b08f      	sub	sp, #60	; 0x3c
 80032d4:	af0a      	add	r7, sp, #40	; 0x28
 80032d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e116      	b.n	8003510 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fe fa2d 	bl	800175c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f002 fda7 	bl	8005e74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	687e      	ldr	r6, [r7, #4]
 800332e:	466d      	mov	r5, sp
 8003330:	f106 0410 	add.w	r4, r6, #16
 8003334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003340:	e885 0003 	stmia.w	r5, {r0, r1}
 8003344:	1d33      	adds	r3, r6, #4
 8003346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003348:	6838      	ldr	r0, [r7, #0]
 800334a:	f002 fd3b 	bl	8005dc4 <USB_CoreInit>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0d7      	b.n	8003510 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f002 fd95 	bl	8005e96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e04a      	b.n	8003408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	333d      	adds	r3, #61	; 0x3d
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333c      	adds	r3, #60	; 0x3c
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	b298      	uxth	r0, r3
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3342      	adds	r3, #66	; 0x42
 80033ae:	4602      	mov	r2, r0
 80033b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	333f      	adds	r3, #63	; 0x3f
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3344      	adds	r3, #68	; 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3348      	adds	r3, #72	; 0x48
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3350      	adds	r3, #80	; 0x50
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	3301      	adds	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d3af      	bcc.n	8003372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e044      	b.n	80034a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3b5      	bcc.n	8003418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	687e      	ldr	r6, [r7, #4]
 80034b4:	466d      	mov	r5, sp
 80034b6:	f106 0410 	add.w	r4, r6, #16
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ca:	1d33      	adds	r3, r6, #4
 80034cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f002 fd0c 	bl	8005eec <USB_DevInit>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e014      	b.n	8003510 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f80a 	bl	8003518 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 febe 	bl	800628a <USB_DevDisconnect>

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_PCDEx_ActivateLPM+0x44>)
 8003548:	4313      	orrs	r3, r2
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	10000003 	.word	0x10000003

08003560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40007000 	.word	0x40007000

08003580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <HAL_PWREx_EnableOverDrive+0x98>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_PWREx_EnableOverDrive+0x98>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_PWREx_EnableOverDrive+0x98>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ae:	f7fe f9ab 	bl	8001908 <HAL_GetTick>
 80035b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035b4:	e009      	b.n	80035ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035b6:	f7fe f9a7 	bl	8001908 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c4:	d901      	bls.n	80035ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e022      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d6:	d1ee      	bne.n	80035b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0f      	ldr	r2, [pc, #60]	; (800361c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e4:	f7fe f990 	bl	8001908 <HAL_GetTick>
 80035e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ea:	e009      	b.n	8003600 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ec:	f7fe f98c 	bl	8001908 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fa:	d901      	bls.n	8003600 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e007      	b.n	8003610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800360c:	d1ee      	bne.n	80035ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	40007000 	.word	0x40007000

08003620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e29b      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003644:	4b96      	ldr	r3, [pc, #600]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00c      	beq.n	800366a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003650:	4b93      	ldr	r3, [pc, #588]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d112      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
 800365c:	4b90      	ldr	r3, [pc, #576]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b8d      	ldr	r3, [pc, #564]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d06c      	beq.n	8003750 <HAL_RCC_OscConfig+0x130>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d168      	bne.n	8003750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e275      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x7a>
 800368c:	4b84      	ldr	r3, [pc, #528]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a83      	ldr	r2, [pc, #524]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x9c>
 80036a2:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b7c      	ldr	r3, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7b      	ldr	r2, [pc, #492]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xc0>
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a75      	ldr	r2, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a72      	ldr	r2, [pc, #456]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6b      	ldr	r2, [pc, #428]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe f902 	bl	8001908 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe f8fe 	bl	8001908 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e229      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xe8>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe f8ee 	bl	8001908 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe f8ea 	bl	8001908 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e215      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x110>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d069      	beq.n	8003832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375e:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x190>
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x17a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1e9      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	493d      	ldr	r1, [pc, #244]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e040      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a38      	ldr	r2, [pc, #224]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe f8a0 	bl	8001908 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fe f89c 	bl	8001908 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1c7      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4929      	ldr	r1, [pc, #164]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
 80037fe:	e018      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe f87c 	bl	8001908 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fe f878 	bl	8001908 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1a3      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d038      	beq.n	80038b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d019      	beq.n	800387a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003852:	f7fe f859 	bl	8001908 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385a:	f7fe f855 	bl	8001908 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e180      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x23a>
 8003878:	e01a      	b.n	80038b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fe f83f 	bl	8001908 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388e:	f7fe f83b 	bl	8001908 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d903      	bls.n	80038a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e166      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
 80038a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a4 	beq.w	8003a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b8c      	ldr	r3, [pc, #560]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a88      	ldr	r2, [pc, #544]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b86      	ldr	r3, [pc, #536]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e6:	4b83      	ldr	r3, [pc, #524]	; (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038f2:	4b80      	ldr	r3, [pc, #512]	; (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7f      	ldr	r2, [pc, #508]	; (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fe f803 	bl	8001908 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fd ffff 	bl	8001908 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b64      	cmp	r3, #100	; 0x64
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e12a      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x31a>
 800392c:	4b70      	ldr	r3, [pc, #448]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a6f      	ldr	r2, [pc, #444]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	e02d      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x33c>
 8003942:	4b6b      	ldr	r3, [pc, #428]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
 800394e:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a67      	ldr	r2, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003954:	f023 0304 	bic.w	r3, r3, #4
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	e01c      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0x35e>
 8003964:	4b62      	ldr	r3, [pc, #392]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a61      	ldr	r2, [pc, #388]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	4b5f      	ldr	r3, [pc, #380]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a5e      	ldr	r2, [pc, #376]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
 800397e:	4b5c      	ldr	r3, [pc, #368]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a5b      	ldr	r2, [pc, #364]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d015      	beq.n	80039ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fd ffb3 	bl	8001908 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd ffaf 	bl	8001908 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0d8      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RCC_OscConfig+0x386>
 80039c8:	e014      	b.n	80039f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fd ff9d 	bl	8001908 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fd ff99 	bl	8001908 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0c2      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	4b41      	ldr	r3, [pc, #260]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ee      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a3c      	ldr	r2, [pc, #240]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80ae 	beq.w	8003b6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a10:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d06d      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d14b      	bne.n	8003abc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a31      	ldr	r2, [pc, #196]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd ff6a 	bl	8001908 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fd ff66 	bl	8001908 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e091      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	071b      	lsls	r3, r3, #28
 8003a82:	491b      	ldr	r1, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fd ff38 	bl	8001908 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd ff34 	bl	8001908 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e05f      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x47c>
 8003aba:	e057      	b.n	8003b6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd ff1e 	bl	8001908 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd ff1a 	bl	8001908 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e045      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4b0>
 8003aee:	e03d      	b.n	8003b6c <HAL_RCC_OscConfig+0x54c>
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCC_OscConfig+0x558>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d030      	beq.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d129      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d122      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d119      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10f      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d0      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d910      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	4965      	ldr	r1, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d040      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d115      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e073      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4936      	ldr	r1, [pc, #216]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fd fe4a 	bl	8001908 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd fe46 	bl	8001908 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e053      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d210      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 020f 	bic.w	r2, r3, #15
 8003cb6:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1cc>)
 8003d20:	5cd3      	ldrb	r3, [r2, r3]
 8003d22:	fa21 f303 	lsr.w	r3, r1, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1d0>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1d4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fda6 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08008334 	.word	0x08008334
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	2300      	movs	r3, #0
 8003d64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d007      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x32>
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d008      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x38>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 80b4 	bne.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d82:	60bb      	str	r3, [r7, #8]
      break;
 8003d84:	e0b3      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d86:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d88:	60bb      	str	r3, [r7, #8]
      break;
 8003d8a:	e0b0      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d94:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d96:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d04a      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da2:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	f04f 0400 	mov.w	r4, #0
 8003dac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	ea03 0501 	and.w	r5, r3, r1
 8003db8:	ea04 0602 	and.w	r6, r4, r2
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f04f 0400 	mov.w	r4, #0
 8003dc8:	0154      	lsls	r4, r2, #5
 8003dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dce:	014b      	lsls	r3, r1, #5
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	1b49      	subs	r1, r1, r5
 8003dd6:	eb62 0206 	sbc.w	r2, r2, r6
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	f04f 0400 	mov.w	r4, #0
 8003de2:	0194      	lsls	r4, r2, #6
 8003de4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003de8:	018b      	lsls	r3, r1, #6
 8003dea:	1a5b      	subs	r3, r3, r1
 8003dec:	eb64 0402 	sbc.w	r4, r4, r2
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	00e2      	lsls	r2, r4, #3
 8003dfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dfe:	00d9      	lsls	r1, r3, #3
 8003e00:	460b      	mov	r3, r1
 8003e02:	4614      	mov	r4, r2
 8003e04:	195b      	adds	r3, r3, r5
 8003e06:	eb44 0406 	adc.w	r4, r4, r6
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	0262      	lsls	r2, r4, #9
 8003e14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e18:	0259      	lsls	r1, r3, #9
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	4621      	mov	r1, r4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f04f 0400 	mov.w	r4, #0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f7fc fa60 	bl	80002f0 <__aeabi_uldivmod>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e049      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	f04f 0400 	mov.w	r4, #0
 8003e42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	ea03 0501 	and.w	r5, r3, r1
 8003e4e:	ea04 0602 	and.w	r6, r4, r2
 8003e52:	4629      	mov	r1, r5
 8003e54:	4632      	mov	r2, r6
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	f04f 0400 	mov.w	r4, #0
 8003e5e:	0154      	lsls	r4, r2, #5
 8003e60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e64:	014b      	lsls	r3, r1, #5
 8003e66:	4619      	mov	r1, r3
 8003e68:	4622      	mov	r2, r4
 8003e6a:	1b49      	subs	r1, r1, r5
 8003e6c:	eb62 0206 	sbc.w	r2, r2, r6
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f04f 0400 	mov.w	r4, #0
 8003e78:	0194      	lsls	r4, r2, #6
 8003e7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e7e:	018b      	lsls	r3, r1, #6
 8003e80:	1a5b      	subs	r3, r3, r1
 8003e82:	eb64 0402 	sbc.w	r4, r4, r2
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	00e2      	lsls	r2, r4, #3
 8003e90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e94:	00d9      	lsls	r1, r3, #3
 8003e96:	460b      	mov	r3, r1
 8003e98:	4614      	mov	r4, r2
 8003e9a:	195b      	adds	r3, r3, r5
 8003e9c:	eb44 0406 	adc.w	r4, r4, r6
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	02a2      	lsls	r2, r4, #10
 8003eaa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eae:	0299      	lsls	r1, r3, #10
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	f7fc fa15 	bl	80002f0 <__aeabi_uldivmod>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460c      	mov	r4, r1
 8003eca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	60bb      	str	r3, [r7, #8]
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eea:	60bb      	str	r3, [r7, #8]
      break;
 8003eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eee:	68bb      	ldr	r3, [r7, #8]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200

08003f04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4601      	mov	r1, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4a03      	ldr	r2, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08008344 	.word	0x08008344

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f48:	f7ff ffdc 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0b5b      	lsrs	r3, r3, #13
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4a03      	ldr	r2, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	08008344 	.word	0x08008344

08003f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d012      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f94:	4b69      	ldr	r3, [pc, #420]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a68      	ldr	r2, [pc, #416]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f9e:	6093      	str	r3, [r2, #8]
 8003fa0:	4b66      	ldr	r3, [pc, #408]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	4964      	ldr	r1, [pc, #400]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d017      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	4959      	ldr	r1, [pc, #356]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe4:	d101      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004002:	4b4e      	ldr	r3, [pc, #312]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	494a      	ldr	r1, [pc, #296]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004020:	d101      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 808b 	beq.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b3a      	ldr	r3, [pc, #232]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	4a39      	ldr	r2, [pc, #228]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	6413      	str	r3, [r2, #64]	; 0x40
 800405c:	4b37      	ldr	r3, [pc, #220]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004068:	4b35      	ldr	r3, [pc, #212]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a34      	ldr	r2, [pc, #208]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004074:	f7fd fc48 	bl	8001908 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fd fc44 	bl	8001908 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e38d      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800409a:	4b28      	ldr	r3, [pc, #160]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d035      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d02e      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a1d      	ldr	r2, [pc, #116]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d114      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fc0c 	bl	8001908 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd fc08 	bl	8001908 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e34f      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004122:	d111      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004132:	400b      	ands	r3, r1
 8004134:	4901      	ldr	r1, [pc, #4]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
 800413a:	e00b      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800413c:	40023800 	.word	0x40023800
 8004140:	40007000 	.word	0x40007000
 8004144:	0ffffcff 	.word	0x0ffffcff
 8004148:	4bb3      	ldr	r3, [pc, #716]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4ab2      	ldr	r2, [pc, #712]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	4bb0      	ldr	r3, [pc, #704]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	49ad      	ldr	r1, [pc, #692]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004162:	4313      	orrs	r3, r2
 8004164:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004172:	4ba9      	ldr	r3, [pc, #676]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004178:	4aa7      	ldr	r2, [pc, #668]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004182:	4ba5      	ldr	r3, [pc, #660]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004184:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	49a2      	ldr	r1, [pc, #648]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a0:	4b9d      	ldr	r3, [pc, #628]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ae:	499a      	ldr	r1, [pc, #616]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c2:	4b95      	ldr	r3, [pc, #596]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d0:	4991      	ldr	r1, [pc, #580]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e4:	4b8c      	ldr	r3, [pc, #560]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	4989      	ldr	r1, [pc, #548]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004206:	4b84      	ldr	r3, [pc, #528]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4980      	ldr	r1, [pc, #512]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004228:	4b7b      	ldr	r3, [pc, #492]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	4978      	ldr	r1, [pc, #480]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800424a:	4b73      	ldr	r3, [pc, #460]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f023 020c 	bic.w	r2, r3, #12
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	496f      	ldr	r1, [pc, #444]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800426c:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	4967      	ldr	r1, [pc, #412]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800428e:	4b62      	ldr	r3, [pc, #392]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	495e      	ldr	r1, [pc, #376]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	4956      	ldr	r1, [pc, #344]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042d2:	4b51      	ldr	r3, [pc, #324]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	494d      	ldr	r1, [pc, #308]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042f4:	4b48      	ldr	r3, [pc, #288]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	4945      	ldr	r1, [pc, #276]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004316:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004324:	493c      	ldr	r1, [pc, #240]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004346:	4934      	ldr	r1, [pc, #208]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d011      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004368:	492b      	ldr	r1, [pc, #172]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800438a:	2301      	movs	r3, #1
 800438c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	491b      	ldr	r1, [pc, #108]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043cc:	4912      	ldr	r1, [pc, #72]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f0:	4909      	ldr	r1, [pc, #36]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	4985      	ldr	r1, [pc, #532]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004430:	4b80      	ldr	r3, [pc, #512]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004436:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	497c      	ldr	r1, [pc, #496]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d005      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004456:	f040 80d6 	bne.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004460:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004466:	f7fd fa4f 	bl	8001908 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800446e:	f7fd fa4b 	bl	8001908 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	; 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e194      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d021      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044a0:	4b64      	ldr	r3, [pc, #400]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ae:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	019a      	lsls	r2, r3, #6
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	071b      	lsls	r3, r3, #28
 80044d4:	4957      	ldr	r1, [pc, #348]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02e      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004506:	d129      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004508:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451c:	0f1b      	lsrs	r3, r3, #28
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	019a      	lsls	r2, r3, #6
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	071b      	lsls	r3, r3, #28
 800453c:	493d      	ldr	r1, [pc, #244]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454a:	f023 021f 	bic.w	r2, r3, #31
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	3b01      	subs	r3, #1
 8004554:	4937      	ldr	r1, [pc, #220]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01d      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456e:	0e1b      	lsrs	r3, r3, #24
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004576:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	0f1b      	lsrs	r3, r3, #28
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	019a      	lsls	r2, r3, #6
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	071b      	lsls	r3, r3, #28
 800459c:	4925      	ldr	r1, [pc, #148]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d011      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	019a      	lsls	r2, r3, #6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	071b      	lsls	r3, r3, #28
 80045cc:	4919      	ldr	r1, [pc, #100]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045d4:	4b17      	ldr	r3, [pc, #92]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd f992 	bl	8001908 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045e8:	f7fd f98e 	bl	8001908 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0d7      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b01      	cmp	r3, #1
 800460a:	f040 80cd 	bne.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a08      	ldr	r2, [pc, #32]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461a:	f7fd f975 	bl	8001908 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004622:	f7fd f971 	bl	8001908 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b64      	cmp	r3, #100	; 0x64
 800462e:	d903      	bls.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0ba      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004634:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004638:	4b5e      	ldr	r3, [pc, #376]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004644:	d0ed      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004662:	2b00      	cmp	r3, #0
 8004664:	d02e      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d12a      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800466e:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800467c:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	0f1b      	lsrs	r3, r3, #28
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	019a      	lsls	r2, r3, #6
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	071b      	lsls	r3, r3, #28
 80046a2:	4944      	ldr	r1, [pc, #272]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046aa:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	493d      	ldr	r1, [pc, #244]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d8:	d11d      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046da:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	0e1b      	lsrs	r3, r3, #24
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046e8:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	0f1b      	lsrs	r3, r3, #28
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	019a      	lsls	r2, r3, #6
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	4929      	ldr	r1, [pc, #164]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d028      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	0e1b      	lsrs	r3, r3, #24
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004730:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	019a      	lsls	r2, r3, #6
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	431a      	orrs	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	4917      	ldr	r1, [pc, #92]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	4911      	ldr	r1, [pc, #68]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fd f8c2 	bl	8001908 <HAL_GetTick>
 8004784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004788:	f7fd f8be 	bl	8001908 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e007      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a6:	d1ef      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800

080047b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e01d      	b.n	8004806 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fed8 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fb5c 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <HAL_TIM_Base_Stop_IT+0x48>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	f240 4344 	movw	r3, #1092	; 0x444
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d107      	bne.n	8004856 <HAL_TIM_Base_Stop_IT+0x48>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e01d      	b.n	80048b2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc fe36 	bl	80014fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 fb06 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d841      	bhi.n	8004950 <HAL_TIM_IC_Start_IT+0x94>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_TIM_IC_Start_IT+0x18>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004951 	.word	0x08004951
 80048dc:	08004951 	.word	0x08004951
 80048e0:	08004951 	.word	0x08004951
 80048e4:	0800491b 	.word	0x0800491b
 80048e8:	08004951 	.word	0x08004951
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004951 	.word	0x08004951
 80048f4:	0800492d 	.word	0x0800492d
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004951 	.word	0x08004951
 8004900:	08004951 	.word	0x08004951
 8004904:	0800493f 	.word	0x0800493f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0202 	orr.w	r2, r2, #2
 8004916:	60da      	str	r2, [r3, #12]
      break;
 8004918:	e01b      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0204 	orr.w	r2, r2, #4
 8004928:	60da      	str	r2, [r3, #12]
      break;
 800492a:	e012      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0208 	orr.w	r2, r2, #8
 800493a:	60da      	str	r2, [r3, #12]
      break;
 800493c:	e009      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0210 	orr.w	r2, r2, #16
 800494c:	60da      	str	r2, [r3, #12]
      break;
 800494e:	e000      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004950:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fc74 	bl	8005248 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_TIM_IC_Start_IT+0xd8>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d00b      	beq.n	800498a <HAL_TIM_IC_Start_IT+0xce>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d007      	beq.n	800498a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d841      	bhi.n	8004a2c <HAL_TIM_IC_Stop_IT+0x94>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_IC_Stop_IT+0x18>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a2d 	.word	0x08004a2d
 80049b8:	08004a2d 	.word	0x08004a2d
 80049bc:	08004a2d 	.word	0x08004a2d
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a1b 	.word	0x08004a1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0202 	bic.w	r2, r2, #2
 80049f2:	60da      	str	r2, [r3, #12]
      break;
 80049f4:	e01b      	b.n	8004a2e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0204 	bic.w	r2, r2, #4
 8004a04:	60da      	str	r2, [r3, #12]
      break;
 8004a06:	e012      	b.n	8004a2e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0208 	bic.w	r2, r2, #8
 8004a16:	60da      	str	r2, [r3, #12]
      break;
 8004a18:	e009      	b.n	8004a2e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0210 	bic.w	r2, r2, #16
 8004a28:	60da      	str	r2, [r3, #12]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8004a2c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fc06 	bl	8005248 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10f      	bne.n	8004a6c <HAL_TIM_IC_Stop_IT+0xd4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	f240 4344 	movw	r3, #1092	; 0x444
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IC_Stop_IT+0xd4>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop

08004a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0202 	mvn.w	r2, #2
 8004aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc fabe 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9d8 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f9df 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0204 	mvn.w	r2, #4
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fa94 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f9ae 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f9b5 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0208 	mvn.w	r2, #8
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc fa6a 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f984 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f98b 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0210 	mvn.w	r2, #16
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc fa40 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f95a 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f961 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0201 	mvn.w	r2, #1
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fa84 	bl	8001104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c14:	2b80      	cmp	r3, #128	; 0x80
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fbce 	bl	80053c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	d10e      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d107      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fbc1 	bl	80053d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f90f 	bl	8004ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d10e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0220 	mvn.w	r2, #32
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb81 	bl	80053b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e08a      	b.n	8004de6 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11b      	bne.n	8004d1e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f000 f97d 	bl	8004ff4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 020c 	bic.w	r2, r2, #12
 8004d08:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6999      	ldr	r1, [r3, #24]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	619a      	str	r2, [r3, #24]
 8004d1c:	e05a      	b.n	8004dd4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d11c      	bne.n	8004d5e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f000 f9d2 	bl	80050dc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d46:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6999      	ldr	r1, [r3, #24]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	021a      	lsls	r2, r3, #8
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	619a      	str	r2, [r3, #24]
 8004d5c:	e03a      	b.n	8004dd4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6819      	ldr	r1, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f000 f9ef 	bl	8005156 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 020c 	bic.w	r2, r2, #12
 8004d86:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69d9      	ldr	r1, [r3, #28]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	61da      	str	r2, [r3, #28]
 8004d9a:	e01b      	b.n	8004dd4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f000 fa0f 	bl	80051ce <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dbe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69d9      	ldr	r1, [r3, #28]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	021a      	lsls	r2, r3, #8
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b0c      	cmp	r3, #12
 8004e02:	d831      	bhi.n	8004e68 <HAL_TIM_ReadCapturedValue+0x78>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08004e69 	.word	0x08004e69
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004e69 	.word	0x08004e69
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e69 	.word	0x08004e69
 8004e24:	08004e69 	.word	0x08004e69
 8004e28:	08004e69 	.word	0x08004e69
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e69 	.word	0x08004e69
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004e69 	.word	0x08004e69
 8004e3c:	08004e5f 	.word	0x08004e5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	60fb      	str	r3, [r7, #12]

      break;
 8004e48:	e00f      	b.n	8004e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	60fb      	str	r3, [r7, #12]

      break;
 8004e52:	e00a      	b.n	8004e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	60fb      	str	r3, [r7, #12]

      break;
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	60fb      	str	r3, [r7, #12]

      break;
 8004e66:	e000      	b.n	8004e6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e68:	bf00      	nop
  }

  return tmpreg;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3d      	ldr	r2, [pc, #244]	; (8004fcc <TIM_Base_SetConfig+0x118>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <TIM_Base_SetConfig+0x11c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <TIM_Base_SetConfig+0x120>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d027      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <TIM_Base_SetConfig+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d023      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <TIM_Base_SetConfig+0x11c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <TIM_Base_SetConfig+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d017      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <TIM_Base_SetConfig+0x128>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a27      	ldr	r2, [pc, #156]	; (8004fe0 <TIM_Base_SetConfig+0x12c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <TIM_Base_SetConfig+0x130>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <TIM_Base_SetConfig+0x134>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <TIM_Base_SetConfig+0x138>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <TIM_Base_SetConfig+0x13c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0xf8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d103      	bne.n	8004fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	615a      	str	r2, [r3, #20]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	40001800 	.word	0x40001800
 8004fec:	40001c00 	.word	0x40001c00
 8004ff0:	40002000 	.word	0x40002000

08004ff4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <TIM_TI1_SetConfig+0xcc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01b      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d017      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <TIM_TI1_SetConfig+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <TIM_TI1_SetConfig+0xd4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00f      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a23      	ldr	r2, [pc, #140]	; (80050cc <TIM_TI1_SetConfig+0xd8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <TIM_TI1_SetConfig+0xdc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <TIM_TI1_SetConfig+0xe0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_TI1_SetConfig+0x66>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <TIM_TI1_SetConfig+0xe4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <TIM_TI1_SetConfig+0x6a>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <TIM_TI1_SetConfig+0x6c>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e003      	b.n	800507e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	b2db      	uxtb	r3, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f023 030a 	bic.w	r3, r3, #10
 8005098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f003 030a 	and.w	r3, r3, #10
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40010400 	.word	0x40010400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40001800 	.word	0x40001800

080050dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0210 	bic.w	r2, r3, #16
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	031b      	lsls	r3, r3, #12
 8005120:	b29b      	uxth	r3, r3
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005156:	b480      	push	{r7}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005192:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	b2db      	uxtb	r3, r3
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b087      	sub	sp, #28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	b29b      	uxth	r3, r3
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005220:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	031b      	lsls	r3, r3, #12
 8005226:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2201      	movs	r2, #1
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1a      	ldr	r2, [r3, #32]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	43db      	mvns	r3, r3
 800526a:	401a      	ands	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e06d      	b.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a30      	ldr	r2, [pc, #192]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a20      	ldr	r2, [pc, #128]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d01d      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a15      	ldr	r2, [pc, #84]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a15      	ldr	r2, [pc, #84]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10c      	bne.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40010000 	.word	0x40010000
 8005398:	40010400 	.word	0x40010400
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40001800 	.word	0x40001800

080053b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e040      	b.n	8005480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc f932 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8be 	bl	80055ac <UART_SetConfig>
 8005430:	4603      	mov	r3, r0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e022      	b.n	8005480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fb5c 	bl	8005b00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fbe3 	bl	8005c44 <UART_CheckIdleState>
 800547e:	4603      	mov	r3, r0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549c:	2b20      	cmp	r3, #32
 800549e:	d17f      	bne.n	80055a0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_Transmit+0x24>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e078      	b.n	80055a2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UART_Transmit+0x36>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e071      	b.n	80055a2 <HAL_UART_Transmit+0x11a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2221      	movs	r2, #33	; 0x21
 80054d0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054d2:	f7fc fa19 	bl	8001908 <HAL_GetTick>
 80054d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d108      	bne.n	8005504 <HAL_UART_Transmit+0x7c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005514:	e02c      	b.n	8005570 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fbd4 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e038      	b.n	80055a2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3302      	adds	r3, #2
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e007      	b.n	800555e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1cc      	bne.n	8005516 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fba1 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e005      	b.n	80055a2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4bb1      	ldr	r3, [pc, #708]	; (80058a0 <UART_SetConfig+0x2f4>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a9f      	ldr	r2, [pc, #636]	; (80058a4 <UART_SetConfig+0x2f8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d121      	bne.n	8005670 <UART_SetConfig+0xc4>
 800562c:	4b9e      	ldr	r3, [pc, #632]	; (80058a8 <UART_SetConfig+0x2fc>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b03      	cmp	r3, #3
 8005638:	d816      	bhi.n	8005668 <UART_SetConfig+0xbc>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <UART_SetConfig+0x94>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005651 	.word	0x08005651
 8005644:	0800565d 	.word	0x0800565d
 8005648:	08005657 	.word	0x08005657
 800564c:	08005663 	.word	0x08005663
 8005650:	2301      	movs	r3, #1
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e151      	b.n	80058fa <UART_SetConfig+0x34e>
 8005656:	2302      	movs	r3, #2
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e14e      	b.n	80058fa <UART_SetConfig+0x34e>
 800565c:	2304      	movs	r3, #4
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e14b      	b.n	80058fa <UART_SetConfig+0x34e>
 8005662:	2308      	movs	r3, #8
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e148      	b.n	80058fa <UART_SetConfig+0x34e>
 8005668:	2310      	movs	r3, #16
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	bf00      	nop
 800566e:	e144      	b.n	80058fa <UART_SetConfig+0x34e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a8d      	ldr	r2, [pc, #564]	; (80058ac <UART_SetConfig+0x300>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d134      	bne.n	80056e4 <UART_SetConfig+0x138>
 800567a:	4b8b      	ldr	r3, [pc, #556]	; (80058a8 <UART_SetConfig+0x2fc>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b0c      	cmp	r3, #12
 8005686:	d829      	bhi.n	80056dc <UART_SetConfig+0x130>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <UART_SetConfig+0xe4>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080056dd 	.word	0x080056dd
 8005698:	080056dd 	.word	0x080056dd
 800569c:	080056dd 	.word	0x080056dd
 80056a0:	080056d1 	.word	0x080056d1
 80056a4:	080056dd 	.word	0x080056dd
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	080056dd 	.word	0x080056dd
 80056b0:	080056cb 	.word	0x080056cb
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056dd 	.word	0x080056dd
 80056c0:	080056d7 	.word	0x080056d7
 80056c4:	2300      	movs	r3, #0
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e117      	b.n	80058fa <UART_SetConfig+0x34e>
 80056ca:	2302      	movs	r3, #2
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e114      	b.n	80058fa <UART_SetConfig+0x34e>
 80056d0:	2304      	movs	r3, #4
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e111      	b.n	80058fa <UART_SetConfig+0x34e>
 80056d6:	2308      	movs	r3, #8
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e10e      	b.n	80058fa <UART_SetConfig+0x34e>
 80056dc:	2310      	movs	r3, #16
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	bf00      	nop
 80056e2:	e10a      	b.n	80058fa <UART_SetConfig+0x34e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a71      	ldr	r2, [pc, #452]	; (80058b0 <UART_SetConfig+0x304>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d120      	bne.n	8005730 <UART_SetConfig+0x184>
 80056ee:	4b6e      	ldr	r3, [pc, #440]	; (80058a8 <UART_SetConfig+0x2fc>)
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d00f      	beq.n	800571c <UART_SetConfig+0x170>
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d802      	bhi.n	8005706 <UART_SetConfig+0x15a>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <UART_SetConfig+0x164>
 8005704:	e010      	b.n	8005728 <UART_SetConfig+0x17c>
 8005706:	2b20      	cmp	r3, #32
 8005708:	d005      	beq.n	8005716 <UART_SetConfig+0x16a>
 800570a:	2b30      	cmp	r3, #48	; 0x30
 800570c:	d009      	beq.n	8005722 <UART_SetConfig+0x176>
 800570e:	e00b      	b.n	8005728 <UART_SetConfig+0x17c>
 8005710:	2300      	movs	r3, #0
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e0f1      	b.n	80058fa <UART_SetConfig+0x34e>
 8005716:	2302      	movs	r3, #2
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e0ee      	b.n	80058fa <UART_SetConfig+0x34e>
 800571c:	2304      	movs	r3, #4
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e0eb      	b.n	80058fa <UART_SetConfig+0x34e>
 8005722:	2308      	movs	r3, #8
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e0e8      	b.n	80058fa <UART_SetConfig+0x34e>
 8005728:	2310      	movs	r3, #16
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	bf00      	nop
 800572e:	e0e4      	b.n	80058fa <UART_SetConfig+0x34e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5f      	ldr	r2, [pc, #380]	; (80058b4 <UART_SetConfig+0x308>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d120      	bne.n	800577c <UART_SetConfig+0x1d0>
 800573a:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <UART_SetConfig+0x2fc>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d00f      	beq.n	8005768 <UART_SetConfig+0x1bc>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d802      	bhi.n	8005752 <UART_SetConfig+0x1a6>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <UART_SetConfig+0x1b0>
 8005750:	e010      	b.n	8005774 <UART_SetConfig+0x1c8>
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d005      	beq.n	8005762 <UART_SetConfig+0x1b6>
 8005756:	2bc0      	cmp	r3, #192	; 0xc0
 8005758:	d009      	beq.n	800576e <UART_SetConfig+0x1c2>
 800575a:	e00b      	b.n	8005774 <UART_SetConfig+0x1c8>
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e0cb      	b.n	80058fa <UART_SetConfig+0x34e>
 8005762:	2302      	movs	r3, #2
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e0c8      	b.n	80058fa <UART_SetConfig+0x34e>
 8005768:	2304      	movs	r3, #4
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e0c5      	b.n	80058fa <UART_SetConfig+0x34e>
 800576e:	2308      	movs	r3, #8
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e0c2      	b.n	80058fa <UART_SetConfig+0x34e>
 8005774:	2310      	movs	r3, #16
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	bf00      	nop
 800577a:	e0be      	b.n	80058fa <UART_SetConfig+0x34e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a4d      	ldr	r2, [pc, #308]	; (80058b8 <UART_SetConfig+0x30c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d124      	bne.n	80057d0 <UART_SetConfig+0x224>
 8005786:	4b48      	ldr	r3, [pc, #288]	; (80058a8 <UART_SetConfig+0x2fc>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005794:	d012      	beq.n	80057bc <UART_SetConfig+0x210>
 8005796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579a:	d802      	bhi.n	80057a2 <UART_SetConfig+0x1f6>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <UART_SetConfig+0x204>
 80057a0:	e012      	b.n	80057c8 <UART_SetConfig+0x21c>
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d006      	beq.n	80057b6 <UART_SetConfig+0x20a>
 80057a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ac:	d009      	beq.n	80057c2 <UART_SetConfig+0x216>
 80057ae:	e00b      	b.n	80057c8 <UART_SetConfig+0x21c>
 80057b0:	2300      	movs	r3, #0
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e0a1      	b.n	80058fa <UART_SetConfig+0x34e>
 80057b6:	2302      	movs	r3, #2
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e09e      	b.n	80058fa <UART_SetConfig+0x34e>
 80057bc:	2304      	movs	r3, #4
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e09b      	b.n	80058fa <UART_SetConfig+0x34e>
 80057c2:	2308      	movs	r3, #8
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e098      	b.n	80058fa <UART_SetConfig+0x34e>
 80057c8:	2310      	movs	r3, #16
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	bf00      	nop
 80057ce:	e094      	b.n	80058fa <UART_SetConfig+0x34e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a39      	ldr	r2, [pc, #228]	; (80058bc <UART_SetConfig+0x310>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d124      	bne.n	8005824 <UART_SetConfig+0x278>
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <UART_SetConfig+0x2fc>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d012      	beq.n	8005810 <UART_SetConfig+0x264>
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ee:	d802      	bhi.n	80057f6 <UART_SetConfig+0x24a>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <UART_SetConfig+0x258>
 80057f4:	e012      	b.n	800581c <UART_SetConfig+0x270>
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	d006      	beq.n	800580a <UART_SetConfig+0x25e>
 80057fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005800:	d009      	beq.n	8005816 <UART_SetConfig+0x26a>
 8005802:	e00b      	b.n	800581c <UART_SetConfig+0x270>
 8005804:	2301      	movs	r3, #1
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e077      	b.n	80058fa <UART_SetConfig+0x34e>
 800580a:	2302      	movs	r3, #2
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e074      	b.n	80058fa <UART_SetConfig+0x34e>
 8005810:	2304      	movs	r3, #4
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e071      	b.n	80058fa <UART_SetConfig+0x34e>
 8005816:	2308      	movs	r3, #8
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e06e      	b.n	80058fa <UART_SetConfig+0x34e>
 800581c:	2310      	movs	r3, #16
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	bf00      	nop
 8005822:	e06a      	b.n	80058fa <UART_SetConfig+0x34e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a25      	ldr	r2, [pc, #148]	; (80058c0 <UART_SetConfig+0x314>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d124      	bne.n	8005878 <UART_SetConfig+0x2cc>
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <UART_SetConfig+0x2fc>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583c:	d012      	beq.n	8005864 <UART_SetConfig+0x2b8>
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005842:	d802      	bhi.n	800584a <UART_SetConfig+0x29e>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <UART_SetConfig+0x2ac>
 8005848:	e012      	b.n	8005870 <UART_SetConfig+0x2c4>
 800584a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584e:	d006      	beq.n	800585e <UART_SetConfig+0x2b2>
 8005850:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005854:	d009      	beq.n	800586a <UART_SetConfig+0x2be>
 8005856:	e00b      	b.n	8005870 <UART_SetConfig+0x2c4>
 8005858:	2300      	movs	r3, #0
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e04d      	b.n	80058fa <UART_SetConfig+0x34e>
 800585e:	2302      	movs	r3, #2
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e04a      	b.n	80058fa <UART_SetConfig+0x34e>
 8005864:	2304      	movs	r3, #4
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e047      	b.n	80058fa <UART_SetConfig+0x34e>
 800586a:	2308      	movs	r3, #8
 800586c:	77fb      	strb	r3, [r7, #31]
 800586e:	e044      	b.n	80058fa <UART_SetConfig+0x34e>
 8005870:	2310      	movs	r3, #16
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	bf00      	nop
 8005876:	e040      	b.n	80058fa <UART_SetConfig+0x34e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <UART_SetConfig+0x318>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d139      	bne.n	80058f6 <UART_SetConfig+0x34a>
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <UART_SetConfig+0x2fc>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800588c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005890:	d027      	beq.n	80058e2 <UART_SetConfig+0x336>
 8005892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005896:	d817      	bhi.n	80058c8 <UART_SetConfig+0x31c>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01c      	beq.n	80058d6 <UART_SetConfig+0x32a>
 800589c:	e027      	b.n	80058ee <UART_SetConfig+0x342>
 800589e:	bf00      	nop
 80058a0:	efff69f3 	.word	0xefff69f3
 80058a4:	40011000 	.word	0x40011000
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40004400 	.word	0x40004400
 80058b0:	40004800 	.word	0x40004800
 80058b4:	40004c00 	.word	0x40004c00
 80058b8:	40005000 	.word	0x40005000
 80058bc:	40011400 	.word	0x40011400
 80058c0:	40007800 	.word	0x40007800
 80058c4:	40007c00 	.word	0x40007c00
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	d006      	beq.n	80058dc <UART_SetConfig+0x330>
 80058ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058d2:	d009      	beq.n	80058e8 <UART_SetConfig+0x33c>
 80058d4:	e00b      	b.n	80058ee <UART_SetConfig+0x342>
 80058d6:	2300      	movs	r3, #0
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e00e      	b.n	80058fa <UART_SetConfig+0x34e>
 80058dc:	2302      	movs	r3, #2
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e00b      	b.n	80058fa <UART_SetConfig+0x34e>
 80058e2:	2304      	movs	r3, #4
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e008      	b.n	80058fa <UART_SetConfig+0x34e>
 80058e8:	2308      	movs	r3, #8
 80058ea:	77fb      	strb	r3, [r7, #31]
 80058ec:	e005      	b.n	80058fa <UART_SetConfig+0x34e>
 80058ee:	2310      	movs	r3, #16
 80058f0:	77fb      	strb	r3, [r7, #31]
 80058f2:	bf00      	nop
 80058f4:	e001      	b.n	80058fa <UART_SetConfig+0x34e>
 80058f6:	2310      	movs	r3, #16
 80058f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005902:	d17f      	bne.n	8005a04 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	2b08      	cmp	r3, #8
 8005908:	d85c      	bhi.n	80059c4 <UART_SetConfig+0x418>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x364>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005935 	.word	0x08005935
 8005914:	08005955 	.word	0x08005955
 8005918:	08005975 	.word	0x08005975
 800591c:	080059c5 	.word	0x080059c5
 8005920:	0800598d 	.word	0x0800598d
 8005924:	080059c5 	.word	0x080059c5
 8005928:	080059c5 	.word	0x080059c5
 800592c:	080059c5 	.word	0x080059c5
 8005930:	080059ad 	.word	0x080059ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fe faf2 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8005938:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	005a      	lsls	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	b29b      	uxth	r3, r3
 8005950:	61bb      	str	r3, [r7, #24]
        break;
 8005952:	e03a      	b.n	80059ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7fe faf6 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8005958:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	005a      	lsls	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	b29b      	uxth	r3, r3
 8005970:	61bb      	str	r3, [r7, #24]
        break;
 8005972:	e02a      	b.n	80059ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	085a      	lsrs	r2, r3, #1
 800597a:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <UART_SetConfig+0x54c>)
 800597c:	4413      	add	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6852      	ldr	r2, [r2, #4]
 8005982:	fbb3 f3f2 	udiv	r3, r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	61bb      	str	r3, [r7, #24]
        break;
 800598a:	e01e      	b.n	80059ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598c:	f7fe f9e2 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8005990:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	005a      	lsls	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	441a      	add	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	61bb      	str	r3, [r7, #24]
        break;
 80059aa:	e00e      	b.n	80059ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	b29b      	uxth	r3, r3
 80059c0:	61bb      	str	r3, [r7, #24]
        break;
 80059c2:	e002      	b.n	80059ca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
        break;
 80059c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d916      	bls.n	80059fe <UART_SetConfig+0x452>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d6:	d212      	bcs.n	80059fe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f023 030f 	bic.w	r3, r3, #15
 80059e0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	897a      	ldrh	r2, [r7, #10]
 80059fa:	60da      	str	r2, [r3, #12]
 80059fc:	e070      	b.n	8005ae0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
 8005a02:	e06d      	b.n	8005ae0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005a04:	7ffb      	ldrb	r3, [r7, #31]
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d859      	bhi.n	8005abe <UART_SetConfig+0x512>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x464>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005abf 	.word	0x08005abf
 8005a20:	08005a89 	.word	0x08005a89
 8005a24:	08005abf 	.word	0x08005abf
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005abf 	.word	0x08005abf
 8005a30:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fe fa72 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8005a38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	085a      	lsrs	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	441a      	add	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	61bb      	str	r3, [r7, #24]
        break;
 8005a50:	e038      	b.n	8005ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a52:	f7fe fa77 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8005a56:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	085a      	lsrs	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
        break;
 8005a6e:	e029      	b.n	8005ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	085a      	lsrs	r2, r3, #1
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <UART_SetConfig+0x550>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6852      	ldr	r2, [r2, #4]
 8005a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	61bb      	str	r3, [r7, #24]
        break;
 8005a86:	e01d      	b.n	8005ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a88:	f7fe f964 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8005a8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	085a      	lsrs	r2, r3, #1
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	441a      	add	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	61bb      	str	r3, [r7, #24]
        break;
 8005aa4:	e00e      	b.n	8005ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	61bb      	str	r3, [r7, #24]
        break;
 8005abc:	e002      	b.n	8005ac4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
        break;
 8005ac2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	d908      	bls.n	8005adc <UART_SetConfig+0x530>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d204      	bcs.n	8005adc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	e001      	b.n	8005ae0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	01e84800 	.word	0x01e84800
 8005afc:	00f42400 	.word	0x00f42400

08005b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01a      	beq.n	8005c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfe:	d10a      	bne.n	8005c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c52:	f7fb fe59 	bl	8001908 <HAL_GetTick>
 8005c56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d10e      	bne.n	8005c84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f82a 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e020      	b.n	8005cc6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d10e      	bne.n	8005cb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f814 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e00a      	b.n	8005cc6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	e05d      	b.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d059      	beq.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce8:	f7fb fe0e 	bl	8001908 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11b      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e042      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02b      	beq.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d52:	d123      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e00f      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d092      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	f107 001c 	add.w	r0, r7, #28
 8005dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d120      	bne.n	8005e1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <USB_CoreInit+0xac>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d105      	bne.n	8005e12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa52 	bl	80062bc <USB_CoreReset>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
 8005e1c:	e010      	b.n	8005e40 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa46 	bl	80062bc <USB_CoreReset>
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d10b      	bne.n	8005e5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f043 0206 	orr.w	r2, r3, #6
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f043 0220 	orr.w	r2, r3, #32
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e6a:	b004      	add	sp, #16
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	ffbdffbf 	.word	0xffbdffbf

08005e74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 0201 	bic.w	r2, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d106      	bne.n	8005ec2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e00b      	b.n	8005eda <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
 8005ed4:	e001      	b.n	8005eda <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e003      	b.n	8005ee2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005eda:	2032      	movs	r0, #50	; 0x32
 8005edc:	f7fb fd20 	bl	8001920 <HAL_Delay>

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eec:	b084      	sub	sp, #16
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e009      	b.n	8005f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3340      	adds	r3, #64	; 0x40
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b0e      	cmp	r3, #14
 8005f24:	d9f2      	bls.n	8005f0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11c      	bne.n	8005f66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e005      	b.n	8005f72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f84:	4619      	mov	r1, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	680b      	ldr	r3, [r1, #0]
 8005f90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d10c      	bne.n	8005fb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f959 	bl	8006258 <USB_SetDevSpeed>
 8005fa6:	e018      	b.n	8005fda <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fa8:	2101      	movs	r1, #1
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f954 	bl	8006258 <USB_SetDevSpeed>
 8005fb0:	e013      	b.n	8005fda <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d10c      	bne.n	8005fd2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f949 	bl	8006258 <USB_SetDevSpeed>
 8005fc6:	e008      	b.n	8005fda <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fc8:	2101      	movs	r1, #1
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f944 	bl	8006258 <USB_SetDevSpeed>
 8005fd0:	e003      	b.n	8005fda <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fd2:	2103      	movs	r1, #3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f93f 	bl	8006258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fda:	2110      	movs	r1, #16
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f8f3 	bl	80061c8 <USB_FlushTxFifo>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f911 	bl	8006214 <USB_FlushRxFifo>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	461a      	mov	r2, r3
 8006004:	2300      	movs	r3, #0
 8006006:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	461a      	mov	r2, r3
 8006010:	2300      	movs	r3, #0
 8006012:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	461a      	mov	r2, r3
 800601c:	2300      	movs	r3, #0
 800601e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	e043      	b.n	80060ae <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603c:	d118      	bne.n	8006070 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	461a      	mov	r2, r3
 8006052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	e013      	b.n	8006082 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e008      	b.n	8006082 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	461a      	mov	r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	461a      	mov	r2, r3
 8006090:	2300      	movs	r3, #0
 8006092:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	461a      	mov	r2, r3
 80060a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	3301      	adds	r3, #1
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d3b7      	bcc.n	8006026 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e043      	b.n	8006144 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d2:	d118      	bne.n	8006106 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	461a      	mov	r2, r3
 80060e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e013      	b.n	8006118 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e008      	b.n	8006118 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	461a      	mov	r2, r3
 8006114:	2300      	movs	r3, #0
 8006116:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	461a      	mov	r2, r3
 8006126:	2300      	movs	r3, #0
 8006128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	461a      	mov	r2, r3
 8006138:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800613c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d3b7      	bcc.n	80060bc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800615a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800615e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800616c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f043 0210 	orr.w	r2, r3, #16
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <USB_DevInit+0x2d4>)
 8006186:	4313      	orrs	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800618c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f043 0208 	orr.w	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800619e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d105      	bne.n	80061b0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699a      	ldr	r2, [r3, #24]
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <USB_DevInit+0x2d8>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061bc:	b004      	add	sp, #16
 80061be:	4770      	bx	lr
 80061c0:	803c3800 	.word	0x803c3800
 80061c4:	40000004 	.word	0x40000004

080061c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	019b      	lsls	r3, r3, #6
 80061da:	f043 0220 	orr.w	r2, r3, #32
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3301      	adds	r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <USB_FlushTxFifo+0x48>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e006      	b.n	8006202 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d0f0      	beq.n	80061e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	00030d40 	.word	0x00030d40

08006214 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2210      	movs	r2, #16
 8006224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <USB_FlushRxFifo+0x40>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e006      	b.n	8006246 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b10      	cmp	r3, #16
 8006242:	d0f0      	beq.n	8006226 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	00030d40 	.word	0x00030d40

08006258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006278:	4313      	orrs	r3, r2
 800627a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a4:	f043 0302 	orr.w	r3, r3, #2
 80062a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80062aa:	2003      	movs	r0, #3
 80062ac:	f7fb fb38 	bl	8001920 <HAL_Delay>

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4a13      	ldr	r2, [pc, #76]	; (8006320 <USB_CoreReset+0x64>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e01b      	b.n	8006312 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	daf2      	bge.n	80062c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f043 0201 	orr.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <USB_CoreReset+0x64>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e006      	b.n	8006312 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b01      	cmp	r3, #1
 800630e:	d0f0      	beq.n	80062f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	00030d40 	.word	0x00030d40

08006324 <__errno>:
 8006324:	4b01      	ldr	r3, [pc, #4]	; (800632c <__errno+0x8>)
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	2000000c 	.word	0x2000000c

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4e0d      	ldr	r6, [pc, #52]	; (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	; (800636c <__libc_init_array+0x3c>)
 8006336:	1ba4      	subs	r4, r4, r6
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2500      	movs	r5, #0
 800633c:	42a5      	cmp	r5, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4e0b      	ldr	r6, [pc, #44]	; (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	; (8006374 <__libc_init_array+0x44>)
 8006344:	f001 ffd0 	bl	80082e8 <_init>
 8006348:	1ba4      	subs	r4, r4, r6
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2500      	movs	r5, #0
 800634e:	42a5      	cmp	r5, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006358:	4798      	blx	r3
 800635a:	3501      	adds	r5, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006362:	4798      	blx	r3
 8006364:	3501      	adds	r5, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	080085b0 	.word	0x080085b0
 800636c:	080085b0 	.word	0x080085b0
 8006370:	080085b0 	.word	0x080085b0
 8006374:	080085b4 	.word	0x080085b4

08006378 <malloc>:
 8006378:	4b02      	ldr	r3, [pc, #8]	; (8006384 <malloc+0xc>)
 800637a:	4601      	mov	r1, r0
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	f000 b859 	b.w	8006434 <_malloc_r>
 8006382:	bf00      	nop
 8006384:	2000000c 	.word	0x2000000c

08006388 <memset>:
 8006388:	4402      	add	r2, r0
 800638a:	4603      	mov	r3, r0
 800638c:	4293      	cmp	r3, r2
 800638e:	d100      	bne.n	8006392 <memset+0xa>
 8006390:	4770      	bx	lr
 8006392:	f803 1b01 	strb.w	r1, [r3], #1
 8006396:	e7f9      	b.n	800638c <memset+0x4>

08006398 <_free_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	2900      	cmp	r1, #0
 800639e:	d045      	beq.n	800642c <_free_r+0x94>
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f0c      	subs	r4, r1, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	18e4      	addlt	r4, r4, r3
 80063ac:	f001 faf9 	bl	80079a2 <__malloc_lock>
 80063b0:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <_free_r+0x98>)
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	4610      	mov	r0, r2
 80063b6:	b933      	cbnz	r3, 80063c6 <_free_r+0x2e>
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	6014      	str	r4, [r2, #0]
 80063bc:	4628      	mov	r0, r5
 80063be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c2:	f001 baef 	b.w	80079a4 <__malloc_unlock>
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	d90c      	bls.n	80063e4 <_free_r+0x4c>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	1862      	adds	r2, r4, r1
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bf04      	itt	eq
 80063d2:	681a      	ldreq	r2, [r3, #0]
 80063d4:	685b      	ldreq	r3, [r3, #4]
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	bf04      	itt	eq
 80063da:	1852      	addeq	r2, r2, r1
 80063dc:	6022      	streq	r2, [r4, #0]
 80063de:	6004      	str	r4, [r0, #0]
 80063e0:	e7ec      	b.n	80063bc <_free_r+0x24>
 80063e2:	4613      	mov	r3, r2
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	b10a      	cbz	r2, 80063ec <_free_r+0x54>
 80063e8:	42a2      	cmp	r2, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x4a>
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	1858      	adds	r0, r3, r1
 80063f0:	42a0      	cmp	r0, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x74>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	4401      	add	r1, r0
 80063f8:	1858      	adds	r0, r3, r1
 80063fa:	4282      	cmp	r2, r0
 80063fc:	6019      	str	r1, [r3, #0]
 80063fe:	d1dd      	bne.n	80063bc <_free_r+0x24>
 8006400:	6810      	ldr	r0, [r2, #0]
 8006402:	6852      	ldr	r2, [r2, #4]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	4401      	add	r1, r0
 8006408:	6019      	str	r1, [r3, #0]
 800640a:	e7d7      	b.n	80063bc <_free_r+0x24>
 800640c:	d902      	bls.n	8006414 <_free_r+0x7c>
 800640e:	230c      	movs	r3, #12
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	e7d3      	b.n	80063bc <_free_r+0x24>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	1821      	adds	r1, r4, r0
 8006418:	428a      	cmp	r2, r1
 800641a:	bf04      	itt	eq
 800641c:	6811      	ldreq	r1, [r2, #0]
 800641e:	6852      	ldreq	r2, [r2, #4]
 8006420:	6062      	str	r2, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	605c      	str	r4, [r3, #4]
 800642a:	e7c7      	b.n	80063bc <_free_r+0x24>
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	bf00      	nop
 8006430:	20000230 	.word	0x20000230

08006434 <_malloc_r>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	1ccd      	adds	r5, r1, #3
 8006438:	f025 0503 	bic.w	r5, r5, #3
 800643c:	3508      	adds	r5, #8
 800643e:	2d0c      	cmp	r5, #12
 8006440:	bf38      	it	cc
 8006442:	250c      	movcc	r5, #12
 8006444:	2d00      	cmp	r5, #0
 8006446:	4606      	mov	r6, r0
 8006448:	db01      	blt.n	800644e <_malloc_r+0x1a>
 800644a:	42a9      	cmp	r1, r5
 800644c:	d903      	bls.n	8006456 <_malloc_r+0x22>
 800644e:	230c      	movs	r3, #12
 8006450:	6033      	str	r3, [r6, #0]
 8006452:	2000      	movs	r0, #0
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	f001 faa4 	bl	80079a2 <__malloc_lock>
 800645a:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <_malloc_r+0xac>)
 800645c:	6814      	ldr	r4, [r2, #0]
 800645e:	4621      	mov	r1, r4
 8006460:	b991      	cbnz	r1, 8006488 <_malloc_r+0x54>
 8006462:	4c20      	ldr	r4, [pc, #128]	; (80064e4 <_malloc_r+0xb0>)
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	b91b      	cbnz	r3, 8006470 <_malloc_r+0x3c>
 8006468:	4630      	mov	r0, r6
 800646a:	f000 fc79 	bl	8006d60 <_sbrk_r>
 800646e:	6020      	str	r0, [r4, #0]
 8006470:	4629      	mov	r1, r5
 8006472:	4630      	mov	r0, r6
 8006474:	f000 fc74 	bl	8006d60 <_sbrk_r>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d124      	bne.n	80064c6 <_malloc_r+0x92>
 800647c:	230c      	movs	r3, #12
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	4630      	mov	r0, r6
 8006482:	f001 fa8f 	bl	80079a4 <__malloc_unlock>
 8006486:	e7e4      	b.n	8006452 <_malloc_r+0x1e>
 8006488:	680b      	ldr	r3, [r1, #0]
 800648a:	1b5b      	subs	r3, r3, r5
 800648c:	d418      	bmi.n	80064c0 <_malloc_r+0x8c>
 800648e:	2b0b      	cmp	r3, #11
 8006490:	d90f      	bls.n	80064b2 <_malloc_r+0x7e>
 8006492:	600b      	str	r3, [r1, #0]
 8006494:	50cd      	str	r5, [r1, r3]
 8006496:	18cc      	adds	r4, r1, r3
 8006498:	4630      	mov	r0, r6
 800649a:	f001 fa83 	bl	80079a4 <__malloc_unlock>
 800649e:	f104 000b 	add.w	r0, r4, #11
 80064a2:	1d23      	adds	r3, r4, #4
 80064a4:	f020 0007 	bic.w	r0, r0, #7
 80064a8:	1ac3      	subs	r3, r0, r3
 80064aa:	d0d3      	beq.n	8006454 <_malloc_r+0x20>
 80064ac:	425a      	negs	r2, r3
 80064ae:	50e2      	str	r2, [r4, r3]
 80064b0:	e7d0      	b.n	8006454 <_malloc_r+0x20>
 80064b2:	428c      	cmp	r4, r1
 80064b4:	684b      	ldr	r3, [r1, #4]
 80064b6:	bf16      	itet	ne
 80064b8:	6063      	strne	r3, [r4, #4]
 80064ba:	6013      	streq	r3, [r2, #0]
 80064bc:	460c      	movne	r4, r1
 80064be:	e7eb      	b.n	8006498 <_malloc_r+0x64>
 80064c0:	460c      	mov	r4, r1
 80064c2:	6849      	ldr	r1, [r1, #4]
 80064c4:	e7cc      	b.n	8006460 <_malloc_r+0x2c>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d005      	beq.n	80064dc <_malloc_r+0xa8>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 fc44 	bl	8006d60 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d0cf      	beq.n	800647c <_malloc_r+0x48>
 80064dc:	6025      	str	r5, [r4, #0]
 80064de:	e7db      	b.n	8006498 <_malloc_r+0x64>
 80064e0:	20000230 	.word	0x20000230
 80064e4:	20000234 	.word	0x20000234

080064e8 <__cvt>:
 80064e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ea:	ed2d 8b02 	vpush	{d8}
 80064ee:	eeb0 8b40 	vmov.f64	d8, d0
 80064f2:	b085      	sub	sp, #20
 80064f4:	4617      	mov	r7, r2
 80064f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80064f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80064fa:	ee18 2a90 	vmov	r2, s17
 80064fe:	f025 0520 	bic.w	r5, r5, #32
 8006502:	2a00      	cmp	r2, #0
 8006504:	bfb6      	itet	lt
 8006506:	222d      	movlt	r2, #45	; 0x2d
 8006508:	2200      	movge	r2, #0
 800650a:	eeb1 8b40 	vneglt.f64	d8, d0
 800650e:	2d46      	cmp	r5, #70	; 0x46
 8006510:	460c      	mov	r4, r1
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	d004      	beq.n	8006520 <__cvt+0x38>
 8006516:	2d45      	cmp	r5, #69	; 0x45
 8006518:	d100      	bne.n	800651c <__cvt+0x34>
 800651a:	3401      	adds	r4, #1
 800651c:	2102      	movs	r1, #2
 800651e:	e000      	b.n	8006522 <__cvt+0x3a>
 8006520:	2103      	movs	r1, #3
 8006522:	ab03      	add	r3, sp, #12
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	ab02      	add	r3, sp, #8
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4622      	mov	r2, r4
 800652c:	4633      	mov	r3, r6
 800652e:	eeb0 0b48 	vmov.f64	d0, d8
 8006532:	f000 fcd1 	bl	8006ed8 <_dtoa_r>
 8006536:	2d47      	cmp	r5, #71	; 0x47
 8006538:	d101      	bne.n	800653e <__cvt+0x56>
 800653a:	07fb      	lsls	r3, r7, #31
 800653c:	d51e      	bpl.n	800657c <__cvt+0x94>
 800653e:	2d46      	cmp	r5, #70	; 0x46
 8006540:	eb00 0304 	add.w	r3, r0, r4
 8006544:	d10c      	bne.n	8006560 <__cvt+0x78>
 8006546:	7802      	ldrb	r2, [r0, #0]
 8006548:	2a30      	cmp	r2, #48	; 0x30
 800654a:	d107      	bne.n	800655c <__cvt+0x74>
 800654c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006554:	bf1c      	itt	ne
 8006556:	f1c4 0401 	rsbne	r4, r4, #1
 800655a:	6034      	strne	r4, [r6, #0]
 800655c:	6832      	ldr	r2, [r6, #0]
 800655e:	4413      	add	r3, r2
 8006560:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006568:	d007      	beq.n	800657a <__cvt+0x92>
 800656a:	2130      	movs	r1, #48	; 0x30
 800656c:	9a03      	ldr	r2, [sp, #12]
 800656e:	429a      	cmp	r2, r3
 8006570:	d204      	bcs.n	800657c <__cvt+0x94>
 8006572:	1c54      	adds	r4, r2, #1
 8006574:	9403      	str	r4, [sp, #12]
 8006576:	7011      	strb	r1, [r2, #0]
 8006578:	e7f8      	b.n	800656c <__cvt+0x84>
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006580:	1a1b      	subs	r3, r3, r0
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	b005      	add	sp, #20
 8006586:	ecbd 8b02 	vpop	{d8}
 800658a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800658c <__exponent>:
 800658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800658e:	2900      	cmp	r1, #0
 8006590:	4604      	mov	r4, r0
 8006592:	bfba      	itte	lt
 8006594:	4249      	neglt	r1, r1
 8006596:	232d      	movlt	r3, #45	; 0x2d
 8006598:	232b      	movge	r3, #43	; 0x2b
 800659a:	2909      	cmp	r1, #9
 800659c:	f804 2b02 	strb.w	r2, [r4], #2
 80065a0:	7043      	strb	r3, [r0, #1]
 80065a2:	dd20      	ble.n	80065e6 <__exponent+0x5a>
 80065a4:	f10d 0307 	add.w	r3, sp, #7
 80065a8:	461f      	mov	r7, r3
 80065aa:	260a      	movs	r6, #10
 80065ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80065b0:	fb06 1115 	mls	r1, r6, r5, r1
 80065b4:	3130      	adds	r1, #48	; 0x30
 80065b6:	2d09      	cmp	r5, #9
 80065b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065bc:	f103 32ff 	add.w	r2, r3, #4294967295
 80065c0:	4629      	mov	r1, r5
 80065c2:	dc09      	bgt.n	80065d8 <__exponent+0x4c>
 80065c4:	3130      	adds	r1, #48	; 0x30
 80065c6:	3b02      	subs	r3, #2
 80065c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065cc:	42bb      	cmp	r3, r7
 80065ce:	4622      	mov	r2, r4
 80065d0:	d304      	bcc.n	80065dc <__exponent+0x50>
 80065d2:	1a10      	subs	r0, r2, r0
 80065d4:	b003      	add	sp, #12
 80065d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d8:	4613      	mov	r3, r2
 80065da:	e7e7      	b.n	80065ac <__exponent+0x20>
 80065dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065e0:	f804 2b01 	strb.w	r2, [r4], #1
 80065e4:	e7f2      	b.n	80065cc <__exponent+0x40>
 80065e6:	2330      	movs	r3, #48	; 0x30
 80065e8:	4419      	add	r1, r3
 80065ea:	7083      	strb	r3, [r0, #2]
 80065ec:	1d02      	adds	r2, r0, #4
 80065ee:	70c1      	strb	r1, [r0, #3]
 80065f0:	e7ef      	b.n	80065d2 <__exponent+0x46>
 80065f2:	0000      	movs	r0, r0
 80065f4:	0000      	movs	r0, r0
	...

080065f8 <_printf_float>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	b08d      	sub	sp, #52	; 0x34
 80065fe:	460c      	mov	r4, r1
 8006600:	4616      	mov	r6, r2
 8006602:	461f      	mov	r7, r3
 8006604:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006608:	4605      	mov	r5, r0
 800660a:	f001 f9b1 	bl	8007970 <_localeconv_r>
 800660e:	f8d0 b000 	ldr.w	fp, [r0]
 8006612:	4658      	mov	r0, fp
 8006614:	f7f9 fe14 	bl	8000240 <strlen>
 8006618:	2300      	movs	r3, #0
 800661a:	930a      	str	r3, [sp, #40]	; 0x28
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	9005      	str	r0, [sp, #20]
 8006622:	3307      	adds	r3, #7
 8006624:	f023 0307 	bic.w	r3, r3, #7
 8006628:	f103 0108 	add.w	r1, r3, #8
 800662c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	f8c8 1000 	str.w	r1, [r8]
 8006636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800663a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800663e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80068c8 <_printf_float+0x2d0>
 8006642:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006646:	eeb0 6bc0 	vabs.f64	d6, d0
 800664a:	eeb4 6b47 	vcmp.f64	d6, d7
 800664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006652:	dd24      	ble.n	800669e <_printf_float+0xa6>
 8006654:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665c:	d502      	bpl.n	8006664 <_printf_float+0x6c>
 800665e:	232d      	movs	r3, #45	; 0x2d
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006664:	499a      	ldr	r1, [pc, #616]	; (80068d0 <_printf_float+0x2d8>)
 8006666:	4b9b      	ldr	r3, [pc, #620]	; (80068d4 <_printf_float+0x2dc>)
 8006668:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800666c:	bf8c      	ite	hi
 800666e:	4688      	movhi	r8, r1
 8006670:	4698      	movls	r8, r3
 8006672:	f022 0204 	bic.w	r2, r2, #4
 8006676:	2303      	movs	r3, #3
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	f04f 0a00 	mov.w	sl, #0
 8006680:	9700      	str	r7, [sp, #0]
 8006682:	4633      	mov	r3, r6
 8006684:	aa0b      	add	r2, sp, #44	; 0x2c
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f9e1 	bl	8006a50 <_printf_common>
 800668e:	3001      	adds	r0, #1
 8006690:	f040 8089 	bne.w	80067a6 <_printf_float+0x1ae>
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	b00d      	add	sp, #52	; 0x34
 800669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669e:	eeb4 0b40 	vcmp.f64	d0, d0
 80066a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a6:	d702      	bvc.n	80066ae <_printf_float+0xb6>
 80066a8:	498b      	ldr	r1, [pc, #556]	; (80068d8 <_printf_float+0x2e0>)
 80066aa:	4b8c      	ldr	r3, [pc, #560]	; (80068dc <_printf_float+0x2e4>)
 80066ac:	e7dc      	b.n	8006668 <_printf_float+0x70>
 80066ae:	6861      	ldr	r1, [r4, #4]
 80066b0:	1c4b      	adds	r3, r1, #1
 80066b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066b6:	ab0a      	add	r3, sp, #40	; 0x28
 80066b8:	a809      	add	r0, sp, #36	; 0x24
 80066ba:	d13b      	bne.n	8006734 <_printf_float+0x13c>
 80066bc:	2106      	movs	r1, #6
 80066be:	6061      	str	r1, [r4, #4]
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80066c8:	e9cd 0900 	strd	r0, r9, [sp]
 80066cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	6861      	ldr	r1, [r4, #4]
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7ff ff07 	bl	80064e8 <__cvt>
 80066da:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80066de:	2b47      	cmp	r3, #71	; 0x47
 80066e0:	4680      	mov	r8, r0
 80066e2:	d109      	bne.n	80066f8 <_printf_float+0x100>
 80066e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e6:	1cd8      	adds	r0, r3, #3
 80066e8:	db02      	blt.n	80066f0 <_printf_float+0xf8>
 80066ea:	6862      	ldr	r2, [r4, #4]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	dd47      	ble.n	8006780 <_printf_float+0x188>
 80066f0:	f1a9 0902 	sub.w	r9, r9, #2
 80066f4:	fa5f f989 	uxtb.w	r9, r9
 80066f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066fe:	d824      	bhi.n	800674a <_printf_float+0x152>
 8006700:	3901      	subs	r1, #1
 8006702:	464a      	mov	r2, r9
 8006704:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006708:	9109      	str	r1, [sp, #36]	; 0x24
 800670a:	f7ff ff3f 	bl	800658c <__exponent>
 800670e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006710:	1813      	adds	r3, r2, r0
 8006712:	2a01      	cmp	r2, #1
 8006714:	4682      	mov	sl, r0
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	dc02      	bgt.n	8006720 <_printf_float+0x128>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	07d1      	lsls	r1, r2, #31
 800671e:	d501      	bpl.n	8006724 <_printf_float+0x12c>
 8006720:	3301      	adds	r3, #1
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0a9      	beq.n	8006680 <_printf_float+0x88>
 800672c:	232d      	movs	r3, #45	; 0x2d
 800672e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006732:	e7a5      	b.n	8006680 <_printf_float+0x88>
 8006734:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006738:	f000 8178 	beq.w	8006a2c <_printf_float+0x434>
 800673c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006740:	d1be      	bne.n	80066c0 <_printf_float+0xc8>
 8006742:	2900      	cmp	r1, #0
 8006744:	d1bc      	bne.n	80066c0 <_printf_float+0xc8>
 8006746:	2101      	movs	r1, #1
 8006748:	e7b9      	b.n	80066be <_printf_float+0xc6>
 800674a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800674e:	d119      	bne.n	8006784 <_printf_float+0x18c>
 8006750:	2900      	cmp	r1, #0
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	dd0c      	ble.n	8006770 <_printf_float+0x178>
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	b913      	cbnz	r3, 8006760 <_printf_float+0x168>
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	07d2      	lsls	r2, r2, #31
 800675e:	d502      	bpl.n	8006766 <_printf_float+0x16e>
 8006760:	3301      	adds	r3, #1
 8006762:	440b      	add	r3, r1
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	65a3      	str	r3, [r4, #88]	; 0x58
 800676a:	f04f 0a00 	mov.w	sl, #0
 800676e:	e7d9      	b.n	8006724 <_printf_float+0x12c>
 8006770:	b913      	cbnz	r3, 8006778 <_printf_float+0x180>
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	07d0      	lsls	r0, r2, #31
 8006776:	d501      	bpl.n	800677c <_printf_float+0x184>
 8006778:	3302      	adds	r3, #2
 800677a:	e7f3      	b.n	8006764 <_printf_float+0x16c>
 800677c:	2301      	movs	r3, #1
 800677e:	e7f1      	b.n	8006764 <_printf_float+0x16c>
 8006780:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006784:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006788:	4293      	cmp	r3, r2
 800678a:	db05      	blt.n	8006798 <_printf_float+0x1a0>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	07d1      	lsls	r1, r2, #31
 8006792:	d5e8      	bpl.n	8006766 <_printf_float+0x16e>
 8006794:	3301      	adds	r3, #1
 8006796:	e7e5      	b.n	8006764 <_printf_float+0x16c>
 8006798:	2b00      	cmp	r3, #0
 800679a:	bfd4      	ite	le
 800679c:	f1c3 0302 	rsble	r3, r3, #2
 80067a0:	2301      	movgt	r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	e7de      	b.n	8006764 <_printf_float+0x16c>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	055a      	lsls	r2, r3, #21
 80067aa:	d407      	bmi.n	80067bc <_printf_float+0x1c4>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	4642      	mov	r2, r8
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	d12a      	bne.n	8006810 <_printf_float+0x218>
 80067ba:	e76b      	b.n	8006694 <_printf_float+0x9c>
 80067bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067c0:	f240 80de 	bls.w	8006980 <_printf_float+0x388>
 80067c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80067c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80067cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d0:	d133      	bne.n	800683a <_printf_float+0x242>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4a42      	ldr	r2, [pc, #264]	; (80068e0 <_printf_float+0x2e8>)
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f af59 	beq.w	8006694 <_printf_float+0x9c>
 80067e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e6:	429a      	cmp	r2, r3
 80067e8:	db02      	blt.n	80067f0 <_printf_float+0x1f8>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	07d8      	lsls	r0, r3, #31
 80067ee:	d50f      	bpl.n	8006810 <_printf_float+0x218>
 80067f0:	9b05      	ldr	r3, [sp, #20]
 80067f2:	465a      	mov	r2, fp
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af4a 	beq.w	8006694 <_printf_float+0x9c>
 8006800:	f04f 0800 	mov.w	r8, #0
 8006804:	f104 091a 	add.w	r9, r4, #26
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	3b01      	subs	r3, #1
 800680c:	4543      	cmp	r3, r8
 800680e:	dc09      	bgt.n	8006824 <_printf_float+0x22c>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	f100 8105 	bmi.w	8006a22 <_printf_float+0x42a>
 8006818:	68e0      	ldr	r0, [r4, #12]
 800681a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800681c:	4298      	cmp	r0, r3
 800681e:	bfb8      	it	lt
 8006820:	4618      	movlt	r0, r3
 8006822:	e739      	b.n	8006698 <_printf_float+0xa0>
 8006824:	2301      	movs	r3, #1
 8006826:	464a      	mov	r2, r9
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af30 	beq.w	8006694 <_printf_float+0x9c>
 8006834:	f108 0801 	add.w	r8, r8, #1
 8006838:	e7e6      	b.n	8006808 <_printf_float+0x210>
 800683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	dc2b      	bgt.n	8006898 <_printf_float+0x2a0>
 8006840:	2301      	movs	r3, #1
 8006842:	4a27      	ldr	r2, [pc, #156]	; (80068e0 <_printf_float+0x2e8>)
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af22 	beq.w	8006694 <_printf_float+0x9c>
 8006850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006852:	b923      	cbnz	r3, 800685e <_printf_float+0x266>
 8006854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006856:	b913      	cbnz	r3, 800685e <_printf_float+0x266>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	07d9      	lsls	r1, r3, #31
 800685c:	d5d8      	bpl.n	8006810 <_printf_float+0x218>
 800685e:	9b05      	ldr	r3, [sp, #20]
 8006860:	465a      	mov	r2, fp
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f af13 	beq.w	8006694 <_printf_float+0x9c>
 800686e:	f04f 0900 	mov.w	r9, #0
 8006872:	f104 0a1a 	add.w	sl, r4, #26
 8006876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006878:	425b      	negs	r3, r3
 800687a:	454b      	cmp	r3, r9
 800687c:	dc01      	bgt.n	8006882 <_printf_float+0x28a>
 800687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006880:	e795      	b.n	80067ae <_printf_float+0x1b6>
 8006882:	2301      	movs	r3, #1
 8006884:	4652      	mov	r2, sl
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f af01 	beq.w	8006694 <_printf_float+0x9c>
 8006892:	f109 0901 	add.w	r9, r9, #1
 8006896:	e7ee      	b.n	8006876 <_printf_float+0x27e>
 8006898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800689a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689c:	429a      	cmp	r2, r3
 800689e:	bfa8      	it	ge
 80068a0:	461a      	movge	r2, r3
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	4691      	mov	r9, r2
 80068a6:	dd07      	ble.n	80068b8 <_printf_float+0x2c0>
 80068a8:	4613      	mov	r3, r2
 80068aa:	4631      	mov	r1, r6
 80068ac:	4642      	mov	r2, r8
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f aeee 	beq.w	8006694 <_printf_float+0x9c>
 80068b8:	f104 031a 	add.w	r3, r4, #26
 80068bc:	f04f 0a00 	mov.w	sl, #0
 80068c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068c4:	9307      	str	r3, [sp, #28]
 80068c6:	e017      	b.n	80068f8 <_printf_float+0x300>
 80068c8:	ffffffff 	.word	0xffffffff
 80068cc:	7fefffff 	.word	0x7fefffff
 80068d0:	08008350 	.word	0x08008350
 80068d4:	0800834c 	.word	0x0800834c
 80068d8:	08008358 	.word	0x08008358
 80068dc:	08008354 	.word	0x08008354
 80068e0:	0800835c 	.word	0x0800835c
 80068e4:	2301      	movs	r3, #1
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f aed0 	beq.w	8006694 <_printf_float+0x9c>
 80068f4:	f10a 0a01 	add.w	sl, sl, #1
 80068f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068fa:	9306      	str	r3, [sp, #24]
 80068fc:	eba3 0309 	sub.w	r3, r3, r9
 8006900:	4553      	cmp	r3, sl
 8006902:	dcef      	bgt.n	80068e4 <_printf_float+0x2ec>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	4498      	add	r8, r3
 8006908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690c:	429a      	cmp	r2, r3
 800690e:	db15      	blt.n	800693c <_printf_float+0x344>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07da      	lsls	r2, r3, #31
 8006914:	d412      	bmi.n	800693c <_printf_float+0x344>
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	9a06      	ldr	r2, [sp, #24]
 800691a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691c:	1a9a      	subs	r2, r3, r2
 800691e:	eba3 0a01 	sub.w	sl, r3, r1
 8006922:	4592      	cmp	sl, r2
 8006924:	bfa8      	it	ge
 8006926:	4692      	movge	sl, r2
 8006928:	f1ba 0f00 	cmp.w	sl, #0
 800692c:	dc0e      	bgt.n	800694c <_printf_float+0x354>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006936:	f104 091a 	add.w	r9, r4, #26
 800693a:	e019      	b.n	8006970 <_printf_float+0x378>
 800693c:	9b05      	ldr	r3, [sp, #20]
 800693e:	465a      	mov	r2, fp
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	d1e5      	bne.n	8006916 <_printf_float+0x31e>
 800694a:	e6a3      	b.n	8006694 <_printf_float+0x9c>
 800694c:	4653      	mov	r3, sl
 800694e:	4642      	mov	r2, r8
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	d1e9      	bne.n	800692e <_printf_float+0x336>
 800695a:	e69b      	b.n	8006694 <_printf_float+0x9c>
 800695c:	2301      	movs	r3, #1
 800695e:	464a      	mov	r2, r9
 8006960:	4631      	mov	r1, r6
 8006962:	4628      	mov	r0, r5
 8006964:	47b8      	blx	r7
 8006966:	3001      	adds	r0, #1
 8006968:	f43f ae94 	beq.w	8006694 <_printf_float+0x9c>
 800696c:	f108 0801 	add.w	r8, r8, #1
 8006970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	eba3 030a 	sub.w	r3, r3, sl
 800697a:	4543      	cmp	r3, r8
 800697c:	dcee      	bgt.n	800695c <_printf_float+0x364>
 800697e:	e747      	b.n	8006810 <_printf_float+0x218>
 8006980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006982:	2a01      	cmp	r2, #1
 8006984:	dc01      	bgt.n	800698a <_printf_float+0x392>
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d539      	bpl.n	80069fe <_printf_float+0x406>
 800698a:	2301      	movs	r3, #1
 800698c:	4642      	mov	r2, r8
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f ae7d 	beq.w	8006694 <_printf_float+0x9c>
 800699a:	9b05      	ldr	r3, [sp, #20]
 800699c:	465a      	mov	r2, fp
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	f43f ae73 	beq.w	8006694 <_printf_float+0x9c>
 80069ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80069b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80069c0:	d018      	beq.n	80069f4 <_printf_float+0x3fc>
 80069c2:	4642      	mov	r2, r8
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	d10e      	bne.n	80069ec <_printf_float+0x3f4>
 80069ce:	e661      	b.n	8006694 <_printf_float+0x9c>
 80069d0:	2301      	movs	r3, #1
 80069d2:	464a      	mov	r2, r9
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f ae5a 	beq.w	8006694 <_printf_float+0x9c>
 80069e0:	f108 0801 	add.w	r8, r8, #1
 80069e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4543      	cmp	r3, r8
 80069ea:	dcf1      	bgt.n	80069d0 <_printf_float+0x3d8>
 80069ec:	4653      	mov	r3, sl
 80069ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069f2:	e6dd      	b.n	80067b0 <_printf_float+0x1b8>
 80069f4:	f04f 0800 	mov.w	r8, #0
 80069f8:	f104 091a 	add.w	r9, r4, #26
 80069fc:	e7f2      	b.n	80069e4 <_printf_float+0x3ec>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e7df      	b.n	80069c2 <_printf_float+0x3ca>
 8006a02:	2301      	movs	r3, #1
 8006a04:	464a      	mov	r2, r9
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f ae41 	beq.w	8006694 <_printf_float+0x9c>
 8006a12:	f108 0801 	add.w	r8, r8, #1
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	4543      	cmp	r3, r8
 8006a1e:	dcf0      	bgt.n	8006a02 <_printf_float+0x40a>
 8006a20:	e6fa      	b.n	8006818 <_printf_float+0x220>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f104 0919 	add.w	r9, r4, #25
 8006a2a:	e7f4      	b.n	8006a16 <_printf_float+0x41e>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	f43f ae8a 	beq.w	8006746 <_printf_float+0x14e>
 8006a32:	f04f 0c00 	mov.w	ip, #0
 8006a36:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006a3a:	e9cd 0900 	strd	r0, r9, [sp]
 8006a3e:	6022      	str	r2, [r4, #0]
 8006a40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7ff fd4f 	bl	80064e8 <__cvt>
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	e64a      	b.n	80066e4 <_printf_float+0xec>
 8006a4e:	bf00      	nop

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4691      	mov	r9, r2
 8006a56:	461f      	mov	r7, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bfb8      	it	lt
 8006a64:	4613      	movlt	r3, r2
 8006a66:	f8c9 3000 	str.w	r3, [r9]
 8006a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	b112      	cbz	r2, 8006a7a <_printf_common+0x2a>
 8006a74:	3301      	adds	r3, #1
 8006a76:	f8c9 3000 	str.w	r3, [r9]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	0699      	lsls	r1, r3, #26
 8006a7e:	bf42      	ittt	mi
 8006a80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a84:	3302      	addmi	r3, #2
 8006a86:	f8c9 3000 	strmi.w	r3, [r9]
 8006a8a:	6825      	ldr	r5, [r4, #0]
 8006a8c:	f015 0506 	ands.w	r5, r5, #6
 8006a90:	d107      	bne.n	8006aa2 <_printf_common+0x52>
 8006a92:	f104 0a19 	add.w	sl, r4, #25
 8006a96:	68e3      	ldr	r3, [r4, #12]
 8006a98:	f8d9 2000 	ldr.w	r2, [r9]
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	42ab      	cmp	r3, r5
 8006aa0:	dc28      	bgt.n	8006af4 <_printf_common+0xa4>
 8006aa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	3300      	adds	r3, #0
 8006aaa:	bf18      	it	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	0692      	lsls	r2, r2, #26
 8006ab0:	d42d      	bmi.n	8006b0e <_printf_common+0xbe>
 8006ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	4630      	mov	r0, r6
 8006aba:	47c0      	blx	r8
 8006abc:	3001      	adds	r0, #1
 8006abe:	d020      	beq.n	8006b02 <_printf_common+0xb2>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	68e5      	ldr	r5, [r4, #12]
 8006ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ac8:	f003 0306 	and.w	r3, r3, #6
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	bf08      	it	eq
 8006ad0:	1aad      	subeq	r5, r5, r2
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	6922      	ldr	r2, [r4, #16]
 8006ad6:	bf0c      	ite	eq
 8006ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006adc:	2500      	movne	r5, #0
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	bfc4      	itt	gt
 8006ae2:	1a9b      	subgt	r3, r3, r2
 8006ae4:	18ed      	addgt	r5, r5, r3
 8006ae6:	f04f 0900 	mov.w	r9, #0
 8006aea:	341a      	adds	r4, #26
 8006aec:	454d      	cmp	r5, r9
 8006aee:	d11a      	bne.n	8006b26 <_printf_common+0xd6>
 8006af0:	2000      	movs	r0, #0
 8006af2:	e008      	b.n	8006b06 <_printf_common+0xb6>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4652      	mov	r2, sl
 8006af8:	4639      	mov	r1, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	47c0      	blx	r8
 8006afe:	3001      	adds	r0, #1
 8006b00:	d103      	bne.n	8006b0a <_printf_common+0xba>
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	e7c3      	b.n	8006a96 <_printf_common+0x46>
 8006b0e:	18e1      	adds	r1, r4, r3
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	2030      	movs	r0, #48	; 0x30
 8006b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b18:	4422      	add	r2, r4
 8006b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b22:	3302      	adds	r3, #2
 8006b24:	e7c5      	b.n	8006ab2 <_printf_common+0x62>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	47c0      	blx	r8
 8006b30:	3001      	adds	r0, #1
 8006b32:	d0e6      	beq.n	8006b02 <_printf_common+0xb2>
 8006b34:	f109 0901 	add.w	r9, r9, #1
 8006b38:	e7d8      	b.n	8006aec <_printf_common+0x9c>
	...

08006b3c <_printf_i>:
 8006b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b44:	460c      	mov	r4, r1
 8006b46:	7e09      	ldrb	r1, [r1, #24]
 8006b48:	b085      	sub	sp, #20
 8006b4a:	296e      	cmp	r1, #110	; 0x6e
 8006b4c:	4617      	mov	r7, r2
 8006b4e:	4606      	mov	r6, r0
 8006b50:	4698      	mov	r8, r3
 8006b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b54:	f000 80b3 	beq.w	8006cbe <_printf_i+0x182>
 8006b58:	d822      	bhi.n	8006ba0 <_printf_i+0x64>
 8006b5a:	2963      	cmp	r1, #99	; 0x63
 8006b5c:	d036      	beq.n	8006bcc <_printf_i+0x90>
 8006b5e:	d80a      	bhi.n	8006b76 <_printf_i+0x3a>
 8006b60:	2900      	cmp	r1, #0
 8006b62:	f000 80b9 	beq.w	8006cd8 <_printf_i+0x19c>
 8006b66:	2958      	cmp	r1, #88	; 0x58
 8006b68:	f000 8083 	beq.w	8006c72 <_printf_i+0x136>
 8006b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b74:	e032      	b.n	8006bdc <_printf_i+0xa0>
 8006b76:	2964      	cmp	r1, #100	; 0x64
 8006b78:	d001      	beq.n	8006b7e <_printf_i+0x42>
 8006b7a:	2969      	cmp	r1, #105	; 0x69
 8006b7c:	d1f6      	bne.n	8006b6c <_printf_i+0x30>
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	0605      	lsls	r5, r0, #24
 8006b84:	f103 0104 	add.w	r1, r3, #4
 8006b88:	d52a      	bpl.n	8006be0 <_printf_i+0xa4>
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da03      	bge.n	8006b9a <_printf_i+0x5e>
 8006b92:	222d      	movs	r2, #45	; 0x2d
 8006b94:	425b      	negs	r3, r3
 8006b96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b9a:	486f      	ldr	r0, [pc, #444]	; (8006d58 <_printf_i+0x21c>)
 8006b9c:	220a      	movs	r2, #10
 8006b9e:	e039      	b.n	8006c14 <_printf_i+0xd8>
 8006ba0:	2973      	cmp	r1, #115	; 0x73
 8006ba2:	f000 809d 	beq.w	8006ce0 <_printf_i+0x1a4>
 8006ba6:	d808      	bhi.n	8006bba <_printf_i+0x7e>
 8006ba8:	296f      	cmp	r1, #111	; 0x6f
 8006baa:	d020      	beq.n	8006bee <_printf_i+0xb2>
 8006bac:	2970      	cmp	r1, #112	; 0x70
 8006bae:	d1dd      	bne.n	8006b6c <_printf_i+0x30>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	f043 0320 	orr.w	r3, r3, #32
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	e003      	b.n	8006bc2 <_printf_i+0x86>
 8006bba:	2975      	cmp	r1, #117	; 0x75
 8006bbc:	d017      	beq.n	8006bee <_printf_i+0xb2>
 8006bbe:	2978      	cmp	r1, #120	; 0x78
 8006bc0:	d1d4      	bne.n	8006b6c <_printf_i+0x30>
 8006bc2:	2378      	movs	r3, #120	; 0x78
 8006bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bc8:	4864      	ldr	r0, [pc, #400]	; (8006d5c <_printf_i+0x220>)
 8006bca:	e055      	b.n	8006c78 <_printf_i+0x13c>
 8006bcc:	6813      	ldr	r3, [r2, #0]
 8006bce:	1d19      	adds	r1, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6011      	str	r1, [r2, #0]
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e08c      	b.n	8006cfa <_printf_i+0x1be>
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6011      	str	r1, [r2, #0]
 8006be4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006be8:	bf18      	it	ne
 8006bea:	b21b      	sxthne	r3, r3
 8006bec:	e7cf      	b.n	8006b8e <_printf_i+0x52>
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	6825      	ldr	r5, [r4, #0]
 8006bf2:	1d18      	adds	r0, r3, #4
 8006bf4:	6010      	str	r0, [r2, #0]
 8006bf6:	0628      	lsls	r0, r5, #24
 8006bf8:	d501      	bpl.n	8006bfe <_printf_i+0xc2>
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	e002      	b.n	8006c04 <_printf_i+0xc8>
 8006bfe:	0668      	lsls	r0, r5, #25
 8006c00:	d5fb      	bpl.n	8006bfa <_printf_i+0xbe>
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	4854      	ldr	r0, [pc, #336]	; (8006d58 <_printf_i+0x21c>)
 8006c06:	296f      	cmp	r1, #111	; 0x6f
 8006c08:	bf14      	ite	ne
 8006c0a:	220a      	movne	r2, #10
 8006c0c:	2208      	moveq	r2, #8
 8006c0e:	2100      	movs	r1, #0
 8006c10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c14:	6865      	ldr	r5, [r4, #4]
 8006c16:	60a5      	str	r5, [r4, #8]
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	f2c0 8095 	blt.w	8006d48 <_printf_i+0x20c>
 8006c1e:	6821      	ldr	r1, [r4, #0]
 8006c20:	f021 0104 	bic.w	r1, r1, #4
 8006c24:	6021      	str	r1, [r4, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d13d      	bne.n	8006ca6 <_printf_i+0x16a>
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	f040 808e 	bne.w	8006d4c <_printf_i+0x210>
 8006c30:	4665      	mov	r5, ip
 8006c32:	2a08      	cmp	r2, #8
 8006c34:	d10b      	bne.n	8006c4e <_printf_i+0x112>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	07db      	lsls	r3, r3, #31
 8006c3a:	d508      	bpl.n	8006c4e <_printf_i+0x112>
 8006c3c:	6923      	ldr	r3, [r4, #16]
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	bfde      	ittt	le
 8006c44:	2330      	movle	r3, #48	; 0x30
 8006c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c4e:	ebac 0305 	sub.w	r3, ip, r5
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	f8cd 8000 	str.w	r8, [sp]
 8006c58:	463b      	mov	r3, r7
 8006c5a:	aa03      	add	r2, sp, #12
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f7ff fef6 	bl	8006a50 <_printf_common>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d14d      	bne.n	8006d04 <_printf_i+0x1c8>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	b005      	add	sp, #20
 8006c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c72:	4839      	ldr	r0, [pc, #228]	; (8006d58 <_printf_i+0x21c>)
 8006c74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	6821      	ldr	r1, [r4, #0]
 8006c7c:	1d1d      	adds	r5, r3, #4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6015      	str	r5, [r2, #0]
 8006c82:	060a      	lsls	r2, r1, #24
 8006c84:	d50b      	bpl.n	8006c9e <_printf_i+0x162>
 8006c86:	07ca      	lsls	r2, r1, #31
 8006c88:	bf44      	itt	mi
 8006c8a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c8e:	6021      	strmi	r1, [r4, #0]
 8006c90:	b91b      	cbnz	r3, 8006c9a <_printf_i+0x15e>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	f022 0220 	bic.w	r2, r2, #32
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	e7b7      	b.n	8006c0e <_printf_i+0xd2>
 8006c9e:	064d      	lsls	r5, r1, #25
 8006ca0:	bf48      	it	mi
 8006ca2:	b29b      	uxthmi	r3, r3
 8006ca4:	e7ef      	b.n	8006c86 <_printf_i+0x14a>
 8006ca6:	4665      	mov	r5, ip
 8006ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cac:	fb02 3311 	mls	r3, r2, r1, r3
 8006cb0:	5cc3      	ldrb	r3, [r0, r3]
 8006cb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d1f5      	bne.n	8006ca8 <_printf_i+0x16c>
 8006cbc:	e7b9      	b.n	8006c32 <_printf_i+0xf6>
 8006cbe:	6813      	ldr	r3, [r2, #0]
 8006cc0:	6825      	ldr	r5, [r4, #0]
 8006cc2:	6961      	ldr	r1, [r4, #20]
 8006cc4:	1d18      	adds	r0, r3, #4
 8006cc6:	6010      	str	r0, [r2, #0]
 8006cc8:	0628      	lsls	r0, r5, #24
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	d501      	bpl.n	8006cd2 <_printf_i+0x196>
 8006cce:	6019      	str	r1, [r3, #0]
 8006cd0:	e002      	b.n	8006cd8 <_printf_i+0x19c>
 8006cd2:	066a      	lsls	r2, r5, #25
 8006cd4:	d5fb      	bpl.n	8006cce <_printf_i+0x192>
 8006cd6:	8019      	strh	r1, [r3, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	4665      	mov	r5, ip
 8006cde:	e7b9      	b.n	8006c54 <_printf_i+0x118>
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	1d19      	adds	r1, r3, #4
 8006ce4:	6011      	str	r1, [r2, #0]
 8006ce6:	681d      	ldr	r5, [r3, #0]
 8006ce8:	6862      	ldr	r2, [r4, #4]
 8006cea:	2100      	movs	r1, #0
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7f9 faaf 	bl	8000250 <memchr>
 8006cf2:	b108      	cbz	r0, 8006cf8 <_printf_i+0x1bc>
 8006cf4:	1b40      	subs	r0, r0, r5
 8006cf6:	6060      	str	r0, [r4, #4]
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d02:	e7a7      	b.n	8006c54 <_printf_i+0x118>
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	462a      	mov	r2, r5
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	47c0      	blx	r8
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d0aa      	beq.n	8006c68 <_printf_i+0x12c>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	079b      	lsls	r3, r3, #30
 8006d16:	d413      	bmi.n	8006d40 <_printf_i+0x204>
 8006d18:	68e0      	ldr	r0, [r4, #12]
 8006d1a:	9b03      	ldr	r3, [sp, #12]
 8006d1c:	4298      	cmp	r0, r3
 8006d1e:	bfb8      	it	lt
 8006d20:	4618      	movlt	r0, r3
 8006d22:	e7a3      	b.n	8006c6c <_printf_i+0x130>
 8006d24:	2301      	movs	r3, #1
 8006d26:	464a      	mov	r2, r9
 8006d28:	4639      	mov	r1, r7
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	47c0      	blx	r8
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d09a      	beq.n	8006c68 <_printf_i+0x12c>
 8006d32:	3501      	adds	r5, #1
 8006d34:	68e3      	ldr	r3, [r4, #12]
 8006d36:	9a03      	ldr	r2, [sp, #12]
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	42ab      	cmp	r3, r5
 8006d3c:	dcf2      	bgt.n	8006d24 <_printf_i+0x1e8>
 8006d3e:	e7eb      	b.n	8006d18 <_printf_i+0x1dc>
 8006d40:	2500      	movs	r5, #0
 8006d42:	f104 0919 	add.w	r9, r4, #25
 8006d46:	e7f5      	b.n	8006d34 <_printf_i+0x1f8>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1ac      	bne.n	8006ca6 <_printf_i+0x16a>
 8006d4c:	7803      	ldrb	r3, [r0, #0]
 8006d4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d56:	e76c      	b.n	8006c32 <_printf_i+0xf6>
 8006d58:	0800835e 	.word	0x0800835e
 8006d5c:	0800836f 	.word	0x0800836f

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4c06      	ldr	r4, [pc, #24]	; (8006d7c <_sbrk_r+0x1c>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4605      	mov	r5, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	f7fa faba 	bl	80012e4 <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000890 	.word	0x20000890

08006d80 <siprintf>:
 8006d80:	b40e      	push	{r1, r2, r3}
 8006d82:	b500      	push	{lr}
 8006d84:	b09c      	sub	sp, #112	; 0x70
 8006d86:	ab1d      	add	r3, sp, #116	; 0x74
 8006d88:	9002      	str	r0, [sp, #8]
 8006d8a:	9006      	str	r0, [sp, #24]
 8006d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d90:	4809      	ldr	r0, [pc, #36]	; (8006db8 <siprintf+0x38>)
 8006d92:	9107      	str	r1, [sp, #28]
 8006d94:	9104      	str	r1, [sp, #16]
 8006d96:	4909      	ldr	r1, [pc, #36]	; (8006dbc <siprintf+0x3c>)
 8006d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9c:	9105      	str	r1, [sp, #20]
 8006d9e:	6800      	ldr	r0, [r0, #0]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	a902      	add	r1, sp, #8
 8006da4:	f001 f942 	bl	800802c <_svfiprintf_r>
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	b01c      	add	sp, #112	; 0x70
 8006db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db4:	b003      	add	sp, #12
 8006db6:	4770      	bx	lr
 8006db8:	2000000c 	.word	0x2000000c
 8006dbc:	ffff0208 	.word	0xffff0208

08006dc0 <quorem>:
 8006dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	6903      	ldr	r3, [r0, #16]
 8006dc6:	690c      	ldr	r4, [r1, #16]
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	4680      	mov	r8, r0
 8006dcc:	f2c0 8082 	blt.w	8006ed4 <quorem+0x114>
 8006dd0:	3c01      	subs	r4, #1
 8006dd2:	f101 0714 	add.w	r7, r1, #20
 8006dd6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006dda:	f100 0614 	add.w	r6, r0, #20
 8006dde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006de2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006de6:	eb06 030c 	add.w	r3, r6, ip
 8006dea:	3501      	adds	r5, #1
 8006dec:	eb07 090c 	add.w	r9, r7, ip
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	fbb0 f5f5 	udiv	r5, r0, r5
 8006df6:	b395      	cbz	r5, 8006e5e <quorem+0x9e>
 8006df8:	f04f 0a00 	mov.w	sl, #0
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	46b6      	mov	lr, r6
 8006e00:	46d3      	mov	fp, sl
 8006e02:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e06:	b293      	uxth	r3, r2
 8006e08:	fb05 a303 	mla	r3, r5, r3, sl
 8006e0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	ebab 0303 	sub.w	r3, fp, r3
 8006e16:	0c12      	lsrs	r2, r2, #16
 8006e18:	f8de b000 	ldr.w	fp, [lr]
 8006e1c:	fb05 a202 	mla	r2, r5, r2, sl
 8006e20:	fa13 f38b 	uxtah	r3, r3, fp
 8006e24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006e28:	fa1f fb82 	uxth.w	fp, r2
 8006e2c:	f8de 2000 	ldr.w	r2, [lr]
 8006e30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3e:	4581      	cmp	r9, r0
 8006e40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e44:	f84e 3b04 	str.w	r3, [lr], #4
 8006e48:	d2db      	bcs.n	8006e02 <quorem+0x42>
 8006e4a:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e4e:	b933      	cbnz	r3, 8006e5e <quorem+0x9e>
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	3b04      	subs	r3, #4
 8006e54:	429e      	cmp	r6, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	d330      	bcc.n	8006ebc <quorem+0xfc>
 8006e5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f000 ffb6 	bl	8007dd0 <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	db25      	blt.n	8006eb4 <quorem+0xf4>
 8006e68:	3501      	adds	r5, #1
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f04f 0c00 	mov.w	ip, #0
 8006e70:	f857 2b04 	ldr.w	r2, [r7], #4
 8006e74:	f8d0 e000 	ldr.w	lr, [r0]
 8006e78:	b293      	uxth	r3, r2
 8006e7a:	ebac 0303 	sub.w	r3, ip, r3
 8006e7e:	0c12      	lsrs	r2, r2, #16
 8006e80:	fa13 f38e 	uxtah	r3, r3, lr
 8006e84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e92:	45b9      	cmp	r9, r7
 8006e94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e98:	f840 3b04 	str.w	r3, [r0], #4
 8006e9c:	d2e8      	bcs.n	8006e70 <quorem+0xb0>
 8006e9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006ea2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ea6:	b92a      	cbnz	r2, 8006eb4 <quorem+0xf4>
 8006ea8:	3b04      	subs	r3, #4
 8006eaa:	429e      	cmp	r6, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	d30b      	bcc.n	8006ec8 <quorem+0x108>
 8006eb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	b003      	add	sp, #12
 8006eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	2a00      	cmp	r2, #0
 8006ec2:	d1ca      	bne.n	8006e5a <quorem+0x9a>
 8006ec4:	3c01      	subs	r4, #1
 8006ec6:	e7c5      	b.n	8006e54 <quorem+0x94>
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	3b04      	subs	r3, #4
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d1ef      	bne.n	8006eb0 <quorem+0xf0>
 8006ed0:	3c01      	subs	r4, #1
 8006ed2:	e7ea      	b.n	8006eaa <quorem+0xea>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e7ee      	b.n	8006eb6 <quorem+0xf6>

08006ed8 <_dtoa_r>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	ec57 6b10 	vmov	r6, r7, d0
 8006ee0:	b095      	sub	sp, #84	; 0x54
 8006ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ee4:	9108      	str	r1, [sp, #32]
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	920a      	str	r2, [sp, #40]	; 0x28
 8006eea:	9311      	str	r3, [sp, #68]	; 0x44
 8006eec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006ef0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ef4:	b93d      	cbnz	r5, 8006f06 <_dtoa_r+0x2e>
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f7ff fa3e 	bl	8006378 <malloc>
 8006efc:	6260      	str	r0, [r4, #36]	; 0x24
 8006efe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f02:	6005      	str	r5, [r0, #0]
 8006f04:	60c5      	str	r5, [r0, #12]
 8006f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f08:	6819      	ldr	r1, [r3, #0]
 8006f0a:	b151      	cbz	r1, 8006f22 <_dtoa_r+0x4a>
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	604a      	str	r2, [r1, #4]
 8006f10:	2301      	movs	r3, #1
 8006f12:	4093      	lsls	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 fd79 	bl	8007a0e <_Bfree>
 8006f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	1e3b      	subs	r3, r7, #0
 8006f24:	bfb9      	ittee	lt
 8006f26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f2a:	9303      	strlt	r3, [sp, #12]
 8006f2c:	2300      	movge	r3, #0
 8006f2e:	f8c8 3000 	strge.w	r3, [r8]
 8006f32:	9d03      	ldr	r5, [sp, #12]
 8006f34:	4bac      	ldr	r3, [pc, #688]	; (80071e8 <_dtoa_r+0x310>)
 8006f36:	bfbc      	itt	lt
 8006f38:	2201      	movlt	r2, #1
 8006f3a:	f8c8 2000 	strlt.w	r2, [r8]
 8006f3e:	43ab      	bics	r3, r5
 8006f40:	d11b      	bne.n	8006f7a <_dtoa_r+0xa2>
 8006f42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f44:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	9b02      	ldr	r3, [sp, #8]
 8006f4c:	b923      	cbnz	r3, 8006f58 <_dtoa_r+0x80>
 8006f4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006f52:	2d00      	cmp	r5, #0
 8006f54:	f000 84dd 	beq.w	8007912 <_dtoa_r+0xa3a>
 8006f58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f5a:	b953      	cbnz	r3, 8006f72 <_dtoa_r+0x9a>
 8006f5c:	4ba3      	ldr	r3, [pc, #652]	; (80071ec <_dtoa_r+0x314>)
 8006f5e:	e020      	b.n	8006fa2 <_dtoa_r+0xca>
 8006f60:	4ba3      	ldr	r3, [pc, #652]	; (80071f0 <_dtoa_r+0x318>)
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	3308      	adds	r3, #8
 8006f66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	9804      	ldr	r0, [sp, #16]
 8006f6c:	b015      	add	sp, #84	; 0x54
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	4b9e      	ldr	r3, [pc, #632]	; (80071ec <_dtoa_r+0x314>)
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	3303      	adds	r3, #3
 8006f78:	e7f5      	b.n	8006f66 <_dtoa_r+0x8e>
 8006f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f8a:	d10c      	bne.n	8006fa6 <_dtoa_r+0xce>
 8006f8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f8e:	2301      	movs	r3, #1
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 84b9 	beq.w	800790c <_dtoa_r+0xa34>
 8006f9a:	4b96      	ldr	r3, [pc, #600]	; (80071f4 <_dtoa_r+0x31c>)
 8006f9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	e7e1      	b.n	8006f6a <_dtoa_r+0x92>
 8006fa6:	a913      	add	r1, sp, #76	; 0x4c
 8006fa8:	aa12      	add	r2, sp, #72	; 0x48
 8006faa:	ed9d 0b04 	vldr	d0, [sp, #16]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 ff85 	bl	8007ebe <__d2b>
 8006fb4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8006fb8:	9001      	str	r0, [sp, #4]
 8006fba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fbc:	2e00      	cmp	r6, #0
 8006fbe:	d046      	beq.n	800704e <_dtoa_r+0x176>
 8006fc0:	9805      	ldr	r0, [sp, #20]
 8006fc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8006fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8006fce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006fd2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8006fd6:	2700      	movs	r7, #0
 8006fd8:	ee07 aa90 	vmov	s15, sl
 8006fdc:	ec43 2b16 	vmov	d6, r2, r3
 8006fe0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006fe4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80071d0 <_dtoa_r+0x2f8>
 8006fe8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006fec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ff0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80071d8 <_dtoa_r+0x300>
 8006ff4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006ff8:	eeb0 7b46 	vmov.f64	d7, d6
 8006ffc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80071e0 <_dtoa_r+0x308>
 8007000:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007004:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007008:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800700c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007010:	ee16 ba90 	vmov	fp, s13
 8007014:	d508      	bpl.n	8007028 <_dtoa_r+0x150>
 8007016:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800701a:	eeb4 6b47 	vcmp.f64	d6, d7
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	bf18      	it	ne
 8007024:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007028:	f1bb 0f16 	cmp.w	fp, #22
 800702c:	d834      	bhi.n	8007098 <_dtoa_r+0x1c0>
 800702e:	4b72      	ldr	r3, [pc, #456]	; (80071f8 <_dtoa_r+0x320>)
 8007030:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007034:	ed93 7b00 	vldr	d7, [r3]
 8007038:	ed9d 6b02 	vldr	d6, [sp, #8]
 800703c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007044:	dd01      	ble.n	800704a <_dtoa_r+0x172>
 8007046:	f10b 3bff 	add.w	fp, fp, #4294967295
 800704a:	2300      	movs	r3, #0
 800704c:	e025      	b.n	800709a <_dtoa_r+0x1c2>
 800704e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007050:	eb01 0a03 	add.w	sl, r1, r3
 8007054:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8007058:	2b20      	cmp	r3, #32
 800705a:	dd17      	ble.n	800708c <_dtoa_r+0x1b4>
 800705c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007060:	9a02      	ldr	r2, [sp, #8]
 8007062:	409d      	lsls	r5, r3
 8007064:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8007068:	fa22 f303 	lsr.w	r3, r2, r3
 800706c:	432b      	orrs	r3, r5
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800707a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800707e:	9805      	ldr	r0, [sp, #20]
 8007080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007084:	2701      	movs	r7, #1
 8007086:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800708a:	e7a5      	b.n	8006fd8 <_dtoa_r+0x100>
 800708c:	9a02      	ldr	r2, [sp, #8]
 800708e:	f1c3 0320 	rsb	r3, r3, #32
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	e7ea      	b.n	800706e <_dtoa_r+0x196>
 8007098:	2301      	movs	r3, #1
 800709a:	eba1 0a0a 	sub.w	sl, r1, sl
 800709e:	9310      	str	r3, [sp, #64]	; 0x40
 80070a0:	f1ba 0301 	subs.w	r3, sl, #1
 80070a4:	9307      	str	r3, [sp, #28]
 80070a6:	bf43      	ittte	mi
 80070a8:	2300      	movmi	r3, #0
 80070aa:	f1ca 0a01 	rsbmi	sl, sl, #1
 80070ae:	9307      	strmi	r3, [sp, #28]
 80070b0:	f04f 0a00 	movpl.w	sl, #0
 80070b4:	f1bb 0f00 	cmp.w	fp, #0
 80070b8:	db19      	blt.n	80070ee <_dtoa_r+0x216>
 80070ba:	9b07      	ldr	r3, [sp, #28]
 80070bc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80070c0:	445b      	add	r3, fp
 80070c2:	9307      	str	r3, [sp, #28]
 80070c4:	f04f 0800 	mov.w	r8, #0
 80070c8:	9b08      	ldr	r3, [sp, #32]
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d866      	bhi.n	800719c <_dtoa_r+0x2c4>
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	bfc4      	itt	gt
 80070d2:	3b04      	subgt	r3, #4
 80070d4:	9308      	strgt	r3, [sp, #32]
 80070d6:	9b08      	ldr	r3, [sp, #32]
 80070d8:	f1a3 0302 	sub.w	r3, r3, #2
 80070dc:	bfcc      	ite	gt
 80070de:	2500      	movgt	r5, #0
 80070e0:	2501      	movle	r5, #1
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d866      	bhi.n	80071b4 <_dtoa_r+0x2dc>
 80070e6:	e8df f003 	tbb	[pc, r3]
 80070ea:	5755      	.short	0x5755
 80070ec:	4909      	.short	0x4909
 80070ee:	2300      	movs	r3, #0
 80070f0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80070f4:	f1cb 0800 	rsb	r8, fp, #0
 80070f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80070fa:	e7e5      	b.n	80070c8 <_dtoa_r+0x1f0>
 80070fc:	2301      	movs	r3, #1
 80070fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	2b00      	cmp	r3, #0
 8007104:	dd59      	ble.n	80071ba <_dtoa_r+0x2e2>
 8007106:	9306      	str	r3, [sp, #24]
 8007108:	4699      	mov	r9, r3
 800710a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800710c:	2200      	movs	r2, #0
 800710e:	6072      	str	r2, [r6, #4]
 8007110:	2204      	movs	r2, #4
 8007112:	f102 0014 	add.w	r0, r2, #20
 8007116:	4298      	cmp	r0, r3
 8007118:	6871      	ldr	r1, [r6, #4]
 800711a:	d953      	bls.n	80071c4 <_dtoa_r+0x2ec>
 800711c:	4620      	mov	r0, r4
 800711e:	f000 fc42 	bl	80079a6 <_Balloc>
 8007122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007124:	6030      	str	r0, [r6, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	f1b9 0f0e 	cmp.w	r9, #14
 800712e:	f200 80c2 	bhi.w	80072b6 <_dtoa_r+0x3de>
 8007132:	2d00      	cmp	r5, #0
 8007134:	f000 80bf 	beq.w	80072b6 <_dtoa_r+0x3de>
 8007138:	ed9d 7b02 	vldr	d7, [sp, #8]
 800713c:	f1bb 0f00 	cmp.w	fp, #0
 8007140:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007144:	f340 80e6 	ble.w	8007314 <_dtoa_r+0x43c>
 8007148:	4a2b      	ldr	r2, [pc, #172]	; (80071f8 <_dtoa_r+0x320>)
 800714a:	f00b 030f 	and.w	r3, fp, #15
 800714e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007152:	ed93 7b00 	vldr	d7, [r3]
 8007156:	ea4f 132b 	mov.w	r3, fp, asr #4
 800715a:	06da      	lsls	r2, r3, #27
 800715c:	f140 80d8 	bpl.w	8007310 <_dtoa_r+0x438>
 8007160:	4a26      	ldr	r2, [pc, #152]	; (80071fc <_dtoa_r+0x324>)
 8007162:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8007166:	ed92 6b08 	vldr	d6, [r2, #32]
 800716a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800716e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	2203      	movs	r2, #3
 8007178:	4920      	ldr	r1, [pc, #128]	; (80071fc <_dtoa_r+0x324>)
 800717a:	e04a      	b.n	8007212 <_dtoa_r+0x33a>
 800717c:	2301      	movs	r3, #1
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007182:	445b      	add	r3, fp
 8007184:	f103 0901 	add.w	r9, r3, #1
 8007188:	9306      	str	r3, [sp, #24]
 800718a:	464b      	mov	r3, r9
 800718c:	2b01      	cmp	r3, #1
 800718e:	bfb8      	it	lt
 8007190:	2301      	movlt	r3, #1
 8007192:	e7ba      	b.n	800710a <_dtoa_r+0x232>
 8007194:	2300      	movs	r3, #0
 8007196:	e7b2      	b.n	80070fe <_dtoa_r+0x226>
 8007198:	2300      	movs	r3, #0
 800719a:	e7f0      	b.n	800717e <_dtoa_r+0x2a6>
 800719c:	2501      	movs	r5, #1
 800719e:	2300      	movs	r3, #0
 80071a0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	9306      	str	r3, [sp, #24]
 80071aa:	4699      	mov	r9, r3
 80071ac:	2200      	movs	r2, #0
 80071ae:	2312      	movs	r3, #18
 80071b0:	920a      	str	r2, [sp, #40]	; 0x28
 80071b2:	e7aa      	b.n	800710a <_dtoa_r+0x232>
 80071b4:	2301      	movs	r3, #1
 80071b6:	9309      	str	r3, [sp, #36]	; 0x24
 80071b8:	e7f4      	b.n	80071a4 <_dtoa_r+0x2cc>
 80071ba:	2301      	movs	r3, #1
 80071bc:	9306      	str	r3, [sp, #24]
 80071be:	4699      	mov	r9, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	e7f5      	b.n	80071b0 <_dtoa_r+0x2d8>
 80071c4:	3101      	adds	r1, #1
 80071c6:	6071      	str	r1, [r6, #4]
 80071c8:	0052      	lsls	r2, r2, #1
 80071ca:	e7a2      	b.n	8007112 <_dtoa_r+0x23a>
 80071cc:	f3af 8000 	nop.w
 80071d0:	636f4361 	.word	0x636f4361
 80071d4:	3fd287a7 	.word	0x3fd287a7
 80071d8:	8b60c8b3 	.word	0x8b60c8b3
 80071dc:	3fc68a28 	.word	0x3fc68a28
 80071e0:	509f79fb 	.word	0x509f79fb
 80071e4:	3fd34413 	.word	0x3fd34413
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	08008389 	.word	0x08008389
 80071f0:	08008380 	.word	0x08008380
 80071f4:	0800835d 	.word	0x0800835d
 80071f8:	080083b8 	.word	0x080083b8
 80071fc:	08008390 	.word	0x08008390
 8007200:	07de      	lsls	r6, r3, #31
 8007202:	d504      	bpl.n	800720e <_dtoa_r+0x336>
 8007204:	ed91 6b00 	vldr	d6, [r1]
 8007208:	3201      	adds	r2, #1
 800720a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800720e:	105b      	asrs	r3, r3, #1
 8007210:	3108      	adds	r1, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f4      	bne.n	8007200 <_dtoa_r+0x328>
 8007216:	ed9d 6b02 	vldr	d6, [sp, #8]
 800721a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800721e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007222:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80a7 	beq.w	8007378 <_dtoa_r+0x4a0>
 800722a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800722e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007232:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	f140 809d 	bpl.w	8007378 <_dtoa_r+0x4a0>
 800723e:	f1b9 0f00 	cmp.w	r9, #0
 8007242:	f000 8099 	beq.w	8007378 <_dtoa_r+0x4a0>
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	dd30      	ble.n	80072ae <_dtoa_r+0x3d6>
 800724c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007250:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007254:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007258:	9d06      	ldr	r5, [sp, #24]
 800725a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800725e:	3201      	adds	r2, #1
 8007260:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007264:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007268:	ee07 2a90 	vmov	s15, r2
 800726c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007270:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007274:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007278:	9a03      	ldr	r2, [sp, #12]
 800727a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8007282:	2d00      	cmp	r5, #0
 8007284:	d17b      	bne.n	800737e <_dtoa_r+0x4a6>
 8007286:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800728a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800728e:	ec41 0b17 	vmov	d7, r0, r1
 8007292:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729a:	f300 8253 	bgt.w	8007744 <_dtoa_r+0x86c>
 800729e:	eeb1 7b47 	vneg.f64	d7, d7
 80072a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072aa:	f100 8249 	bmi.w	8007740 <_dtoa_r+0x868>
 80072ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80072b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f2c0 8119 	blt.w	80074f0 <_dtoa_r+0x618>
 80072be:	f1bb 0f0e 	cmp.w	fp, #14
 80072c2:	f300 8115 	bgt.w	80074f0 <_dtoa_r+0x618>
 80072c6:	4bc3      	ldr	r3, [pc, #780]	; (80075d4 <_dtoa_r+0x6fc>)
 80072c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072cc:	ed93 6b00 	vldr	d6, [r3]
 80072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f280 80ba 	bge.w	800744c <_dtoa_r+0x574>
 80072d8:	f1b9 0f00 	cmp.w	r9, #0
 80072dc:	f300 80b6 	bgt.w	800744c <_dtoa_r+0x574>
 80072e0:	f040 822d 	bne.w	800773e <_dtoa_r+0x866>
 80072e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80072e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80072ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	464d      	mov	r5, r9
 80072fa:	464f      	mov	r7, r9
 80072fc:	f280 8204 	bge.w	8007708 <_dtoa_r+0x830>
 8007300:	9b04      	ldr	r3, [sp, #16]
 8007302:	9a04      	ldr	r2, [sp, #16]
 8007304:	1c5e      	adds	r6, r3, #1
 8007306:	2331      	movs	r3, #49	; 0x31
 8007308:	7013      	strb	r3, [r2, #0]
 800730a:	f10b 0b01 	add.w	fp, fp, #1
 800730e:	e1ff      	b.n	8007710 <_dtoa_r+0x838>
 8007310:	2202      	movs	r2, #2
 8007312:	e731      	b.n	8007178 <_dtoa_r+0x2a0>
 8007314:	d02e      	beq.n	8007374 <_dtoa_r+0x49c>
 8007316:	f1cb 0300 	rsb	r3, fp, #0
 800731a:	4aae      	ldr	r2, [pc, #696]	; (80075d4 <_dtoa_r+0x6fc>)
 800731c:	f003 010f 	and.w	r1, r3, #15
 8007320:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007324:	ed92 7b00 	vldr	d7, [r2]
 8007328:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800732c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007330:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007334:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8007338:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800733c:	49a6      	ldr	r1, [pc, #664]	; (80075d8 <_dtoa_r+0x700>)
 800733e:	111b      	asrs	r3, r3, #4
 8007340:	2000      	movs	r0, #0
 8007342:	2202      	movs	r2, #2
 8007344:	b93b      	cbnz	r3, 8007356 <_dtoa_r+0x47e>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f af6b 	beq.w	8007222 <_dtoa_r+0x34a>
 800734c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007354:	e765      	b.n	8007222 <_dtoa_r+0x34a>
 8007356:	07dd      	lsls	r5, r3, #31
 8007358:	d509      	bpl.n	800736e <_dtoa_r+0x496>
 800735a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800735e:	ed91 7b00 	vldr	d7, [r1]
 8007362:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007366:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800736a:	3201      	adds	r2, #1
 800736c:	2001      	movs	r0, #1
 800736e:	105b      	asrs	r3, r3, #1
 8007370:	3108      	adds	r1, #8
 8007372:	e7e7      	b.n	8007344 <_dtoa_r+0x46c>
 8007374:	2202      	movs	r2, #2
 8007376:	e754      	b.n	8007222 <_dtoa_r+0x34a>
 8007378:	465b      	mov	r3, fp
 800737a:	464d      	mov	r5, r9
 800737c:	e770      	b.n	8007260 <_dtoa_r+0x388>
 800737e:	4a95      	ldr	r2, [pc, #596]	; (80075d4 <_dtoa_r+0x6fc>)
 8007380:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007384:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800738a:	ec41 0b17 	vmov	d7, r0, r1
 800738e:	b35a      	cbz	r2, 80073e8 <_dtoa_r+0x510>
 8007390:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007394:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007398:	9e04      	ldr	r6, [sp, #16]
 800739a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800739e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80073a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073aa:	ee14 2a90 	vmov	r2, s9
 80073ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80073b2:	3230      	adds	r2, #48	; 0x30
 80073b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c0:	f806 2b01 	strb.w	r2, [r6], #1
 80073c4:	d43b      	bmi.n	800743e <_dtoa_r+0x566>
 80073c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80073ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d472      	bmi.n	80074ba <_dtoa_r+0x5e2>
 80073d4:	9a04      	ldr	r2, [sp, #16]
 80073d6:	1ab2      	subs	r2, r6, r2
 80073d8:	4295      	cmp	r5, r2
 80073da:	f77f af68 	ble.w	80072ae <_dtoa_r+0x3d6>
 80073de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80073e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073e6:	e7de      	b.n	80073a6 <_dtoa_r+0x4ce>
 80073e8:	9a04      	ldr	r2, [sp, #16]
 80073ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 80073ee:	1956      	adds	r6, r2, r5
 80073f0:	4611      	mov	r1, r2
 80073f2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80073f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073fa:	ee14 2a90 	vmov	r2, s9
 80073fe:	3230      	adds	r2, #48	; 0x30
 8007400:	f801 2b01 	strb.w	r2, [r1], #1
 8007404:	42b1      	cmp	r1, r6
 8007406:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800740a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800740e:	d11a      	bne.n	8007446 <_dtoa_r+0x56e>
 8007410:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007414:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007418:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007420:	dc4b      	bgt.n	80074ba <_dtoa_r+0x5e2>
 8007422:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007426:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742e:	f57f af3e 	bpl.w	80072ae <_dtoa_r+0x3d6>
 8007432:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007436:	2a30      	cmp	r2, #48	; 0x30
 8007438:	f106 31ff 	add.w	r1, r6, #4294967295
 800743c:	d001      	beq.n	8007442 <_dtoa_r+0x56a>
 800743e:	469b      	mov	fp, r3
 8007440:	e02a      	b.n	8007498 <_dtoa_r+0x5c0>
 8007442:	460e      	mov	r6, r1
 8007444:	e7f5      	b.n	8007432 <_dtoa_r+0x55a>
 8007446:	ee26 6b03 	vmul.f64	d6, d6, d3
 800744a:	e7d4      	b.n	80073f6 <_dtoa_r+0x51e>
 800744c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007450:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007454:	9e04      	ldr	r6, [sp, #16]
 8007456:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800745a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800745e:	ee15 3a10 	vmov	r3, s10
 8007462:	3330      	adds	r3, #48	; 0x30
 8007464:	f806 3b01 	strb.w	r3, [r6], #1
 8007468:	9b04      	ldr	r3, [sp, #16]
 800746a:	1af3      	subs	r3, r6, r3
 800746c:	4599      	cmp	r9, r3
 800746e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007472:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007476:	d133      	bne.n	80074e0 <_dtoa_r+0x608>
 8007478:	ee37 7b07 	vadd.f64	d7, d7, d7
 800747c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007484:	dc18      	bgt.n	80074b8 <_dtoa_r+0x5e0>
 8007486:	eeb4 7b46 	vcmp.f64	d7, d6
 800748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748e:	d103      	bne.n	8007498 <_dtoa_r+0x5c0>
 8007490:	ee15 3a10 	vmov	r3, s10
 8007494:	07db      	lsls	r3, r3, #31
 8007496:	d40f      	bmi.n	80074b8 <_dtoa_r+0x5e0>
 8007498:	9901      	ldr	r1, [sp, #4]
 800749a:	4620      	mov	r0, r4
 800749c:	f000 fab7 	bl	8007a0e <_Bfree>
 80074a0:	2300      	movs	r3, #0
 80074a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074a4:	7033      	strb	r3, [r6, #0]
 80074a6:	f10b 0301 	add.w	r3, fp, #1
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f ad5b 	beq.w	8006f6a <_dtoa_r+0x92>
 80074b4:	601e      	str	r6, [r3, #0]
 80074b6:	e558      	b.n	8006f6a <_dtoa_r+0x92>
 80074b8:	465b      	mov	r3, fp
 80074ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074be:	2939      	cmp	r1, #57	; 0x39
 80074c0:	f106 32ff 	add.w	r2, r6, #4294967295
 80074c4:	d106      	bne.n	80074d4 <_dtoa_r+0x5fc>
 80074c6:	9904      	ldr	r1, [sp, #16]
 80074c8:	4291      	cmp	r1, r2
 80074ca:	d107      	bne.n	80074dc <_dtoa_r+0x604>
 80074cc:	2230      	movs	r2, #48	; 0x30
 80074ce:	700a      	strb	r2, [r1, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	460a      	mov	r2, r1
 80074d4:	7811      	ldrb	r1, [r2, #0]
 80074d6:	3101      	adds	r1, #1
 80074d8:	7011      	strb	r1, [r2, #0]
 80074da:	e7b0      	b.n	800743e <_dtoa_r+0x566>
 80074dc:	4616      	mov	r6, r2
 80074de:	e7ec      	b.n	80074ba <_dtoa_r+0x5e2>
 80074e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d1b3      	bne.n	8007456 <_dtoa_r+0x57e>
 80074ee:	e7d3      	b.n	8007498 <_dtoa_r+0x5c0>
 80074f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	f000 808d 	beq.w	8007612 <_dtoa_r+0x73a>
 80074f8:	9a08      	ldr	r2, [sp, #32]
 80074fa:	2a01      	cmp	r2, #1
 80074fc:	dc72      	bgt.n	80075e4 <_dtoa_r+0x70c>
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d06c      	beq.n	80075dc <_dtoa_r+0x704>
 8007502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007506:	4645      	mov	r5, r8
 8007508:	4656      	mov	r6, sl
 800750a:	9a07      	ldr	r2, [sp, #28]
 800750c:	2101      	movs	r1, #1
 800750e:	441a      	add	r2, r3
 8007510:	4620      	mov	r0, r4
 8007512:	449a      	add	sl, r3
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	f000 fb1a 	bl	8007b4e <__i2b>
 800751a:	4607      	mov	r7, r0
 800751c:	2e00      	cmp	r6, #0
 800751e:	dd0b      	ble.n	8007538 <_dtoa_r+0x660>
 8007520:	9b07      	ldr	r3, [sp, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	dd08      	ble.n	8007538 <_dtoa_r+0x660>
 8007526:	42b3      	cmp	r3, r6
 8007528:	9a07      	ldr	r2, [sp, #28]
 800752a:	bfa8      	it	ge
 800752c:	4633      	movge	r3, r6
 800752e:	ebaa 0a03 	sub.w	sl, sl, r3
 8007532:	1af6      	subs	r6, r6, r3
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	f1b8 0f00 	cmp.w	r8, #0
 800753c:	d01d      	beq.n	800757a <_dtoa_r+0x6a2>
 800753e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d06a      	beq.n	800761a <_dtoa_r+0x742>
 8007544:	b18d      	cbz	r5, 800756a <_dtoa_r+0x692>
 8007546:	4639      	mov	r1, r7
 8007548:	462a      	mov	r2, r5
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fb9e 	bl	8007c8c <__pow5mult>
 8007550:	9a01      	ldr	r2, [sp, #4]
 8007552:	4601      	mov	r1, r0
 8007554:	4607      	mov	r7, r0
 8007556:	4620      	mov	r0, r4
 8007558:	f000 fb02 	bl	8007b60 <__multiply>
 800755c:	9901      	ldr	r1, [sp, #4]
 800755e:	900c      	str	r0, [sp, #48]	; 0x30
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fa54 	bl	8007a0e <_Bfree>
 8007566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	ebb8 0205 	subs.w	r2, r8, r5
 800756e:	d004      	beq.n	800757a <_dtoa_r+0x6a2>
 8007570:	9901      	ldr	r1, [sp, #4]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 fb8a 	bl	8007c8c <__pow5mult>
 8007578:	9001      	str	r0, [sp, #4]
 800757a:	2101      	movs	r1, #1
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fae6 	bl	8007b4e <__i2b>
 8007582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007584:	4605      	mov	r5, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 81ca 	beq.w	8007920 <_dtoa_r+0xa48>
 800758c:	461a      	mov	r2, r3
 800758e:	4601      	mov	r1, r0
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fb7b 	bl	8007c8c <__pow5mult>
 8007596:	9b08      	ldr	r3, [sp, #32]
 8007598:	2b01      	cmp	r3, #1
 800759a:	4605      	mov	r5, r0
 800759c:	dc44      	bgt.n	8007628 <_dtoa_r+0x750>
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d13c      	bne.n	800761e <_dtoa_r+0x746>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d137      	bne.n	800761e <_dtoa_r+0x746>
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075b4:	0d1b      	lsrs	r3, r3, #20
 80075b6:	051b      	lsls	r3, r3, #20
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d033      	beq.n	8007624 <_dtoa_r+0x74c>
 80075bc:	9b07      	ldr	r3, [sp, #28]
 80075be:	3301      	adds	r3, #1
 80075c0:	f10a 0a01 	add.w	sl, sl, #1
 80075c4:	9307      	str	r3, [sp, #28]
 80075c6:	f04f 0801 	mov.w	r8, #1
 80075ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075cc:	bb73      	cbnz	r3, 800762c <_dtoa_r+0x754>
 80075ce:	2001      	movs	r0, #1
 80075d0:	e034      	b.n	800763c <_dtoa_r+0x764>
 80075d2:	bf00      	nop
 80075d4:	080083b8 	.word	0x080083b8
 80075d8:	08008390 	.word	0x08008390
 80075dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075e2:	e790      	b.n	8007506 <_dtoa_r+0x62e>
 80075e4:	f109 35ff 	add.w	r5, r9, #4294967295
 80075e8:	45a8      	cmp	r8, r5
 80075ea:	bfbf      	itttt	lt
 80075ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80075ee:	eba5 0808 	sublt.w	r8, r5, r8
 80075f2:	4443      	addlt	r3, r8
 80075f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80075f6:	bfb6      	itet	lt
 80075f8:	46a8      	movlt	r8, r5
 80075fa:	eba8 0505 	subge.w	r5, r8, r5
 80075fe:	2500      	movlt	r5, #0
 8007600:	f1b9 0f00 	cmp.w	r9, #0
 8007604:	bfb9      	ittee	lt
 8007606:	ebaa 0609 	sublt.w	r6, sl, r9
 800760a:	2300      	movlt	r3, #0
 800760c:	4656      	movge	r6, sl
 800760e:	464b      	movge	r3, r9
 8007610:	e77b      	b.n	800750a <_dtoa_r+0x632>
 8007612:	4645      	mov	r5, r8
 8007614:	4656      	mov	r6, sl
 8007616:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007618:	e780      	b.n	800751c <_dtoa_r+0x644>
 800761a:	4642      	mov	r2, r8
 800761c:	e7a8      	b.n	8007570 <_dtoa_r+0x698>
 800761e:	f04f 0800 	mov.w	r8, #0
 8007622:	e7d2      	b.n	80075ca <_dtoa_r+0x6f2>
 8007624:	4698      	mov	r8, r3
 8007626:	e7d0      	b.n	80075ca <_dtoa_r+0x6f2>
 8007628:	f04f 0800 	mov.w	r8, #0
 800762c:	692b      	ldr	r3, [r5, #16]
 800762e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007632:	6918      	ldr	r0, [r3, #16]
 8007634:	f000 fa3d 	bl	8007ab2 <__hi0bits>
 8007638:	f1c0 0020 	rsb	r0, r0, #32
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	4418      	add	r0, r3
 8007640:	f010 001f 	ands.w	r0, r0, #31
 8007644:	d047      	beq.n	80076d6 <_dtoa_r+0x7fe>
 8007646:	f1c0 0320 	rsb	r3, r0, #32
 800764a:	2b04      	cmp	r3, #4
 800764c:	dd3b      	ble.n	80076c6 <_dtoa_r+0x7ee>
 800764e:	9b07      	ldr	r3, [sp, #28]
 8007650:	f1c0 001c 	rsb	r0, r0, #28
 8007654:	4482      	add	sl, r0
 8007656:	4406      	add	r6, r0
 8007658:	4403      	add	r3, r0
 800765a:	9307      	str	r3, [sp, #28]
 800765c:	f1ba 0f00 	cmp.w	sl, #0
 8007660:	dd05      	ble.n	800766e <_dtoa_r+0x796>
 8007662:	4652      	mov	r2, sl
 8007664:	9901      	ldr	r1, [sp, #4]
 8007666:	4620      	mov	r0, r4
 8007668:	f000 fb5e 	bl	8007d28 <__lshift>
 800766c:	9001      	str	r0, [sp, #4]
 800766e:	9b07      	ldr	r3, [sp, #28]
 8007670:	2b00      	cmp	r3, #0
 8007672:	dd05      	ble.n	8007680 <_dtoa_r+0x7a8>
 8007674:	4629      	mov	r1, r5
 8007676:	461a      	mov	r2, r3
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fb55 	bl	8007d28 <__lshift>
 800767e:	4605      	mov	r5, r0
 8007680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007682:	b353      	cbz	r3, 80076da <_dtoa_r+0x802>
 8007684:	4629      	mov	r1, r5
 8007686:	9801      	ldr	r0, [sp, #4]
 8007688:	f000 fba2 	bl	8007dd0 <__mcmp>
 800768c:	2800      	cmp	r0, #0
 800768e:	da24      	bge.n	80076da <_dtoa_r+0x802>
 8007690:	2300      	movs	r3, #0
 8007692:	220a      	movs	r2, #10
 8007694:	9901      	ldr	r1, [sp, #4]
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f9d0 	bl	8007a3c <__multadd>
 800769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769e:	9001      	str	r0, [sp, #4]
 80076a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8142 	beq.w	800792e <_dtoa_r+0xa56>
 80076aa:	2300      	movs	r3, #0
 80076ac:	4639      	mov	r1, r7
 80076ae:	220a      	movs	r2, #10
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 f9c3 	bl	8007a3c <__multadd>
 80076b6:	9b06      	ldr	r3, [sp, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	4607      	mov	r7, r0
 80076bc:	dc4b      	bgt.n	8007756 <_dtoa_r+0x87e>
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	dd48      	ble.n	8007756 <_dtoa_r+0x87e>
 80076c4:	e011      	b.n	80076ea <_dtoa_r+0x812>
 80076c6:	d0c9      	beq.n	800765c <_dtoa_r+0x784>
 80076c8:	9a07      	ldr	r2, [sp, #28]
 80076ca:	331c      	adds	r3, #28
 80076cc:	441a      	add	r2, r3
 80076ce:	449a      	add	sl, r3
 80076d0:	441e      	add	r6, r3
 80076d2:	4613      	mov	r3, r2
 80076d4:	e7c1      	b.n	800765a <_dtoa_r+0x782>
 80076d6:	4603      	mov	r3, r0
 80076d8:	e7f6      	b.n	80076c8 <_dtoa_r+0x7f0>
 80076da:	f1b9 0f00 	cmp.w	r9, #0
 80076de:	dc34      	bgt.n	800774a <_dtoa_r+0x872>
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	dd31      	ble.n	800774a <_dtoa_r+0x872>
 80076e6:	f8cd 9018 	str.w	r9, [sp, #24]
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	b963      	cbnz	r3, 8007708 <_dtoa_r+0x830>
 80076ee:	4629      	mov	r1, r5
 80076f0:	2205      	movs	r2, #5
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f9a2 	bl	8007a3c <__multadd>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4605      	mov	r5, r0
 80076fc:	9801      	ldr	r0, [sp, #4]
 80076fe:	f000 fb67 	bl	8007dd0 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	f73f adfc 	bgt.w	8007300 <_dtoa_r+0x428>
 8007708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770a:	9e04      	ldr	r6, [sp, #16]
 800770c:	ea6f 0b03 	mvn.w	fp, r3
 8007710:	f04f 0900 	mov.w	r9, #0
 8007714:	4629      	mov	r1, r5
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f979 	bl	8007a0e <_Bfree>
 800771c:	2f00      	cmp	r7, #0
 800771e:	f43f aebb 	beq.w	8007498 <_dtoa_r+0x5c0>
 8007722:	f1b9 0f00 	cmp.w	r9, #0
 8007726:	d005      	beq.n	8007734 <_dtoa_r+0x85c>
 8007728:	45b9      	cmp	r9, r7
 800772a:	d003      	beq.n	8007734 <_dtoa_r+0x85c>
 800772c:	4649      	mov	r1, r9
 800772e:	4620      	mov	r0, r4
 8007730:	f000 f96d 	bl	8007a0e <_Bfree>
 8007734:	4639      	mov	r1, r7
 8007736:	4620      	mov	r0, r4
 8007738:	f000 f969 	bl	8007a0e <_Bfree>
 800773c:	e6ac      	b.n	8007498 <_dtoa_r+0x5c0>
 800773e:	2500      	movs	r5, #0
 8007740:	462f      	mov	r7, r5
 8007742:	e7e1      	b.n	8007708 <_dtoa_r+0x830>
 8007744:	469b      	mov	fp, r3
 8007746:	462f      	mov	r7, r5
 8007748:	e5da      	b.n	8007300 <_dtoa_r+0x428>
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	f8cd 9018 	str.w	r9, [sp, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80f3 	beq.w	800793c <_dtoa_r+0xa64>
 8007756:	2e00      	cmp	r6, #0
 8007758:	dd05      	ble.n	8007766 <_dtoa_r+0x88e>
 800775a:	4639      	mov	r1, r7
 800775c:	4632      	mov	r2, r6
 800775e:	4620      	mov	r0, r4
 8007760:	f000 fae2 	bl	8007d28 <__lshift>
 8007764:	4607      	mov	r7, r0
 8007766:	f1b8 0f00 	cmp.w	r8, #0
 800776a:	d04c      	beq.n	8007806 <_dtoa_r+0x92e>
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f919 	bl	80079a6 <_Balloc>
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	3202      	adds	r2, #2
 8007778:	4606      	mov	r6, r0
 800777a:	0092      	lsls	r2, r2, #2
 800777c:	f107 010c 	add.w	r1, r7, #12
 8007780:	300c      	adds	r0, #12
 8007782:	f000 f903 	bl	800798c <memcpy>
 8007786:	2201      	movs	r2, #1
 8007788:	4631      	mov	r1, r6
 800778a:	4620      	mov	r0, r4
 800778c:	f000 facc 	bl	8007d28 <__lshift>
 8007790:	9b02      	ldr	r3, [sp, #8]
 8007792:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	46b9      	mov	r9, r7
 800779c:	9307      	str	r3, [sp, #28]
 800779e:	4607      	mov	r7, r0
 80077a0:	4629      	mov	r1, r5
 80077a2:	9801      	ldr	r0, [sp, #4]
 80077a4:	f7ff fb0c 	bl	8006dc0 <quorem>
 80077a8:	4649      	mov	r1, r9
 80077aa:	4606      	mov	r6, r0
 80077ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80077b0:	9801      	ldr	r0, [sp, #4]
 80077b2:	f000 fb0d 	bl	8007dd0 <__mcmp>
 80077b6:	463a      	mov	r2, r7
 80077b8:	9002      	str	r0, [sp, #8]
 80077ba:	4629      	mov	r1, r5
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fb21 	bl	8007e04 <__mdiff>
 80077c2:	68c3      	ldr	r3, [r0, #12]
 80077c4:	4602      	mov	r2, r0
 80077c6:	bb03      	cbnz	r3, 800780a <_dtoa_r+0x932>
 80077c8:	4601      	mov	r1, r0
 80077ca:	9009      	str	r0, [sp, #36]	; 0x24
 80077cc:	9801      	ldr	r0, [sp, #4]
 80077ce:	f000 faff 	bl	8007dd0 <__mcmp>
 80077d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d4:	4603      	mov	r3, r0
 80077d6:	4611      	mov	r1, r2
 80077d8:	4620      	mov	r0, r4
 80077da:	9309      	str	r3, [sp, #36]	; 0x24
 80077dc:	f000 f917 	bl	8007a0e <_Bfree>
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	b9a3      	cbnz	r3, 800780e <_dtoa_r+0x936>
 80077e4:	9a08      	ldr	r2, [sp, #32]
 80077e6:	b992      	cbnz	r2, 800780e <_dtoa_r+0x936>
 80077e8:	9a07      	ldr	r2, [sp, #28]
 80077ea:	b982      	cbnz	r2, 800780e <_dtoa_r+0x936>
 80077ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80077f0:	d029      	beq.n	8007846 <_dtoa_r+0x96e>
 80077f2:	9b02      	ldr	r3, [sp, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dd01      	ble.n	80077fc <_dtoa_r+0x924>
 80077f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80077fc:	f10a 0601 	add.w	r6, sl, #1
 8007800:	f88a 8000 	strb.w	r8, [sl]
 8007804:	e786      	b.n	8007714 <_dtoa_r+0x83c>
 8007806:	4638      	mov	r0, r7
 8007808:	e7c2      	b.n	8007790 <_dtoa_r+0x8b8>
 800780a:	2301      	movs	r3, #1
 800780c:	e7e3      	b.n	80077d6 <_dtoa_r+0x8fe>
 800780e:	9a02      	ldr	r2, [sp, #8]
 8007810:	2a00      	cmp	r2, #0
 8007812:	db04      	blt.n	800781e <_dtoa_r+0x946>
 8007814:	d124      	bne.n	8007860 <_dtoa_r+0x988>
 8007816:	9a08      	ldr	r2, [sp, #32]
 8007818:	bb12      	cbnz	r2, 8007860 <_dtoa_r+0x988>
 800781a:	9a07      	ldr	r2, [sp, #28]
 800781c:	bb02      	cbnz	r2, 8007860 <_dtoa_r+0x988>
 800781e:	2b00      	cmp	r3, #0
 8007820:	ddec      	ble.n	80077fc <_dtoa_r+0x924>
 8007822:	2201      	movs	r2, #1
 8007824:	9901      	ldr	r1, [sp, #4]
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fa7e 	bl	8007d28 <__lshift>
 800782c:	4629      	mov	r1, r5
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	f000 face 	bl	8007dd0 <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	dc03      	bgt.n	8007840 <_dtoa_r+0x968>
 8007838:	d1e0      	bne.n	80077fc <_dtoa_r+0x924>
 800783a:	f018 0f01 	tst.w	r8, #1
 800783e:	d0dd      	beq.n	80077fc <_dtoa_r+0x924>
 8007840:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007844:	d1d8      	bne.n	80077f8 <_dtoa_r+0x920>
 8007846:	2339      	movs	r3, #57	; 0x39
 8007848:	f10a 0601 	add.w	r6, sl, #1
 800784c:	f88a 3000 	strb.w	r3, [sl]
 8007850:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007854:	2b39      	cmp	r3, #57	; 0x39
 8007856:	f106 32ff 	add.w	r2, r6, #4294967295
 800785a:	d04c      	beq.n	80078f6 <_dtoa_r+0xa1e>
 800785c:	3301      	adds	r3, #1
 800785e:	e051      	b.n	8007904 <_dtoa_r+0xa2c>
 8007860:	2b00      	cmp	r3, #0
 8007862:	f10a 0601 	add.w	r6, sl, #1
 8007866:	dd05      	ble.n	8007874 <_dtoa_r+0x99c>
 8007868:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800786c:	d0eb      	beq.n	8007846 <_dtoa_r+0x96e>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	e7c5      	b.n	8007800 <_dtoa_r+0x928>
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	9a06      	ldr	r2, [sp, #24]
 8007878:	f806 8c01 	strb.w	r8, [r6, #-1]
 800787c:	1af3      	subs	r3, r6, r3
 800787e:	4293      	cmp	r3, r2
 8007880:	d021      	beq.n	80078c6 <_dtoa_r+0x9ee>
 8007882:	2300      	movs	r3, #0
 8007884:	220a      	movs	r2, #10
 8007886:	9901      	ldr	r1, [sp, #4]
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f8d7 	bl	8007a3c <__multadd>
 800788e:	45b9      	cmp	r9, r7
 8007890:	9001      	str	r0, [sp, #4]
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	f04f 020a 	mov.w	r2, #10
 800789a:	4649      	mov	r1, r9
 800789c:	4620      	mov	r0, r4
 800789e:	d105      	bne.n	80078ac <_dtoa_r+0x9d4>
 80078a0:	f000 f8cc 	bl	8007a3c <__multadd>
 80078a4:	4681      	mov	r9, r0
 80078a6:	4607      	mov	r7, r0
 80078a8:	46b2      	mov	sl, r6
 80078aa:	e779      	b.n	80077a0 <_dtoa_r+0x8c8>
 80078ac:	f000 f8c6 	bl	8007a3c <__multadd>
 80078b0:	4639      	mov	r1, r7
 80078b2:	4681      	mov	r9, r0
 80078b4:	2300      	movs	r3, #0
 80078b6:	220a      	movs	r2, #10
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 f8bf 	bl	8007a3c <__multadd>
 80078be:	4607      	mov	r7, r0
 80078c0:	e7f2      	b.n	80078a8 <_dtoa_r+0x9d0>
 80078c2:	f04f 0900 	mov.w	r9, #0
 80078c6:	2201      	movs	r2, #1
 80078c8:	9901      	ldr	r1, [sp, #4]
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fa2c 	bl	8007d28 <__lshift>
 80078d0:	4629      	mov	r1, r5
 80078d2:	9001      	str	r0, [sp, #4]
 80078d4:	f000 fa7c 	bl	8007dd0 <__mcmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dcb9      	bgt.n	8007850 <_dtoa_r+0x978>
 80078dc:	d102      	bne.n	80078e4 <_dtoa_r+0xa0c>
 80078de:	f018 0f01 	tst.w	r8, #1
 80078e2:	d1b5      	bne.n	8007850 <_dtoa_r+0x978>
 80078e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078e8:	2b30      	cmp	r3, #48	; 0x30
 80078ea:	f106 32ff 	add.w	r2, r6, #4294967295
 80078ee:	f47f af11 	bne.w	8007714 <_dtoa_r+0x83c>
 80078f2:	4616      	mov	r6, r2
 80078f4:	e7f6      	b.n	80078e4 <_dtoa_r+0xa0c>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d105      	bne.n	8007908 <_dtoa_r+0xa30>
 80078fc:	9a04      	ldr	r2, [sp, #16]
 80078fe:	f10b 0b01 	add.w	fp, fp, #1
 8007902:	2331      	movs	r3, #49	; 0x31
 8007904:	7013      	strb	r3, [r2, #0]
 8007906:	e705      	b.n	8007714 <_dtoa_r+0x83c>
 8007908:	4616      	mov	r6, r2
 800790a:	e7a1      	b.n	8007850 <_dtoa_r+0x978>
 800790c:	4b16      	ldr	r3, [pc, #88]	; (8007968 <_dtoa_r+0xa90>)
 800790e:	f7ff bb48 	b.w	8006fa2 <_dtoa_r+0xca>
 8007912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007914:	2b00      	cmp	r3, #0
 8007916:	f47f ab23 	bne.w	8006f60 <_dtoa_r+0x88>
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <_dtoa_r+0xa94>)
 800791c:	f7ff bb41 	b.w	8006fa2 <_dtoa_r+0xca>
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	2b01      	cmp	r3, #1
 8007924:	f77f ae3b 	ble.w	800759e <_dtoa_r+0x6c6>
 8007928:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800792c:	e64f      	b.n	80075ce <_dtoa_r+0x6f6>
 800792e:	9b06      	ldr	r3, [sp, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc03      	bgt.n	800793c <_dtoa_r+0xa64>
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	2b02      	cmp	r3, #2
 8007938:	f73f aed7 	bgt.w	80076ea <_dtoa_r+0x812>
 800793c:	9e04      	ldr	r6, [sp, #16]
 800793e:	9801      	ldr	r0, [sp, #4]
 8007940:	4629      	mov	r1, r5
 8007942:	f7ff fa3d 	bl	8006dc0 <quorem>
 8007946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800794a:	f806 8b01 	strb.w	r8, [r6], #1
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	1af3      	subs	r3, r6, r3
 8007954:	429a      	cmp	r2, r3
 8007956:	ddb4      	ble.n	80078c2 <_dtoa_r+0x9ea>
 8007958:	2300      	movs	r3, #0
 800795a:	220a      	movs	r2, #10
 800795c:	9901      	ldr	r1, [sp, #4]
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f86c 	bl	8007a3c <__multadd>
 8007964:	9001      	str	r0, [sp, #4]
 8007966:	e7ea      	b.n	800793e <_dtoa_r+0xa66>
 8007968:	0800835c 	.word	0x0800835c
 800796c:	08008380 	.word	0x08008380

08007970 <_localeconv_r>:
 8007970:	4b04      	ldr	r3, [pc, #16]	; (8007984 <_localeconv_r+0x14>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a18      	ldr	r0, [r3, #32]
 8007976:	4b04      	ldr	r3, [pc, #16]	; (8007988 <_localeconv_r+0x18>)
 8007978:	2800      	cmp	r0, #0
 800797a:	bf08      	it	eq
 800797c:	4618      	moveq	r0, r3
 800797e:	30f0      	adds	r0, #240	; 0xf0
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
 8007988:	20000070 	.word	0x20000070

0800798c <memcpy>:
 800798c:	b510      	push	{r4, lr}
 800798e:	1e43      	subs	r3, r0, #1
 8007990:	440a      	add	r2, r1
 8007992:	4291      	cmp	r1, r2
 8007994:	d100      	bne.n	8007998 <memcpy+0xc>
 8007996:	bd10      	pop	{r4, pc}
 8007998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a0:	e7f7      	b.n	8007992 <memcpy+0x6>

080079a2 <__malloc_lock>:
 80079a2:	4770      	bx	lr

080079a4 <__malloc_unlock>:
 80079a4:	4770      	bx	lr

080079a6 <_Balloc>:
 80079a6:	b570      	push	{r4, r5, r6, lr}
 80079a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079aa:	4604      	mov	r4, r0
 80079ac:	460e      	mov	r6, r1
 80079ae:	b93d      	cbnz	r5, 80079c0 <_Balloc+0x1a>
 80079b0:	2010      	movs	r0, #16
 80079b2:	f7fe fce1 	bl	8006378 <malloc>
 80079b6:	6260      	str	r0, [r4, #36]	; 0x24
 80079b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079bc:	6005      	str	r5, [r0, #0]
 80079be:	60c5      	str	r5, [r0, #12]
 80079c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80079c2:	68eb      	ldr	r3, [r5, #12]
 80079c4:	b183      	cbz	r3, 80079e8 <_Balloc+0x42>
 80079c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079ce:	b9b8      	cbnz	r0, 8007a00 <_Balloc+0x5a>
 80079d0:	2101      	movs	r1, #1
 80079d2:	fa01 f506 	lsl.w	r5, r1, r6
 80079d6:	1d6a      	adds	r2, r5, #5
 80079d8:	0092      	lsls	r2, r2, #2
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fabe 	bl	8007f5c <_calloc_r>
 80079e0:	b160      	cbz	r0, 80079fc <_Balloc+0x56>
 80079e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80079e6:	e00e      	b.n	8007a06 <_Balloc+0x60>
 80079e8:	2221      	movs	r2, #33	; 0x21
 80079ea:	2104      	movs	r1, #4
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fab5 	bl	8007f5c <_calloc_r>
 80079f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f4:	60e8      	str	r0, [r5, #12]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e4      	bne.n	80079c6 <_Balloc+0x20>
 80079fc:	2000      	movs	r0, #0
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	6802      	ldr	r2, [r0, #0]
 8007a02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007a06:	2300      	movs	r3, #0
 8007a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a0c:	e7f7      	b.n	80079fe <_Balloc+0x58>

08007a0e <_Bfree>:
 8007a0e:	b570      	push	{r4, r5, r6, lr}
 8007a10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a12:	4606      	mov	r6, r0
 8007a14:	460d      	mov	r5, r1
 8007a16:	b93c      	cbnz	r4, 8007a28 <_Bfree+0x1a>
 8007a18:	2010      	movs	r0, #16
 8007a1a:	f7fe fcad 	bl	8006378 <malloc>
 8007a1e:	6270      	str	r0, [r6, #36]	; 0x24
 8007a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a24:	6004      	str	r4, [r0, #0]
 8007a26:	60c4      	str	r4, [r0, #12]
 8007a28:	b13d      	cbz	r5, 8007a3a <_Bfree+0x2c>
 8007a2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a2c:	686a      	ldr	r2, [r5, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a34:	6029      	str	r1, [r5, #0]
 8007a36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}

08007a3c <__multadd>:
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	690d      	ldr	r5, [r1, #16]
 8007a42:	461f      	mov	r7, r3
 8007a44:	4606      	mov	r6, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	f101 0c14 	add.w	ip, r1, #20
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f8dc 0000 	ldr.w	r0, [ip]
 8007a52:	b281      	uxth	r1, r0
 8007a54:	fb02 7101 	mla	r1, r2, r1, r7
 8007a58:	0c0f      	lsrs	r7, r1, #16
 8007a5a:	0c00      	lsrs	r0, r0, #16
 8007a5c:	fb02 7000 	mla	r0, r2, r0, r7
 8007a60:	b289      	uxth	r1, r1
 8007a62:	3301      	adds	r3, #1
 8007a64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007a68:	429d      	cmp	r5, r3
 8007a6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007a6e:	f84c 1b04 	str.w	r1, [ip], #4
 8007a72:	dcec      	bgt.n	8007a4e <__multadd+0x12>
 8007a74:	b1d7      	cbz	r7, 8007aac <__multadd+0x70>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	dc12      	bgt.n	8007aa2 <__multadd+0x66>
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4630      	mov	r0, r6
 8007a80:	3101      	adds	r1, #1
 8007a82:	f7ff ff90 	bl	80079a6 <_Balloc>
 8007a86:	6922      	ldr	r2, [r4, #16]
 8007a88:	3202      	adds	r2, #2
 8007a8a:	f104 010c 	add.w	r1, r4, #12
 8007a8e:	4680      	mov	r8, r0
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	300c      	adds	r0, #12
 8007a94:	f7ff ff7a 	bl	800798c <memcpy>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff ffb7 	bl	8007a0e <_Bfree>
 8007aa0:	4644      	mov	r4, r8
 8007aa2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007aa6:	3501      	adds	r5, #1
 8007aa8:	615f      	str	r7, [r3, #20]
 8007aaa:	6125      	str	r5, [r4, #16]
 8007aac:	4620      	mov	r0, r4
 8007aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ab2 <__hi0bits>:
 8007ab2:	0c02      	lsrs	r2, r0, #16
 8007ab4:	0412      	lsls	r2, r2, #16
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	b9b2      	cbnz	r2, 8007ae8 <__hi0bits+0x36>
 8007aba:	0403      	lsls	r3, r0, #16
 8007abc:	2010      	movs	r0, #16
 8007abe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ac2:	bf04      	itt	eq
 8007ac4:	021b      	lsleq	r3, r3, #8
 8007ac6:	3008      	addeq	r0, #8
 8007ac8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007acc:	bf04      	itt	eq
 8007ace:	011b      	lsleq	r3, r3, #4
 8007ad0:	3004      	addeq	r0, #4
 8007ad2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ad6:	bf04      	itt	eq
 8007ad8:	009b      	lsleq	r3, r3, #2
 8007ada:	3002      	addeq	r0, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db06      	blt.n	8007aee <__hi0bits+0x3c>
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	d503      	bpl.n	8007aec <__hi0bits+0x3a>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	4770      	bx	lr
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e7e8      	b.n	8007abe <__hi0bits+0xc>
 8007aec:	2020      	movs	r0, #32
 8007aee:	4770      	bx	lr

08007af0 <__lo0bits>:
 8007af0:	6803      	ldr	r3, [r0, #0]
 8007af2:	f013 0207 	ands.w	r2, r3, #7
 8007af6:	4601      	mov	r1, r0
 8007af8:	d00b      	beq.n	8007b12 <__lo0bits+0x22>
 8007afa:	07da      	lsls	r2, r3, #31
 8007afc:	d423      	bmi.n	8007b46 <__lo0bits+0x56>
 8007afe:	0798      	lsls	r0, r3, #30
 8007b00:	bf49      	itett	mi
 8007b02:	085b      	lsrmi	r3, r3, #1
 8007b04:	089b      	lsrpl	r3, r3, #2
 8007b06:	2001      	movmi	r0, #1
 8007b08:	600b      	strmi	r3, [r1, #0]
 8007b0a:	bf5c      	itt	pl
 8007b0c:	600b      	strpl	r3, [r1, #0]
 8007b0e:	2002      	movpl	r0, #2
 8007b10:	4770      	bx	lr
 8007b12:	b298      	uxth	r0, r3
 8007b14:	b9a8      	cbnz	r0, 8007b42 <__lo0bits+0x52>
 8007b16:	0c1b      	lsrs	r3, r3, #16
 8007b18:	2010      	movs	r0, #16
 8007b1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b1e:	bf04      	itt	eq
 8007b20:	0a1b      	lsreq	r3, r3, #8
 8007b22:	3008      	addeq	r0, #8
 8007b24:	071a      	lsls	r2, r3, #28
 8007b26:	bf04      	itt	eq
 8007b28:	091b      	lsreq	r3, r3, #4
 8007b2a:	3004      	addeq	r0, #4
 8007b2c:	079a      	lsls	r2, r3, #30
 8007b2e:	bf04      	itt	eq
 8007b30:	089b      	lsreq	r3, r3, #2
 8007b32:	3002      	addeq	r0, #2
 8007b34:	07da      	lsls	r2, r3, #31
 8007b36:	d402      	bmi.n	8007b3e <__lo0bits+0x4e>
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	d006      	beq.n	8007b4a <__lo0bits+0x5a>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	600b      	str	r3, [r1, #0]
 8007b40:	4770      	bx	lr
 8007b42:	4610      	mov	r0, r2
 8007b44:	e7e9      	b.n	8007b1a <__lo0bits+0x2a>
 8007b46:	2000      	movs	r0, #0
 8007b48:	4770      	bx	lr
 8007b4a:	2020      	movs	r0, #32
 8007b4c:	4770      	bx	lr

08007b4e <__i2b>:
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	460c      	mov	r4, r1
 8007b52:	2101      	movs	r1, #1
 8007b54:	f7ff ff27 	bl	80079a6 <_Balloc>
 8007b58:	2201      	movs	r2, #1
 8007b5a:	6144      	str	r4, [r0, #20]
 8007b5c:	6102      	str	r2, [r0, #16]
 8007b5e:	bd10      	pop	{r4, pc}

08007b60 <__multiply>:
 8007b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	4614      	mov	r4, r2
 8007b66:	690a      	ldr	r2, [r1, #16]
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	bfb8      	it	lt
 8007b6e:	460b      	movlt	r3, r1
 8007b70:	4688      	mov	r8, r1
 8007b72:	bfbc      	itt	lt
 8007b74:	46a0      	movlt	r8, r4
 8007b76:	461c      	movlt	r4, r3
 8007b78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b88:	eb07 0609 	add.w	r6, r7, r9
 8007b8c:	42b3      	cmp	r3, r6
 8007b8e:	bfb8      	it	lt
 8007b90:	3101      	addlt	r1, #1
 8007b92:	f7ff ff08 	bl	80079a6 <_Balloc>
 8007b96:	f100 0514 	add.w	r5, r0, #20
 8007b9a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4573      	cmp	r3, lr
 8007ba4:	d316      	bcc.n	8007bd4 <__multiply+0x74>
 8007ba6:	f104 0214 	add.w	r2, r4, #20
 8007baa:	f108 0114 	add.w	r1, r8, #20
 8007bae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007bb2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	9b00      	ldr	r3, [sp, #0]
 8007bba:	9201      	str	r2, [sp, #4]
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d80c      	bhi.n	8007bda <__multiply+0x7a>
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	dd03      	ble.n	8007bcc <__multiply+0x6c>
 8007bc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d05d      	beq.n	8007c88 <__multiply+0x128>
 8007bcc:	6106      	str	r6, [r0, #16]
 8007bce:	b003      	add	sp, #12
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd4:	f843 2b04 	str.w	r2, [r3], #4
 8007bd8:	e7e3      	b.n	8007ba2 <__multiply+0x42>
 8007bda:	f8b2 b000 	ldrh.w	fp, [r2]
 8007bde:	f1bb 0f00 	cmp.w	fp, #0
 8007be2:	d023      	beq.n	8007c2c <__multiply+0xcc>
 8007be4:	4689      	mov	r9, r1
 8007be6:	46ac      	mov	ip, r5
 8007be8:	f04f 0800 	mov.w	r8, #0
 8007bec:	f859 4b04 	ldr.w	r4, [r9], #4
 8007bf0:	f8dc a000 	ldr.w	sl, [ip]
 8007bf4:	b2a3      	uxth	r3, r4
 8007bf6:	fa1f fa8a 	uxth.w	sl, sl
 8007bfa:	fb0b a303 	mla	r3, fp, r3, sl
 8007bfe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c02:	f8dc 4000 	ldr.w	r4, [ip]
 8007c06:	4443      	add	r3, r8
 8007c08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c0c:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c10:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c14:	46e2      	mov	sl, ip
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c1c:	454f      	cmp	r7, r9
 8007c1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c22:	f84a 3b04 	str.w	r3, [sl], #4
 8007c26:	d82b      	bhi.n	8007c80 <__multiply+0x120>
 8007c28:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c32:	3204      	adds	r2, #4
 8007c34:	f1ba 0f00 	cmp.w	sl, #0
 8007c38:	d020      	beq.n	8007c7c <__multiply+0x11c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	4689      	mov	r9, r1
 8007c3e:	46a8      	mov	r8, r5
 8007c40:	f04f 0b00 	mov.w	fp, #0
 8007c44:	f8b9 c000 	ldrh.w	ip, [r9]
 8007c48:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007c4c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007c50:	445c      	add	r4, fp
 8007c52:	46c4      	mov	ip, r8
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c5a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c5e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c62:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	fb0a b303 	mla	r3, sl, r3, fp
 8007c6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c70:	454f      	cmp	r7, r9
 8007c72:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007c76:	d805      	bhi.n	8007c84 <__multiply+0x124>
 8007c78:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c7c:	3504      	adds	r5, #4
 8007c7e:	e79b      	b.n	8007bb8 <__multiply+0x58>
 8007c80:	46d4      	mov	ip, sl
 8007c82:	e7b3      	b.n	8007bec <__multiply+0x8c>
 8007c84:	46e0      	mov	r8, ip
 8007c86:	e7dd      	b.n	8007c44 <__multiply+0xe4>
 8007c88:	3e01      	subs	r6, #1
 8007c8a:	e799      	b.n	8007bc0 <__multiply+0x60>

08007c8c <__pow5mult>:
 8007c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c90:	4615      	mov	r5, r2
 8007c92:	f012 0203 	ands.w	r2, r2, #3
 8007c96:	4606      	mov	r6, r0
 8007c98:	460f      	mov	r7, r1
 8007c9a:	d007      	beq.n	8007cac <__pow5mult+0x20>
 8007c9c:	3a01      	subs	r2, #1
 8007c9e:	4c21      	ldr	r4, [pc, #132]	; (8007d24 <__pow5mult+0x98>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ca6:	f7ff fec9 	bl	8007a3c <__multadd>
 8007caa:	4607      	mov	r7, r0
 8007cac:	10ad      	asrs	r5, r5, #2
 8007cae:	d035      	beq.n	8007d1c <__pow5mult+0x90>
 8007cb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cb2:	b93c      	cbnz	r4, 8007cc4 <__pow5mult+0x38>
 8007cb4:	2010      	movs	r0, #16
 8007cb6:	f7fe fb5f 	bl	8006378 <malloc>
 8007cba:	6270      	str	r0, [r6, #36]	; 0x24
 8007cbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cc0:	6004      	str	r4, [r0, #0]
 8007cc2:	60c4      	str	r4, [r0, #12]
 8007cc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ccc:	b94c      	cbnz	r4, 8007ce2 <__pow5mult+0x56>
 8007cce:	f240 2171 	movw	r1, #625	; 0x271
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7ff ff3b 	bl	8007b4e <__i2b>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cde:	4604      	mov	r4, r0
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	f04f 0800 	mov.w	r8, #0
 8007ce6:	07eb      	lsls	r3, r5, #31
 8007ce8:	d50a      	bpl.n	8007d00 <__pow5mult+0x74>
 8007cea:	4639      	mov	r1, r7
 8007cec:	4622      	mov	r2, r4
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7ff ff36 	bl	8007b60 <__multiply>
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4681      	mov	r9, r0
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7ff fe88 	bl	8007a0e <_Bfree>
 8007cfe:	464f      	mov	r7, r9
 8007d00:	106d      	asrs	r5, r5, #1
 8007d02:	d00b      	beq.n	8007d1c <__pow5mult+0x90>
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	b938      	cbnz	r0, 8007d18 <__pow5mult+0x8c>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff ff27 	bl	8007b60 <__multiply>
 8007d12:	6020      	str	r0, [r4, #0]
 8007d14:	f8c0 8000 	str.w	r8, [r0]
 8007d18:	4604      	mov	r4, r0
 8007d1a:	e7e4      	b.n	8007ce6 <__pow5mult+0x5a>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d22:	bf00      	nop
 8007d24:	08008480 	.word	0x08008480

08007d28 <__lshift>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	6849      	ldr	r1, [r1, #4]
 8007d36:	eb0a 0903 	add.w	r9, sl, r3
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	4616      	mov	r6, r2
 8007d40:	f109 0501 	add.w	r5, r9, #1
 8007d44:	42ab      	cmp	r3, r5
 8007d46:	db32      	blt.n	8007dae <__lshift+0x86>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff fe2c 	bl	80079a6 <_Balloc>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4680      	mov	r8, r0
 8007d52:	f100 0114 	add.w	r1, r0, #20
 8007d56:	461a      	mov	r2, r3
 8007d58:	4553      	cmp	r3, sl
 8007d5a:	db2b      	blt.n	8007db4 <__lshift+0x8c>
 8007d5c:	6920      	ldr	r0, [r4, #16]
 8007d5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d62:	f104 0314 	add.w	r3, r4, #20
 8007d66:	f016 021f 	ands.w	r2, r6, #31
 8007d6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d72:	d025      	beq.n	8007dc0 <__lshift+0x98>
 8007d74:	f1c2 0e20 	rsb	lr, r2, #32
 8007d78:	2000      	movs	r0, #0
 8007d7a:	681e      	ldr	r6, [r3, #0]
 8007d7c:	468a      	mov	sl, r1
 8007d7e:	4096      	lsls	r6, r2
 8007d80:	4330      	orrs	r0, r6
 8007d82:	f84a 0b04 	str.w	r0, [sl], #4
 8007d86:	f853 0b04 	ldr.w	r0, [r3], #4
 8007d8a:	459c      	cmp	ip, r3
 8007d8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007d90:	d814      	bhi.n	8007dbc <__lshift+0x94>
 8007d92:	6048      	str	r0, [r1, #4]
 8007d94:	b108      	cbz	r0, 8007d9a <__lshift+0x72>
 8007d96:	f109 0502 	add.w	r5, r9, #2
 8007d9a:	3d01      	subs	r5, #1
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007da2:	4621      	mov	r1, r4
 8007da4:	f7ff fe33 	bl	8007a0e <_Bfree>
 8007da8:	4640      	mov	r0, r8
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	3101      	adds	r1, #1
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	e7c7      	b.n	8007d44 <__lshift+0x1c>
 8007db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007db8:	3301      	adds	r3, #1
 8007dba:	e7cd      	b.n	8007d58 <__lshift+0x30>
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	e7dc      	b.n	8007d7a <__lshift+0x52>
 8007dc0:	3904      	subs	r1, #4
 8007dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dca:	459c      	cmp	ip, r3
 8007dcc:	d8f9      	bhi.n	8007dc2 <__lshift+0x9a>
 8007dce:	e7e4      	b.n	8007d9a <__lshift+0x72>

08007dd0 <__mcmp>:
 8007dd0:	6903      	ldr	r3, [r0, #16]
 8007dd2:	690a      	ldr	r2, [r1, #16]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	b530      	push	{r4, r5, lr}
 8007dd8:	d10c      	bne.n	8007df4 <__mcmp+0x24>
 8007dda:	0092      	lsls	r2, r2, #2
 8007ddc:	3014      	adds	r0, #20
 8007dde:	3114      	adds	r1, #20
 8007de0:	1884      	adds	r4, r0, r2
 8007de2:	4411      	add	r1, r2
 8007de4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007de8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dec:	4295      	cmp	r5, r2
 8007dee:	d003      	beq.n	8007df8 <__mcmp+0x28>
 8007df0:	d305      	bcc.n	8007dfe <__mcmp+0x2e>
 8007df2:	2301      	movs	r3, #1
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd30      	pop	{r4, r5, pc}
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d3f3      	bcc.n	8007de4 <__mcmp+0x14>
 8007dfc:	e7fa      	b.n	8007df4 <__mcmp+0x24>
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	e7f7      	b.n	8007df4 <__mcmp+0x24>

08007e04 <__mdiff>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	460d      	mov	r5, r1
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4628      	mov	r0, r5
 8007e10:	4614      	mov	r4, r2
 8007e12:	f7ff ffdd 	bl	8007dd0 <__mcmp>
 8007e16:	1e06      	subs	r6, r0, #0
 8007e18:	d108      	bne.n	8007e2c <__mdiff+0x28>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff fdc2 	bl	80079a6 <_Balloc>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	bfa4      	itt	ge
 8007e2e:	4623      	movge	r3, r4
 8007e30:	462c      	movge	r4, r5
 8007e32:	4638      	mov	r0, r7
 8007e34:	6861      	ldr	r1, [r4, #4]
 8007e36:	bfa6      	itte	ge
 8007e38:	461d      	movge	r5, r3
 8007e3a:	2600      	movge	r6, #0
 8007e3c:	2601      	movlt	r6, #1
 8007e3e:	f7ff fdb2 	bl	80079a6 <_Balloc>
 8007e42:	692b      	ldr	r3, [r5, #16]
 8007e44:	60c6      	str	r6, [r0, #12]
 8007e46:	6926      	ldr	r6, [r4, #16]
 8007e48:	f105 0914 	add.w	r9, r5, #20
 8007e4c:	f104 0214 	add.w	r2, r4, #20
 8007e50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007e54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007e58:	f100 0514 	add.w	r5, r0, #20
 8007e5c:	f04f 0e00 	mov.w	lr, #0
 8007e60:	f852 ab04 	ldr.w	sl, [r2], #4
 8007e64:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e68:	fa1e f18a 	uxtah	r1, lr, sl
 8007e6c:	b2a3      	uxth	r3, r4
 8007e6e:	1ac9      	subs	r1, r1, r3
 8007e70:	0c23      	lsrs	r3, r4, #16
 8007e72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007e76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e7a:	b289      	uxth	r1, r1
 8007e7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007e80:	45c8      	cmp	r8, r9
 8007e82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e86:	4694      	mov	ip, r2
 8007e88:	f845 3b04 	str.w	r3, [r5], #4
 8007e8c:	d8e8      	bhi.n	8007e60 <__mdiff+0x5c>
 8007e8e:	45bc      	cmp	ip, r7
 8007e90:	d304      	bcc.n	8007e9c <__mdiff+0x98>
 8007e92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007e96:	b183      	cbz	r3, 8007eba <__mdiff+0xb6>
 8007e98:	6106      	str	r6, [r0, #16]
 8007e9a:	e7c5      	b.n	8007e28 <__mdiff+0x24>
 8007e9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ea0:	fa1e f381 	uxtah	r3, lr, r1
 8007ea4:	141a      	asrs	r2, r3, #16
 8007ea6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eb0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007eb4:	f845 3b04 	str.w	r3, [r5], #4
 8007eb8:	e7e9      	b.n	8007e8e <__mdiff+0x8a>
 8007eba:	3e01      	subs	r6, #1
 8007ebc:	e7e9      	b.n	8007e92 <__mdiff+0x8e>

08007ebe <__d2b>:
 8007ebe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ec2:	460e      	mov	r6, r1
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	ec59 8b10 	vmov	r8, r9, d0
 8007eca:	4615      	mov	r5, r2
 8007ecc:	f7ff fd6b 	bl	80079a6 <_Balloc>
 8007ed0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eda:	bb34      	cbnz	r4, 8007f2a <__d2b+0x6c>
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	f1b8 0300 	subs.w	r3, r8, #0
 8007ee2:	d027      	beq.n	8007f34 <__d2b+0x76>
 8007ee4:	a802      	add	r0, sp, #8
 8007ee6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007eea:	f7ff fe01 	bl	8007af0 <__lo0bits>
 8007eee:	9900      	ldr	r1, [sp, #0]
 8007ef0:	b1f0      	cbz	r0, 8007f30 <__d2b+0x72>
 8007ef2:	9a01      	ldr	r2, [sp, #4]
 8007ef4:	f1c0 0320 	rsb	r3, r0, #32
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	430b      	orrs	r3, r1
 8007efe:	40c2      	lsrs	r2, r0
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	9201      	str	r2, [sp, #4]
 8007f04:	9b01      	ldr	r3, [sp, #4]
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2102      	movne	r1, #2
 8007f0e:	2101      	moveq	r1, #1
 8007f10:	6139      	str	r1, [r7, #16]
 8007f12:	b1c4      	cbz	r4, 8007f46 <__d2b+0x88>
 8007f14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f18:	4404      	add	r4, r0
 8007f1a:	6034      	str	r4, [r6, #0]
 8007f1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f20:	6028      	str	r0, [r5, #0]
 8007f22:	4638      	mov	r0, r7
 8007f24:	b003      	add	sp, #12
 8007f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f2e:	e7d5      	b.n	8007edc <__d2b+0x1e>
 8007f30:	6179      	str	r1, [r7, #20]
 8007f32:	e7e7      	b.n	8007f04 <__d2b+0x46>
 8007f34:	a801      	add	r0, sp, #4
 8007f36:	f7ff fddb 	bl	8007af0 <__lo0bits>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	2101      	movs	r1, #1
 8007f40:	6139      	str	r1, [r7, #16]
 8007f42:	3020      	adds	r0, #32
 8007f44:	e7e5      	b.n	8007f12 <__d2b+0x54>
 8007f46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007f4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f4e:	6030      	str	r0, [r6, #0]
 8007f50:	6918      	ldr	r0, [r3, #16]
 8007f52:	f7ff fdae 	bl	8007ab2 <__hi0bits>
 8007f56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f5a:	e7e1      	b.n	8007f20 <__d2b+0x62>

08007f5c <_calloc_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	fb02 f401 	mul.w	r4, r2, r1
 8007f62:	4621      	mov	r1, r4
 8007f64:	f7fe fa66 	bl	8006434 <_malloc_r>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	b118      	cbz	r0, 8007f74 <_calloc_r+0x18>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	2100      	movs	r1, #0
 8007f70:	f7fe fa0a 	bl	8006388 <memset>
 8007f74:	4628      	mov	r0, r5
 8007f76:	bd38      	pop	{r3, r4, r5, pc}

08007f78 <__ssputs_r>:
 8007f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f7c:	688e      	ldr	r6, [r1, #8]
 8007f7e:	429e      	cmp	r6, r3
 8007f80:	4682      	mov	sl, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4690      	mov	r8, r2
 8007f86:	4699      	mov	r9, r3
 8007f88:	d837      	bhi.n	8007ffa <__ssputs_r+0x82>
 8007f8a:	898a      	ldrh	r2, [r1, #12]
 8007f8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f90:	d031      	beq.n	8007ff6 <__ssputs_r+0x7e>
 8007f92:	6825      	ldr	r5, [r4, #0]
 8007f94:	6909      	ldr	r1, [r1, #16]
 8007f96:	1a6f      	subs	r7, r5, r1
 8007f98:	6965      	ldr	r5, [r4, #20]
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fa0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007fa4:	f109 0301 	add.w	r3, r9, #1
 8007fa8:	443b      	add	r3, r7
 8007faa:	429d      	cmp	r5, r3
 8007fac:	bf38      	it	cc
 8007fae:	461d      	movcc	r5, r3
 8007fb0:	0553      	lsls	r3, r2, #21
 8007fb2:	d530      	bpl.n	8008016 <__ssputs_r+0x9e>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7fe fa3d 	bl	8006434 <_malloc_r>
 8007fba:	4606      	mov	r6, r0
 8007fbc:	b950      	cbnz	r0, 8007fd4 <__ssputs_r+0x5c>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	f8ca 3000 	str.w	r3, [sl]
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	6921      	ldr	r1, [r4, #16]
 8007fd8:	f7ff fcd8 	bl	800798c <memcpy>
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	6126      	str	r6, [r4, #16]
 8007fea:	6165      	str	r5, [r4, #20]
 8007fec:	443e      	add	r6, r7
 8007fee:	1bed      	subs	r5, r5, r7
 8007ff0:	6026      	str	r6, [r4, #0]
 8007ff2:	60a5      	str	r5, [r4, #8]
 8007ff4:	464e      	mov	r6, r9
 8007ff6:	454e      	cmp	r6, r9
 8007ff8:	d900      	bls.n	8007ffc <__ssputs_r+0x84>
 8007ffa:	464e      	mov	r6, r9
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4641      	mov	r1, r8
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	f000 f91d 	bl	8008240 <memmove>
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	1b9b      	subs	r3, r3, r6
 800800a:	60a3      	str	r3, [r4, #8]
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	441e      	add	r6, r3
 8008010:	6026      	str	r6, [r4, #0]
 8008012:	2000      	movs	r0, #0
 8008014:	e7dc      	b.n	8007fd0 <__ssputs_r+0x58>
 8008016:	462a      	mov	r2, r5
 8008018:	f000 f92b 	bl	8008272 <_realloc_r>
 800801c:	4606      	mov	r6, r0
 800801e:	2800      	cmp	r0, #0
 8008020:	d1e2      	bne.n	8007fe8 <__ssputs_r+0x70>
 8008022:	6921      	ldr	r1, [r4, #16]
 8008024:	4650      	mov	r0, sl
 8008026:	f7fe f9b7 	bl	8006398 <_free_r>
 800802a:	e7c8      	b.n	8007fbe <__ssputs_r+0x46>

0800802c <_svfiprintf_r>:
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	461d      	mov	r5, r3
 8008032:	898b      	ldrh	r3, [r1, #12]
 8008034:	061f      	lsls	r7, r3, #24
 8008036:	b09d      	sub	sp, #116	; 0x74
 8008038:	4680      	mov	r8, r0
 800803a:	460c      	mov	r4, r1
 800803c:	4616      	mov	r6, r2
 800803e:	d50f      	bpl.n	8008060 <_svfiprintf_r+0x34>
 8008040:	690b      	ldr	r3, [r1, #16]
 8008042:	b96b      	cbnz	r3, 8008060 <_svfiprintf_r+0x34>
 8008044:	2140      	movs	r1, #64	; 0x40
 8008046:	f7fe f9f5 	bl	8006434 <_malloc_r>
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	6120      	str	r0, [r4, #16]
 800804e:	b928      	cbnz	r0, 800805c <_svfiprintf_r+0x30>
 8008050:	230c      	movs	r3, #12
 8008052:	f8c8 3000 	str.w	r3, [r8]
 8008056:	f04f 30ff 	mov.w	r0, #4294967295
 800805a:	e0c8      	b.n	80081ee <_svfiprintf_r+0x1c2>
 800805c:	2340      	movs	r3, #64	; 0x40
 800805e:	6163      	str	r3, [r4, #20]
 8008060:	2300      	movs	r3, #0
 8008062:	9309      	str	r3, [sp, #36]	; 0x24
 8008064:	2320      	movs	r3, #32
 8008066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800806a:	2330      	movs	r3, #48	; 0x30
 800806c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008070:	9503      	str	r5, [sp, #12]
 8008072:	f04f 0b01 	mov.w	fp, #1
 8008076:	4637      	mov	r7, r6
 8008078:	463d      	mov	r5, r7
 800807a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800807e:	b10b      	cbz	r3, 8008084 <_svfiprintf_r+0x58>
 8008080:	2b25      	cmp	r3, #37	; 0x25
 8008082:	d13e      	bne.n	8008102 <_svfiprintf_r+0xd6>
 8008084:	ebb7 0a06 	subs.w	sl, r7, r6
 8008088:	d00b      	beq.n	80080a2 <_svfiprintf_r+0x76>
 800808a:	4653      	mov	r3, sl
 800808c:	4632      	mov	r2, r6
 800808e:	4621      	mov	r1, r4
 8008090:	4640      	mov	r0, r8
 8008092:	f7ff ff71 	bl	8007f78 <__ssputs_r>
 8008096:	3001      	adds	r0, #1
 8008098:	f000 80a4 	beq.w	80081e4 <_svfiprintf_r+0x1b8>
 800809c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809e:	4453      	add	r3, sl
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	783b      	ldrb	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 809d 	beq.w	80081e4 <_svfiprintf_r+0x1b8>
 80080aa:	2300      	movs	r3, #0
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080bc:	931a      	str	r3, [sp, #104]	; 0x68
 80080be:	462f      	mov	r7, r5
 80080c0:	2205      	movs	r2, #5
 80080c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080c6:	4850      	ldr	r0, [pc, #320]	; (8008208 <_svfiprintf_r+0x1dc>)
 80080c8:	f7f8 f8c2 	bl	8000250 <memchr>
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	b9d0      	cbnz	r0, 8008106 <_svfiprintf_r+0xda>
 80080d0:	06d9      	lsls	r1, r3, #27
 80080d2:	bf44      	itt	mi
 80080d4:	2220      	movmi	r2, #32
 80080d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080da:	071a      	lsls	r2, r3, #28
 80080dc:	bf44      	itt	mi
 80080de:	222b      	movmi	r2, #43	; 0x2b
 80080e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080e4:	782a      	ldrb	r2, [r5, #0]
 80080e6:	2a2a      	cmp	r2, #42	; 0x2a
 80080e8:	d015      	beq.n	8008116 <_svfiprintf_r+0xea>
 80080ea:	9a07      	ldr	r2, [sp, #28]
 80080ec:	462f      	mov	r7, r5
 80080ee:	2000      	movs	r0, #0
 80080f0:	250a      	movs	r5, #10
 80080f2:	4639      	mov	r1, r7
 80080f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080f8:	3b30      	subs	r3, #48	; 0x30
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	d94d      	bls.n	800819a <_svfiprintf_r+0x16e>
 80080fe:	b1b8      	cbz	r0, 8008130 <_svfiprintf_r+0x104>
 8008100:	e00f      	b.n	8008122 <_svfiprintf_r+0xf6>
 8008102:	462f      	mov	r7, r5
 8008104:	e7b8      	b.n	8008078 <_svfiprintf_r+0x4c>
 8008106:	4a40      	ldr	r2, [pc, #256]	; (8008208 <_svfiprintf_r+0x1dc>)
 8008108:	1a80      	subs	r0, r0, r2
 800810a:	fa0b f000 	lsl.w	r0, fp, r0
 800810e:	4318      	orrs	r0, r3
 8008110:	9004      	str	r0, [sp, #16]
 8008112:	463d      	mov	r5, r7
 8008114:	e7d3      	b.n	80080be <_svfiprintf_r+0x92>
 8008116:	9a03      	ldr	r2, [sp, #12]
 8008118:	1d11      	adds	r1, r2, #4
 800811a:	6812      	ldr	r2, [r2, #0]
 800811c:	9103      	str	r1, [sp, #12]
 800811e:	2a00      	cmp	r2, #0
 8008120:	db01      	blt.n	8008126 <_svfiprintf_r+0xfa>
 8008122:	9207      	str	r2, [sp, #28]
 8008124:	e004      	b.n	8008130 <_svfiprintf_r+0x104>
 8008126:	4252      	negs	r2, r2
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	9207      	str	r2, [sp, #28]
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	783b      	ldrb	r3, [r7, #0]
 8008132:	2b2e      	cmp	r3, #46	; 0x2e
 8008134:	d10c      	bne.n	8008150 <_svfiprintf_r+0x124>
 8008136:	787b      	ldrb	r3, [r7, #1]
 8008138:	2b2a      	cmp	r3, #42	; 0x2a
 800813a:	d133      	bne.n	80081a4 <_svfiprintf_r+0x178>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	9203      	str	r2, [sp, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	bfb8      	it	lt
 8008148:	f04f 33ff 	movlt.w	r3, #4294967295
 800814c:	3702      	adds	r7, #2
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	4d2e      	ldr	r5, [pc, #184]	; (800820c <_svfiprintf_r+0x1e0>)
 8008152:	7839      	ldrb	r1, [r7, #0]
 8008154:	2203      	movs	r2, #3
 8008156:	4628      	mov	r0, r5
 8008158:	f7f8 f87a 	bl	8000250 <memchr>
 800815c:	b138      	cbz	r0, 800816e <_svfiprintf_r+0x142>
 800815e:	2340      	movs	r3, #64	; 0x40
 8008160:	1b40      	subs	r0, r0, r5
 8008162:	fa03 f000 	lsl.w	r0, r3, r0
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	4303      	orrs	r3, r0
 800816a:	3701      	adds	r7, #1
 800816c:	9304      	str	r3, [sp, #16]
 800816e:	7839      	ldrb	r1, [r7, #0]
 8008170:	4827      	ldr	r0, [pc, #156]	; (8008210 <_svfiprintf_r+0x1e4>)
 8008172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008176:	2206      	movs	r2, #6
 8008178:	1c7e      	adds	r6, r7, #1
 800817a:	f7f8 f869 	bl	8000250 <memchr>
 800817e:	2800      	cmp	r0, #0
 8008180:	d038      	beq.n	80081f4 <_svfiprintf_r+0x1c8>
 8008182:	4b24      	ldr	r3, [pc, #144]	; (8008214 <_svfiprintf_r+0x1e8>)
 8008184:	bb13      	cbnz	r3, 80081cc <_svfiprintf_r+0x1a0>
 8008186:	9b03      	ldr	r3, [sp, #12]
 8008188:	3307      	adds	r3, #7
 800818a:	f023 0307 	bic.w	r3, r3, #7
 800818e:	3308      	adds	r3, #8
 8008190:	9303      	str	r3, [sp, #12]
 8008192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008194:	444b      	add	r3, r9
 8008196:	9309      	str	r3, [sp, #36]	; 0x24
 8008198:	e76d      	b.n	8008076 <_svfiprintf_r+0x4a>
 800819a:	fb05 3202 	mla	r2, r5, r2, r3
 800819e:	2001      	movs	r0, #1
 80081a0:	460f      	mov	r7, r1
 80081a2:	e7a6      	b.n	80080f2 <_svfiprintf_r+0xc6>
 80081a4:	2300      	movs	r3, #0
 80081a6:	3701      	adds	r7, #1
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	4619      	mov	r1, r3
 80081ac:	250a      	movs	r5, #10
 80081ae:	4638      	mov	r0, r7
 80081b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b4:	3a30      	subs	r2, #48	; 0x30
 80081b6:	2a09      	cmp	r2, #9
 80081b8:	d903      	bls.n	80081c2 <_svfiprintf_r+0x196>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0c8      	beq.n	8008150 <_svfiprintf_r+0x124>
 80081be:	9105      	str	r1, [sp, #20]
 80081c0:	e7c6      	b.n	8008150 <_svfiprintf_r+0x124>
 80081c2:	fb05 2101 	mla	r1, r5, r1, r2
 80081c6:	2301      	movs	r3, #1
 80081c8:	4607      	mov	r7, r0
 80081ca:	e7f0      	b.n	80081ae <_svfiprintf_r+0x182>
 80081cc:	ab03      	add	r3, sp, #12
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	4622      	mov	r2, r4
 80081d2:	4b11      	ldr	r3, [pc, #68]	; (8008218 <_svfiprintf_r+0x1ec>)
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	4640      	mov	r0, r8
 80081d8:	f7fe fa0e 	bl	80065f8 <_printf_float>
 80081dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081e0:	4681      	mov	r9, r0
 80081e2:	d1d6      	bne.n	8008192 <_svfiprintf_r+0x166>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	065b      	lsls	r3, r3, #25
 80081e8:	f53f af35 	bmi.w	8008056 <_svfiprintf_r+0x2a>
 80081ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ee:	b01d      	add	sp, #116	; 0x74
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4622      	mov	r2, r4
 80081fa:	4b07      	ldr	r3, [pc, #28]	; (8008218 <_svfiprintf_r+0x1ec>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	4640      	mov	r0, r8
 8008200:	f7fe fc9c 	bl	8006b3c <_printf_i>
 8008204:	e7ea      	b.n	80081dc <_svfiprintf_r+0x1b0>
 8008206:	bf00      	nop
 8008208:	0800848c 	.word	0x0800848c
 800820c:	08008492 	.word	0x08008492
 8008210:	08008496 	.word	0x08008496
 8008214:	080065f9 	.word	0x080065f9
 8008218:	08007f79 	.word	0x08007f79

0800821c <__ascii_mbtowc>:
 800821c:	b082      	sub	sp, #8
 800821e:	b901      	cbnz	r1, 8008222 <__ascii_mbtowc+0x6>
 8008220:	a901      	add	r1, sp, #4
 8008222:	b142      	cbz	r2, 8008236 <__ascii_mbtowc+0x1a>
 8008224:	b14b      	cbz	r3, 800823a <__ascii_mbtowc+0x1e>
 8008226:	7813      	ldrb	r3, [r2, #0]
 8008228:	600b      	str	r3, [r1, #0]
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	1c10      	adds	r0, r2, #0
 800822e:	bf18      	it	ne
 8008230:	2001      	movne	r0, #1
 8008232:	b002      	add	sp, #8
 8008234:	4770      	bx	lr
 8008236:	4610      	mov	r0, r2
 8008238:	e7fb      	b.n	8008232 <__ascii_mbtowc+0x16>
 800823a:	f06f 0001 	mvn.w	r0, #1
 800823e:	e7f8      	b.n	8008232 <__ascii_mbtowc+0x16>

08008240 <memmove>:
 8008240:	4288      	cmp	r0, r1
 8008242:	b510      	push	{r4, lr}
 8008244:	eb01 0302 	add.w	r3, r1, r2
 8008248:	d807      	bhi.n	800825a <memmove+0x1a>
 800824a:	1e42      	subs	r2, r0, #1
 800824c:	4299      	cmp	r1, r3
 800824e:	d00a      	beq.n	8008266 <memmove+0x26>
 8008250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008254:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008258:	e7f8      	b.n	800824c <memmove+0xc>
 800825a:	4283      	cmp	r3, r0
 800825c:	d9f5      	bls.n	800824a <memmove+0xa>
 800825e:	1881      	adds	r1, r0, r2
 8008260:	1ad2      	subs	r2, r2, r3
 8008262:	42d3      	cmn	r3, r2
 8008264:	d100      	bne.n	8008268 <memmove+0x28>
 8008266:	bd10      	pop	{r4, pc}
 8008268:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008270:	e7f7      	b.n	8008262 <memmove+0x22>

08008272 <_realloc_r>:
 8008272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008274:	4607      	mov	r7, r0
 8008276:	4614      	mov	r4, r2
 8008278:	460e      	mov	r6, r1
 800827a:	b921      	cbnz	r1, 8008286 <_realloc_r+0x14>
 800827c:	4611      	mov	r1, r2
 800827e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008282:	f7fe b8d7 	b.w	8006434 <_malloc_r>
 8008286:	b922      	cbnz	r2, 8008292 <_realloc_r+0x20>
 8008288:	f7fe f886 	bl	8006398 <_free_r>
 800828c:	4625      	mov	r5, r4
 800828e:	4628      	mov	r0, r5
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008292:	f000 f821 	bl	80082d8 <_malloc_usable_size_r>
 8008296:	42a0      	cmp	r0, r4
 8008298:	d20f      	bcs.n	80082ba <_realloc_r+0x48>
 800829a:	4621      	mov	r1, r4
 800829c:	4638      	mov	r0, r7
 800829e:	f7fe f8c9 	bl	8006434 <_malloc_r>
 80082a2:	4605      	mov	r5, r0
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d0f2      	beq.n	800828e <_realloc_r+0x1c>
 80082a8:	4631      	mov	r1, r6
 80082aa:	4622      	mov	r2, r4
 80082ac:	f7ff fb6e 	bl	800798c <memcpy>
 80082b0:	4631      	mov	r1, r6
 80082b2:	4638      	mov	r0, r7
 80082b4:	f7fe f870 	bl	8006398 <_free_r>
 80082b8:	e7e9      	b.n	800828e <_realloc_r+0x1c>
 80082ba:	4635      	mov	r5, r6
 80082bc:	e7e7      	b.n	800828e <_realloc_r+0x1c>

080082be <__ascii_wctomb>:
 80082be:	b149      	cbz	r1, 80082d4 <__ascii_wctomb+0x16>
 80082c0:	2aff      	cmp	r2, #255	; 0xff
 80082c2:	bf85      	ittet	hi
 80082c4:	238a      	movhi	r3, #138	; 0x8a
 80082c6:	6003      	strhi	r3, [r0, #0]
 80082c8:	700a      	strbls	r2, [r1, #0]
 80082ca:	f04f 30ff 	movhi.w	r0, #4294967295
 80082ce:	bf98      	it	ls
 80082d0:	2001      	movls	r0, #1
 80082d2:	4770      	bx	lr
 80082d4:	4608      	mov	r0, r1
 80082d6:	4770      	bx	lr

080082d8 <_malloc_usable_size_r>:
 80082d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082dc:	1f18      	subs	r0, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfbc      	itt	lt
 80082e2:	580b      	ldrlt	r3, [r1, r0]
 80082e4:	18c0      	addlt	r0, r0, r3
 80082e6:	4770      	bx	lr

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
